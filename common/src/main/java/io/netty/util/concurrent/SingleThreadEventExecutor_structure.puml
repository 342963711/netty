@startuml/' diagram meta data startconfig=StructureConfiguration;{  "projectClassification": {    "searchMode": "OpenProject", // OpenProject, AllProjects    "includedProjects": "",    "pathEndKeywords": "*.impl",    "isClientPath": "",    "isClientName": "",    "isTestPath": "",    "isTestName": "",    "isMappingPath": "",    "isMappingName": "",    "isDataAccessPath": "",    "isDataAccessName": "",    "isDataStructurePath": "",    "isDataStructureName": "",    "isInterfaceStructuresPath": "",    "isInterfaceStructuresName": "",    "isEntryPointPath": "",    "isEntryPointName": "",    "treatFinalFieldsAsMandatory": false  },  "graphRestriction": {    "classPackageExcludeFilter": "",    "classPackageIncludeFilter": "",    "classNameExcludeFilter": "",    "classNameIncludeFilter": "",    "methodNameExcludeFilter": "",    "methodNameIncludeFilter": "",    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step    "removeByAnnotation": "",    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done    "removeByClassName": "",    "cutMappings": false,    "cutEnum": true,    "cutTests": true,    "cutClient": true,    "cutDataAccess": true,    "cutInterfaceStructures": true,    "cutDataStructures": true,    "cutGetterAndSetter": true,    "cutConstructors": true  },  "graphTraversal": {    "forwardDepth": 3,    "backwardDepth": 3,    "classPackageExcludeFilter": "",    "classPackageIncludeFilter": "",    "classNameExcludeFilter": "",    "classNameIncludeFilter": "",    "methodNameExcludeFilter": "",    "methodNameIncludeFilter": "",    "hideMappings": false,    "hideDataStructures": false,    "hidePrivateMethods": true,    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation    "onlyShowApplicationEntryPoints": false, // root node is included    "useMethodCallsForStructureDiagram": "ForwardOnly" // ForwardOnly, BothDirections, No  },  "details": {    "aggregation": "GroupByClass", // ByClass, GroupByClass, None    "showClassGenericTypes": true,    "showMethods": true,    "showMethodParameterNames": true,    "showMethodParameterTypes": true,    "showMethodReturnType": true,    "showPackageLevels": 2,    "showDetailedClassStructure": true  },  "rootClass": "io.netty.util.concurrent.SingleThreadEventExecutor",  "extensionCallbackMethod": "" // qualified.class.name#methodName - signature: public static String method(String)}diagram meta data end '/digraph g {    rankdir="TB"    splines=polyline    'nodes subgraph cluster_104711394 {    	label=netty	labeljust=l	fillcolor="#ececec"	style=filled      subgraph cluster_1219756954 {    	label=testsuite	labeljust=l	fillcolor="#d8d8d8"	style=filled      FileRegionWrapper780273937[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)FileRegionWrapper</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   region: FileRegion [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ count(): long</TD></TR><TR><TD ALIGN="LEFT" >+ position(): long</TD></TR><TR><TD ALIGN="LEFT" >+ refCnt(): int</TD></TR><TR><TD ALIGN="LEFT" >+ release(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ release(decrement: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): FileRegion</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): FileRegion</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): FileRegion</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): FileRegion</TD></TR><TR><TD ALIGN="LEFT" >+ transferTo(target: WritableByteChannel, position: long): long</TD></TR><TR><TD ALIGN="LEFT" >+ transfered(): long</TD></TR><TR><TD ALIGN="LEFT" >+ transferred(): long</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];SocketTestPermutation1435837068[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)SocketTestPermutation</TD></TR><HR/><TR><TD ALIGN="LEFT" >#   nioBossGroup: EventLoopGroup [0..1]</TD></TR><TR><TD ALIGN="LEFT" >#   nioWorkerGroup: EventLoopGroup [0..1]</TD></TR><TR><TD ALIGN="LEFT" >#   oioBossGroup: EventLoopGroup [0..1]</TD></TR><TR><TD ALIGN="LEFT" >#   oioWorkerGroup: EventLoopGroup [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ clientSocket(): List&lt;BootstrapFactory&lt;Bootstrap&gt;&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ clientSocketWithFastOpen(): List&lt;BootstrapFactory&lt;Bootstrap&gt;&gt;</TD></TR><TR><TD ALIGN="LEFT" ># combo(sbfs: List&lt;BootstrapFactory&lt;A&gt;&gt;, cbfs: List&lt;BootstrapFactory&lt;B&gt;&gt;): List&lt;BootstrapComboFactory&lt;A, B&gt;&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ datagram(family: InternetProtocolFamily): List&lt;BootstrapComboFactory&lt;Bootstrap, Bootstrap&gt;&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ datagramSocket(): List&lt;BootstrapFactory&lt;Bootstrap&gt;&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ serverSocket(): List&lt;BootstrapFactory&lt;ServerBootstrap&gt;&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ socket(): List&lt;BootstrapComboFactory&lt;ServerBootstrap, Bootstrap&gt;&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ socketWithFastOpen(): List&lt;BootstrapComboFactory&lt;ServerBootstrap, Bootstrap&gt;&gt;</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];TestNumReadsRecvByteBufAllocator1308506274[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)TestNumReadsRecvByteBufAllocator</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   numReads: int [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ newHandle(): ExtendedHandle</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];TestRecvByteBufAllocator201143292[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)TestRecvByteBufAllocator</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ newHandle(): ExtendedHandle</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];} subgraph cluster_1378034062 {    	label=util	labeljust=l	fillcolor="#d8d8d8"	style=filled      AbstractEventExecutor1377604431[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AbstractEventExecutor</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   parent: EventExecutorGroup [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   selfCollection: Collection&lt;EventExecutor&gt; [0..*]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ inEventLoop(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ iterator(): Iterator&lt;EventExecutor&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ lazyExecute(task: Runnable)</TD></TR><TR><TD ALIGN="LEFT" >- lazyExecute0(task: Runnable)</TD></TR><TR><TD ALIGN="LEFT" >+ newFailedFuture(cause: Throwable): Future&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ newProgressivePromise(): ProgressivePromise&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ newPromise(): Promise&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ newSucceededFuture(result: V): Future&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" ># newTaskFor(runnable: Runnable, value: T): RunnableFuture&lt;T&gt;</TD></TR><TR><TD ALIGN="LEFT" ># newTaskFor(callable: Callable&lt;T&gt;): RunnableFuture&lt;T&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ next(): EventExecutor</TD></TR><TR><TD ALIGN="LEFT" >+ parent(): EventExecutorGroup</TD></TR><TR><TD ALIGN="LEFT" ># runTask(task: Runnable)</TD></TR><TR><TD ALIGN="LEFT" ># safeExecute(task: Runnable)</TD></TR><TR><TD ALIGN="LEFT" >+ schedule(command: Runnable, delay: long, unit: TimeUnit): ScheduledFuture&lt;?&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ schedule(callable: Callable&lt;V&gt;, delay: long, unit: TimeUnit): ScheduledFuture&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ scheduleAtFixedRate(command: Runnable, initialDelay: long, period: long, unit: TimeUnit): ScheduledFuture&lt;?&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ scheduleWithFixedDelay(command: Runnable, initialDelay: long, delay: long, unit: TimeUnit): ScheduledFuture&lt;?&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ shutdown()</TD></TR><TR><TD ALIGN="LEFT" >+ shutdownGracefully(): Future&lt;?&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ shutdownNow(): List&lt;Runnable&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ submit(task: Runnable): Future&lt;?&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ submit(task: Runnable, result: T): Future&lt;T&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ submit(task: Callable&lt;T&gt;): Future&lt;T&gt;</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];AbstractEventExecutorGroup1377604431[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AbstractEventExecutorGroup</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ execute(command: Runnable)</TD></TR><TR><TD ALIGN="LEFT" >+ invokeAll(tasks: Collection&lt;? extends Callable&lt;T&gt;&gt;): List&lt;Future&lt;T&gt;&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ invokeAll(tasks: Collection&lt;? extends Callable&lt;T&gt;&gt;, timeout: long, unit: TimeUnit): List&lt;Future&lt;T&gt;&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ invokeAny(tasks: Collection&lt;? extends Callable&lt;T&gt;&gt;): T</TD></TR><TR><TD ALIGN="LEFT" >+ invokeAny(tasks: Collection&lt;? extends Callable&lt;T&gt;&gt;, timeout: long, unit: TimeUnit): T</TD></TR><TR><TD ALIGN="LEFT" >+ schedule(command: Runnable, delay: long, unit: TimeUnit): ScheduledFuture&lt;?&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ schedule(callable: Callable&lt;V&gt;, delay: long, unit: TimeUnit): ScheduledFuture&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ scheduleAtFixedRate(command: Runnable, initialDelay: long, period: long, unit: TimeUnit): ScheduledFuture&lt;?&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ scheduleWithFixedDelay(command: Runnable, initialDelay: long, delay: long, unit: TimeUnit): ScheduledFuture&lt;?&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ shutdown()</TD></TR><TR><TD ALIGN="LEFT" >+ shutdownGracefully(): Future&lt;?&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ shutdownNow(): List&lt;Runnable&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ submit(task: Runnable): Future&lt;?&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ submit(task: Runnable, result: T): Future&lt;T&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ submit(task: Callable&lt;T&gt;): Future&lt;T&gt;</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];AbstractFuture1377604431[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AbstractFuture&lt;V&gt;</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ get(timeout: long, unit: TimeUnit): V</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];AbstractInternalLogger2048307398[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AbstractInternalLogger</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   name: String [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ debug(t: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >+ error(t: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >+ info(t: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >+ isEnabled(level: InternalLogLevel): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ log(level: InternalLogLevel, msg: String, cause: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >+ log(level: InternalLogLevel, cause: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >+ log(level: InternalLogLevel, msg: String)</TD></TR><TR><TD ALIGN="LEFT" >+ log(level: InternalLogLevel, format: String, arg: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ log(level: InternalLogLevel, format: String, argA: Object, argB: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ log(level: InternalLogLevel, format: String, arguments: Object...)</TD></TR><TR><TD ALIGN="LEFT" >+ name(): String</TD></TR><TR><TD ALIGN="LEFT" ># readResolve(): Object</TD></TR><TR><TD ALIGN="LEFT" >+ trace(t: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >+ warn(t: Throwable)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];AbstractReferenceCounted1023385430[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AbstractReferenceCounted</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   refCnt: int [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" ># deallocate()</TD></TR><TR><TD ALIGN="LEFT" >- handleRelease(result: boolean): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ refCnt(): int</TD></TR><TR><TD ALIGN="LEFT" >+ release(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ release(decrement: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): ReferenceCounted</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): ReferenceCounted</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): ReferenceCounted</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];AbstractScheduledEventExecutor1377604431[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AbstractScheduledEventExecutor</TD></TR><HR/><TR><TD ALIGN="LEFT" >#   nextTaskId: long [1]</TD></TR><TR><TD ALIGN="LEFT" >#   scheduledTaskQueue: PriorityQueue&lt;ScheduledFutureTask&lt;?&gt;&gt; [0..*]</TD></TR><HR/><TR><TD ALIGN="LEFT" ># afterScheduledTaskSubmitted(deadlineNanos: long): boolean</TD></TR><TR><TD ALIGN="LEFT" ># beforeScheduledTaskSubmitted(deadlineNanos: long): boolean</TD></TR><TR><TD ALIGN="LEFT" ># cancelScheduledTasks()</TD></TR><TR><TD ALIGN="LEFT" ># deadlineNanos(nanoTime: long, delay: long): long</TD></TR><TR><TD ALIGN="LEFT" ># deadlineToDelayNanos(deadlineNanos: long): long</TD></TR><TR><TD ALIGN="LEFT" ># defaultCurrentTimeNanos(): long</TD></TR><TR><TD ALIGN="LEFT" ># initialNanoTime(): long</TD></TR><TR><TD ALIGN="LEFT" >- isNullOrEmpty(queue: Queue&lt;ScheduledFutureTask&lt;?&gt;&gt;): boolean</TD></TR><TR><TD ALIGN="LEFT" ># nanoTime(): long</TD></TR><TR><TD ALIGN="LEFT" ># nextScheduledTaskDeadlineNanos(): long</TD></TR><TR><TD ALIGN="LEFT" ># nextScheduledTaskNano(): long</TD></TR><TR><TD ALIGN="LEFT" ># peekScheduledTask(): ScheduledFutureTask&lt;?&gt;</TD></TR><TR><TD ALIGN="LEFT" ># pollScheduledTask(): Runnable</TD></TR><TR><TD ALIGN="LEFT" ># pollScheduledTask(nanoTime: long): Runnable</TD></TR><TR><TD ALIGN="LEFT" ># removeScheduled(task: ScheduledFutureTask&lt;?&gt;)</TD></TR><TR><TD ALIGN="LEFT" >+ schedule(command: Runnable, delay: long, unit: TimeUnit): ScheduledFuture&lt;?&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ schedule(callable: Callable&lt;V&gt;, delay: long, unit: TimeUnit): ScheduledFuture&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >- schedule(task: ScheduledFutureTask&lt;V&gt;): ScheduledFuture&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ scheduleAtFixedRate(command: Runnable, initialDelay: long, period: long, unit: TimeUnit): ScheduledFuture&lt;?&gt;</TD></TR><TR><TD ALIGN="LEFT" ># scheduleFromEventLoop(task: ScheduledFutureTask&lt;?&gt;)</TD></TR><TR><TD ALIGN="LEFT" >+ scheduleWithFixedDelay(command: Runnable, initialDelay: long, delay: long, unit: TimeUnit): ScheduledFuture&lt;?&gt;</TD></TR><TR><TD ALIGN="LEFT" ># scheduledTaskQueue(): PriorityQueue&lt;ScheduledFutureTask&lt;?&gt;&gt;</TD></TR><TR><TD ALIGN="LEFT" ># validateScheduled(amount: long, unit: TimeUnit)</TD></TR><TR><TD ALIGN="LEFT" >- validateScheduled0(amount: long, unit: TimeUnit)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];CleanerJava61713044053[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)CleanerJava6</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ freeDirectBuffer(buffer: ByteBuffer)</TD></TR><TR><TD ALIGN="LEFT" >- freeDirectBuffer0(buffer: ByteBuffer)</TD></TR><TR><TD ALIGN="LEFT" >- freeDirectBufferPrivileged(buffer: ByteBuffer)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];CleanerJava91713044053[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)CleanerJava9</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ freeDirectBuffer(buffer: ByteBuffer)</TD></TR><TR><TD ALIGN="LEFT" >- freeDirectBufferPrivileged(buffer: ByteBuffer)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];CommonsLogger2048307398[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)CommonsLogger</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   logger: Log [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ debug(msg: String)</TD></TR><TR><TD ALIGN="LEFT" >+ debug(format: String, arg: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ debug(format: String, argA: Object, argB: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ debug(format: String, arguments: Object...)</TD></TR><TR><TD ALIGN="LEFT" >+ debug(msg: String, t: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >+ error(msg: String)</TD></TR><TR><TD ALIGN="LEFT" >+ error(format: String, arg: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ error(format: String, argA: Object, argB: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ error(format: String, arguments: Object...)</TD></TR><TR><TD ALIGN="LEFT" >+ error(msg: String, t: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >+ info(msg: String)</TD></TR><TR><TD ALIGN="LEFT" >+ info(format: String, arg: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ info(format: String, argA: Object, argB: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ info(format: String, arguments: Object...)</TD></TR><TR><TD ALIGN="LEFT" >+ info(msg: String, t: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >+ trace(msg: String)</TD></TR><TR><TD ALIGN="LEFT" >+ trace(format: String, arg: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ trace(format: String, argA: Object, argB: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ trace(format: String, arguments: Object...)</TD></TR><TR><TD ALIGN="LEFT" >+ trace(msg: String, t: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >+ warn(msg: String)</TD></TR><TR><TD ALIGN="LEFT" >+ warn(format: String, arg: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ warn(format: String, argA: Object, argB: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ warn(format: String, arguments: Object...)</TD></TR><TR><TD ALIGN="LEFT" >+ warn(msg: String, t: Throwable)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];CompleteFuture1377604431[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)CompleteFuture&lt;V&gt;</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   executor: EventExecutor [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ addListener(listener: GenericFutureListener&lt;? extends Future&lt;? super V&gt;&gt;): Future&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ addListeners(listeners: GenericFutureListener&lt;? extends Future&lt;? super V&gt;&gt;...): Future&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ await(): Future&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ await(timeout: long, unit: TimeUnit): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ await(timeoutMillis: long): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ awaitUninterruptibly(): Future&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ awaitUninterruptibly(timeout: long, unit: TimeUnit): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ awaitUninterruptibly(timeoutMillis: long): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ cancel(mayInterruptIfRunning: boolean): boolean</TD></TR><TR><TD ALIGN="LEFT" ># executor(): EventExecutor</TD></TR><TR><TD ALIGN="LEFT" >+ removeListener(listener: GenericFutureListener&lt;? extends Future&lt;? super V&gt;&gt;): Future&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ removeListeners(listeners: GenericFutureListener&lt;? extends Future&lt;? super V&gt;&gt;...): Future&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ sync(): Future&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ syncUninterruptibly(): Future&lt;V&gt;</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];ConstantTimeUtils1713044053[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)ConstantTimeUtils</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ equalsConstantTime(x: int, y: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ equalsConstantTime(x: long, y: long): int</TD></TR><TR><TD ALIGN="LEFT" >+ equalsConstantTime(bytes1: byte[], startPos1: int, bytes2: byte[], startPos2: int, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ equalsConstantTime(s1: CharSequence, s2: CharSequence): int</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultAttributeMap1023385430[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultAttributeMap</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   attributes: DefaultAttribute[] [0..*]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ attr(key: AttributeKey&lt;T&gt;): Attribute&lt;T&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ hasAttr(key: AttributeKey&lt;T&gt;): boolean</TD></TR><TR><TD ALIGN="LEFT" >- orderedCopyOnInsert(sortedSrc: DefaultAttribute[], srcLength: int, copy: DefaultAttribute[], toInsert: DefaultAttribute)</TD></TR><TR><TD ALIGN="LEFT" >- removeAttributeIfMatch(key: AttributeKey&lt;T&gt;, value: DefaultAttribute&lt;T&gt;)</TD></TR><TR><TD ALIGN="LEFT" >- searchAttributeByKey(sortedAttributes: DefaultAttribute[], key: AttributeKey&lt;?&gt;): int</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultEventExecutor1377604431[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultEventExecutor</TD></TR><HR/><TR><TD ALIGN="LEFT" ># run()</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultFutureListeners1377604431[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultFutureListeners</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   listeners: GenericFutureListener&lt;? extends Future&lt;?&gt;&gt;[] [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   progressiveSize: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   size: int [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ add(l: GenericFutureListener&lt;? extends Future&lt;?&gt;&gt;)</TD></TR><TR><TD ALIGN="LEFT" >+ listeners(): GenericFutureListener&lt;? extends Future&lt;?&gt;&gt;[]</TD></TR><TR><TD ALIGN="LEFT" >+ progressiveSize(): int</TD></TR><TR><TD ALIGN="LEFT" >+ remove(l: GenericFutureListener&lt;? extends Future&lt;?&gt;&gt;)</TD></TR><TR><TD ALIGN="LEFT" >+ size(): int</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultPriorityQueue1713044053[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultPriorityQueue&lt;T extends PriorityQueueNode&gt;</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   comparator: Comparator&lt;T&gt; [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   queue: T[] [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   size: int [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >- bubbleDown(k: int, node: T)</TD></TR><TR><TD ALIGN="LEFT" >- bubbleUp(k: int, node: T)</TD></TR><TR><TD ALIGN="LEFT" >+ clear()</TD></TR><TR><TD ALIGN="LEFT" >+ clearIgnoringIndexes()</TD></TR><TR><TD ALIGN="LEFT" >+ contains(o: Object): boolean</TD></TR><TR><TD ALIGN="LEFT" >- contains(node: PriorityQueueNode, i: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ containsTyped(node: T): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ iterator(): Iterator&lt;T&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ offer(e: T): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ peek(): T</TD></TR><TR><TD ALIGN="LEFT" >+ poll(): T</TD></TR><TR><TD ALIGN="LEFT" >+ priorityChanged(node: T)</TD></TR><TR><TD ALIGN="LEFT" >+ remove(o: Object): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ removeTyped(node: T): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ size(): int</TD></TR><TR><TD ALIGN="LEFT" >+ toArray(): Object[]</TD></TR><TR><TD ALIGN="LEFT" >+ toArray(a: X[]): X[]</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultProgressivePromise1377604431[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultProgressivePromise&lt;V&gt;</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ addListener(listener: GenericFutureListener&lt;? extends Future&lt;? super V&gt;&gt;): ProgressivePromise&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ addListeners(listeners: GenericFutureListener&lt;? extends Future&lt;? super V&gt;&gt;...): ProgressivePromise&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ await(): ProgressivePromise&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ awaitUninterruptibly(): ProgressivePromise&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ removeListener(listener: GenericFutureListener&lt;? extends Future&lt;? super V&gt;&gt;): ProgressivePromise&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ removeListeners(listeners: GenericFutureListener&lt;? extends Future&lt;? super V&gt;&gt;...): ProgressivePromise&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ setFailure(cause: Throwable): ProgressivePromise&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ setProgress(progress: long, total: long): ProgressivePromise&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ setSuccess(result: V): ProgressivePromise&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ sync(): ProgressivePromise&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ syncUninterruptibly(): ProgressivePromise&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ tryProgress(progress: long, total: long): boolean</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultPromise1377604431[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultPromise&lt;V&gt;</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   executor: EventExecutor [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   listener: GenericFutureListener&lt;? extends Future&lt;?&gt;&gt; [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   listeners: DefaultFutureListeners [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   notifyingListeners: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   result: Object [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   waiters: short [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ addListener(listener: GenericFutureListener&lt;? extends Future&lt;? super V&gt;&gt;): Promise&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >- addListener0(listener: GenericFutureListener&lt;? extends Future&lt;? super V&gt;&gt;)</TD></TR><TR><TD ALIGN="LEFT" >+ addListeners(listeners: GenericFutureListener&lt;? extends Future&lt;? super V&gt;&gt;...): Promise&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ await(): Promise&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ await(timeout: long, unit: TimeUnit): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ await(timeoutMillis: long): boolean</TD></TR><TR><TD ALIGN="LEFT" >- await0(timeoutNanos: long, interruptable: boolean): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ awaitUninterruptibly(): Promise&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ awaitUninterruptibly(timeout: long, unit: TimeUnit): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ awaitUninterruptibly(timeoutMillis: long): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ cancel(mayInterruptIfRunning: boolean): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ cause(): Throwable</TD></TR><TR><TD ALIGN="LEFT" >- cause0(result: Object): Throwable</TD></TR><TR><TD ALIGN="LEFT" ># checkDeadLock()</TD></TR><TR><TD ALIGN="LEFT" >- checkNotifyWaiters(): boolean</TD></TR><TR><TD ALIGN="LEFT" >- decWaiters()</TD></TR><TR><TD ALIGN="LEFT" ># executor(): EventExecutor</TD></TR><TR><TD ALIGN="LEFT" >+ get(timeout: long, unit: TimeUnit): V</TD></TR><TR><TD ALIGN="LEFT" >- incWaiters()</TD></TR><TR><TD ALIGN="LEFT" >- isCancelled0(result: Object): boolean</TD></TR><TR><TD ALIGN="LEFT" >- isDone0(result: Object): boolean</TD></TR><TR><TD ALIGN="LEFT" ># notifyListener(eventExecutor: EventExecutor, future: Future&lt;?&gt;, listener: GenericFutureListener&lt;?&gt;)</TD></TR><TR><TD ALIGN="LEFT" >- notifyListener0(future: Future, l: GenericFutureListener)</TD></TR><TR><TD ALIGN="LEFT" >- notifyListenerWithStackOverFlowProtection(executor: EventExecutor, future: Future&lt;?&gt;, listener: GenericFutureListener&lt;?&gt;)</TD></TR><TR><TD ALIGN="LEFT" >- notifyListeners()</TD></TR><TR><TD ALIGN="LEFT" >- notifyListeners0(listeners: DefaultFutureListeners)</TD></TR><TR><TD ALIGN="LEFT" >- notifyListenersNow()</TD></TR><TR><TD ALIGN="LEFT" >- notifyProgressiveListener0(future: ProgressiveFuture, l: GenericProgressiveFutureListener, progress: long, total: long)</TD></TR><TR><TD ALIGN="LEFT" ># notifyProgressiveListeners(progress: long, total: long)</TD></TR><TR><TD ALIGN="LEFT" >- notifyProgressiveListeners0(future: ProgressiveFuture&lt;?&gt;, listeners: GenericProgressiveFutureListener&lt;?&gt;[], progress: long, total: long)</TD></TR><TR><TD ALIGN="LEFT" >- progressiveListeners(): Object</TD></TR><TR><TD ALIGN="LEFT" >+ removeListener(listener: GenericFutureListener&lt;? extends Future&lt;? super V&gt;&gt;): Promise&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >- removeListener0(toRemove: GenericFutureListener&lt;? extends Future&lt;? super V&gt;&gt;)</TD></TR><TR><TD ALIGN="LEFT" >+ removeListeners(listeners: GenericFutureListener&lt;? extends Future&lt;? super V&gt;&gt;...): Promise&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >- rethrowIfFailed()</TD></TR><TR><TD ALIGN="LEFT" >- safeExecute(executor: EventExecutor, task: Runnable)</TD></TR><TR><TD ALIGN="LEFT" >+ setFailure(cause: Throwable): Promise&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >- setFailure0(cause: Throwable): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ setSuccess(result: V): Promise&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >- setSuccess0(result: V): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ setUncancellable(): boolean</TD></TR><TR><TD ALIGN="LEFT" >- setValue0(objResult: Object): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ sync(): Promise&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ syncUninterruptibly(): Promise&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" ># toStringBuilder(): StringBuilder</TD></TR><TR><TD ALIGN="LEFT" >+ tryFailure(cause: Throwable): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ trySuccess(result: V): boolean</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultThreadProperties447105988[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultThreadProperties</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   t: Thread [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ id(): long</TD></TR><TR><TD ALIGN="LEFT" >+ name(): String</TD></TR><TR><TD ALIGN="LEFT" >+ priority(): int</TD></TR><TR><TD ALIGN="LEFT" >+ stackTrace(): StackTraceElement[]</TD></TR><TR><TD ALIGN="LEFT" >+ state(): State</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];EmptyMap397406466[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)EmptyMap</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ clear()</TD></TR><TR><TD ALIGN="LEFT" >+ containsKey(key: Object): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ containsKey(key: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ containsValue(value: Object): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ entries(): Iterable&lt;PrimitiveEntry&lt;Object&gt;&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ entrySet(): Set&lt;Entry&lt;Integer, Object&gt;&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ get(key: int): Object</TD></TR><TR><TD ALIGN="LEFT" >+ get(key: Object): Object</TD></TR><TR><TD ALIGN="LEFT" >+ keySet(): Set&lt;Integer&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ put(key: int, value: Object): Object</TD></TR><TR><TD ALIGN="LEFT" >+ put(key: Integer, value: Object): Object</TD></TR><TR><TD ALIGN="LEFT" >+ putAll(m: Map&lt;? extends Integer, ?&gt;)</TD></TR><TR><TD ALIGN="LEFT" >+ remove(key: int): Object</TD></TR><TR><TD ALIGN="LEFT" >+ remove(key: Object): Object</TD></TR><TR><TD ALIGN="LEFT" >+ size(): int</TD></TR><TR><TD ALIGN="LEFT" >+ values(): Collection&lt;Object&gt;</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];EmptyPriorityQueue1713044053[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)EmptyPriorityQueue&lt;T&gt;</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ add(t: T): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ addAll(c: Collection&lt;? extends T&gt;): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ clear()</TD></TR><TR><TD ALIGN="LEFT" >+ clearIgnoringIndexes()</TD></TR><TR><TD ALIGN="LEFT" >+ contains(o: Object): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ containsAll(c: Collection&lt;?&gt;): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ containsTyped(node: T): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ element(): T</TD></TR><TR><TD ALIGN="LEFT" >+ instance(): EmptyPriorityQueue&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ iterator(): Iterator&lt;T&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ offer(t: T): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ peek(): T</TD></TR><TR><TD ALIGN="LEFT" >+ poll(): T</TD></TR><TR><TD ALIGN="LEFT" >+ priorityChanged(node: T)</TD></TR><TR><TD ALIGN="LEFT" >+ remove(o: Object): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ remove(): T</TD></TR><TR><TD ALIGN="LEFT" >+ removeAll(c: Collection&lt;?&gt;): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ removeTyped(node: T): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ retainAll(c: Collection&lt;?&gt;): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ size(): int</TD></TR><TR><TD ALIGN="LEFT" >+ toArray(): Object[]</TD></TR><TR><TD ALIGN="LEFT" >+ toArray(a: T1[]): T1[]</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];EntryImpl1395076945[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)EntryImpl</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   entry: PrimitiveEntry&lt;V&gt; [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ key(): int</TD></TR><TR><TD ALIGN="LEFT" >+ value(): V</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];FailedFuture1377604431[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)FailedFuture&lt;V&gt;</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   cause: Throwable [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ cause(): Throwable</TD></TR><TR><TD ALIGN="LEFT" >+ sync(): Future&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ syncUninterruptibly(): Future&lt;V&gt;</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];FastThreadLocal1377604431[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)FastThreadLocal&lt;V&gt;</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   index: int [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >- addToVariablesToRemove(threadLocalMap: InternalThreadLocalMap, variable: FastThreadLocal&lt;?&gt;)</TD></TR><TR><TD ALIGN="LEFT" >+ destroy()</TD></TR><TR><TD ALIGN="LEFT" >+ get(threadLocalMap: InternalThreadLocalMap): V</TD></TR><TR><TD ALIGN="LEFT" ># initialValue(): V</TD></TR><TR><TD ALIGN="LEFT" >- initialize(threadLocalMap: InternalThreadLocalMap): V</TD></TR><TR><TD ALIGN="LEFT" >+ isSet(threadLocalMap: InternalThreadLocalMap): boolean</TD></TR><TR><TD ALIGN="LEFT" ># onRemoval(value: V)</TD></TR><TR><TD ALIGN="LEFT" >+ remove()</TD></TR><TR><TD ALIGN="LEFT" >+ remove(threadLocalMap: InternalThreadLocalMap)</TD></TR><TR><TD ALIGN="LEFT" >+ removeAll()</TD></TR><TR><TD ALIGN="LEFT" >- removeFromVariablesToRemove(threadLocalMap: InternalThreadLocalMap, variable: FastThreadLocal&lt;?&gt;)</TD></TR><TR><TD ALIGN="LEFT" >+ size(): int</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];FastThreadLocalThread1377604431[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)FastThreadLocalThread</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   cleanupFastThreadLocals: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   threadLocalMap: InternalThreadLocalMap [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ permitBlockingCalls(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ threadLocalMap(): InternalThreadLocalMap</TD></TR><TR><TD ALIGN="LEFT" >+ willCleanupFastThreadLocals(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ willCleanupFastThreadLocals(thread: Thread): boolean</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];GenericEventExecutorChooser1538551386[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)GenericEventExecutorChooser</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   executors: EventExecutor[] [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   idx: AtomicLong [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ next(): EventExecutor</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];GlobalEventExecutor1377604431[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)GlobalEventExecutor</TD></TR><HR/><TR><TD ALIGN="LEFT" >#   quietPeriodTask: ScheduledFutureTask&lt;Void&gt; [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   started: AtomicBoolean [0..1]</TD></TR><TR><TD ALIGN="LEFT" >#   taskQueue: BlockingQueue&lt;Runnable&gt; [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   taskRunner: TaskRunner [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   terminationFuture: Future&lt;?&gt; [0..1]</TD></TR><TR><TD ALIGN="LEFT" >#   thread: Thread [0..1]</TD></TR><TR><TD ALIGN="LEFT" >#   threadFactory: ThreadFactory [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >- addTask(task: Runnable)</TD></TR><TR><TD ALIGN="LEFT" >+ awaitInactivity(timeout: long, unit: TimeUnit): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ awaitTermination(timeout: long, unit: TimeUnit): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ execute(task: Runnable)</TD></TR><TR><TD ALIGN="LEFT" >- execute0(task: Runnable)</TD></TR><TR><TD ALIGN="LEFT" >- fetchFromScheduledTaskQueue()</TD></TR><TR><TD ALIGN="LEFT" >+ inEventLoop(thread: Thread): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ pendingTasks(): int</TD></TR><TR><TD ALIGN="LEFT" >+ shutdown()</TD></TR><TR><TD ALIGN="LEFT" >+ shutdownGracefully(quietPeriod: long, timeout: long, unit: TimeUnit): Future&lt;?&gt;</TD></TR><TR><TD ALIGN="LEFT" >- startThread()</TD></TR><TR><TD ALIGN="LEFT" ># takeTask(): Runnable</TD></TR><TR><TD ALIGN="LEFT" >+ terminationFuture(): Future&lt;?&gt;</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];ImmediateEventExecutor1377604431[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)ImmediateEventExecutor</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   terminationFuture: Future&lt;?&gt; [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ awaitTermination(timeout: long, unit: TimeUnit): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ execute(command: Runnable)</TD></TR><TR><TD ALIGN="LEFT" >+ inEventLoop(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ inEventLoop(thread: Thread): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ newProgressivePromise(): ProgressivePromise&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ newPromise(): Promise&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ shutdown()</TD></TR><TR><TD ALIGN="LEFT" >+ shutdownGracefully(quietPeriod: long, timeout: long, unit: TimeUnit): Future&lt;?&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ terminationFuture(): Future&lt;?&gt;</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];ImmediateProgressivePromise324063493[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)ImmediateProgressivePromise&lt;V&gt;</TD></TR><HR/><TR><TD ALIGN="LEFT" ># checkDeadLock()</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];ImmediatePromise324063493[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)ImmediatePromise&lt;V&gt;</TD></TR><HR/><TR><TD ALIGN="LEFT" ># checkDeadLock()</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];IntObjectHashMap1112693814[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)IntObjectHashMap&lt;V&gt;</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   entries: Iterable&lt;PrimitiveEntry&lt;V&gt;&gt; [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   entrySet: Set&lt;Entry&lt;Integer, V&gt;&gt; [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   keySet: Set&lt;Integer&gt; [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   keys: int[] [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   loadFactor: float [1]</TD></TR><TR><TD ALIGN="LEFT" >-   mask: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   maxSize: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   size: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   values: V[] [0..*]</TD></TR><HR/><TR><TD ALIGN="LEFT" >- calcMaxSize(capacity: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ clear()</TD></TR><TR><TD ALIGN="LEFT" >+ containsKey(key: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ containsKey(key: Object): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ containsValue(value: Object): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ entries(): Iterable&lt;PrimitiveEntry&lt;V&gt;&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ entrySet(): Set&lt;Entry&lt;Integer, V&gt;&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ get(key: int): V</TD></TR><TR><TD ALIGN="LEFT" >+ get(key: Object): V</TD></TR><TR><TD ALIGN="LEFT" >- growSize()</TD></TR><TR><TD ALIGN="LEFT" >- hashCode(key: int): int</TD></TR><TR><TD ALIGN="LEFT" >- hashIndex(key: int): int</TD></TR><TR><TD ALIGN="LEFT" >- indexOf(key: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ keySet(): Set&lt;Integer&gt;</TD></TR><TR><TD ALIGN="LEFT" ># keyToString(key: int): String</TD></TR><TR><TD ALIGN="LEFT" >- objectToKey(key: Object): int</TD></TR><TR><TD ALIGN="LEFT" >- probeNext(index: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ put(key: int, value: V): V</TD></TR><TR><TD ALIGN="LEFT" >+ put(key: Integer, value: V): V</TD></TR><TR><TD ALIGN="LEFT" >+ putAll(sourceMap: Map&lt;? extends Integer, ? extends V&gt;)</TD></TR><TR><TD ALIGN="LEFT" >- rehash(newCapacity: int)</TD></TR><TR><TD ALIGN="LEFT" >+ remove(key: int): V</TD></TR><TR><TD ALIGN="LEFT" >+ remove(key: Object): V</TD></TR><TR><TD ALIGN="LEFT" >- removeAt(index: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ size(): int</TD></TR><TR><TD ALIGN="LEFT" >- toExternal(value: T): T</TD></TR><TR><TD ALIGN="LEFT" >- toInternal(value: T): T</TD></TR><TR><TD ALIGN="LEFT" >+ values(): Collection&lt;V&gt;</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];IntegerHolder1713044053[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)IntegerHolder</TD></TR><HR/><TR><TD ALIGN="LEFT" >+   value: int [1]</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];InternalThreadLocalMap1713044053[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)InternalThreadLocalMap</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   arrayList: ArrayList&lt;Object&gt; [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   charsetDecoderCache: Map&lt;Charset, CharsetDecoder&gt; [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   charsetEncoderCache: Map&lt;Charset, CharsetEncoder&gt; [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   cleanerFlags: BitSet [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   counterHashCode: IntegerHolder [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   futureListenerStackDepth: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   handlerSharableCache: Map&lt;Class&lt;?&gt;, Boolean&gt; [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   indexedVariables: Object[] [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   localChannelReaderStackDepth: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   random: ThreadLocalRandom [0..1]</TD></TR><TR><TD ALIGN="LEFT" >+   rp1: long [1]</TD></TR><TR><TD ALIGN="LEFT" >+   rp2: long [1]</TD></TR><TR><TD ALIGN="LEFT" >+   rp3: long [1]</TD></TR><TR><TD ALIGN="LEFT" >+   rp4: long [1]</TD></TR><TR><TD ALIGN="LEFT" >+   rp5: long [1]</TD></TR><TR><TD ALIGN="LEFT" >+   rp6: long [1]</TD></TR><TR><TD ALIGN="LEFT" >+   rp7: long [1]</TD></TR><TR><TD ALIGN="LEFT" >+   rp8: long [1]</TD></TR><TR><TD ALIGN="LEFT" >-   stringBuilder: StringBuilder [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   typeParameterMatcherFindCache: Map&lt;Class&lt;?&gt;, Map&lt;String, TypeParameterMatcher&gt;&gt; [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   typeParameterMatcherGetCache: Map&lt;Class&lt;?&gt;, TypeParameterMatcher&gt; [0..*]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ arrayList(): ArrayList&lt;E&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ arrayList(minCapacity: int): ArrayList&lt;E&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ charsetDecoderCache(): Map&lt;Charset, CharsetDecoder&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ charsetEncoderCache(): Map&lt;Charset, CharsetEncoder&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ counterHashCode(): IntegerHolder</TD></TR><TR><TD ALIGN="LEFT" >+ destroy()</TD></TR><TR><TD ALIGN="LEFT" >- expandIndexedVariableTableAndSet(index: int, value: Object)</TD></TR><TR><TD ALIGN="LEFT" >- fastGet(thread: FastThreadLocalThread): InternalThreadLocalMap</TD></TR><TR><TD ALIGN="LEFT" >+ futureListenerStackDepth(): int</TD></TR><TR><TD ALIGN="LEFT" >+ handlerSharableCache(): Map&lt;Class&lt;?&gt;, Boolean&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ indexedVariable(index: int): Object</TD></TR><TR><TD ALIGN="LEFT" >+ isCleanerFlagSet(index: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ isIndexedVariableSet(index: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ lastVariableIndex(): int</TD></TR><TR><TD ALIGN="LEFT" >+ localChannelReaderStackDepth(): int</TD></TR><TR><TD ALIGN="LEFT" >- newIndexedVariableTable(): Object[]</TD></TR><TR><TD ALIGN="LEFT" >+ nextVariableIndex(): int</TD></TR><TR><TD ALIGN="LEFT" >+ random(): ThreadLocalRandom</TD></TR><TR><TD ALIGN="LEFT" >+ remove()</TD></TR><TR><TD ALIGN="LEFT" >+ removeIndexedVariable(index: int): Object</TD></TR><TR><TD ALIGN="LEFT" >+ setIndexedVariable(index: int, value: Object): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ size(): int</TD></TR><TR><TD ALIGN="LEFT" >- slowGet(): InternalThreadLocalMap</TD></TR><TR><TD ALIGN="LEFT" >+ stringBuilder(): StringBuilder</TD></TR><TR><TD ALIGN="LEFT" >+ typeParameterMatcherFindCache(): Map&lt;Class&lt;?&gt;, Map&lt;String, TypeParameterMatcher&gt;&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ typeParameterMatcherGetCache(): Map&lt;Class&lt;?&gt;, TypeParameterMatcher&gt;</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];JdkLogger2048307398[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)JdkLogger</TD></TR><HR/><TR><TD ALIGN="LEFT" >#   logger: Logger [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ debug(msg: String)</TD></TR><TR><TD ALIGN="LEFT" >+ debug(format: String, arg: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ debug(format: String, argA: Object, argB: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ debug(format: String, argArray: Object...)</TD></TR><TR><TD ALIGN="LEFT" >+ debug(msg: String, t: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >+ error(msg: String)</TD></TR><TR><TD ALIGN="LEFT" >+ error(format: String, arg: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ error(format: String, argA: Object, argB: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ error(format: String, arguments: Object...)</TD></TR><TR><TD ALIGN="LEFT" >+ error(msg: String, t: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >- fillCallerData(callerFQCN: String, record: LogRecord)</TD></TR><TR><TD ALIGN="LEFT" >+ info(msg: String)</TD></TR><TR><TD ALIGN="LEFT" >+ info(format: String, arg: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ info(format: String, argA: Object, argB: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ info(format: String, argArray: Object...)</TD></TR><TR><TD ALIGN="LEFT" >+ info(msg: String, t: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >- log(callerFQCN: String, level: Level, msg: String, t: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >+ trace(msg: String)</TD></TR><TR><TD ALIGN="LEFT" >+ trace(format: String, arg: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ trace(format: String, argA: Object, argB: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ trace(format: String, argArray: Object...)</TD></TR><TR><TD ALIGN="LEFT" >+ trace(msg: String, t: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >+ warn(msg: String)</TD></TR><TR><TD ALIGN="LEFT" >+ warn(format: String, arg: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ warn(format: String, argA: Object, argB: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ warn(format: String, argArray: Object...)</TD></TR><TR><TD ALIGN="LEFT" >+ warn(msg: String, t: Throwable)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];LocationAwareSlf4JLogger2048307398[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)LocationAwareSlf4JLogger</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   logger: LocationAwareLogger [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ debug(msg: String)</TD></TR><TR><TD ALIGN="LEFT" >+ debug(format: String, arg: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ debug(format: String, argA: Object, argB: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ debug(format: String, argArray: Object...)</TD></TR><TR><TD ALIGN="LEFT" >+ debug(msg: String, t: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >+ error(msg: String)</TD></TR><TR><TD ALIGN="LEFT" >+ error(format: String, arg: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ error(format: String, argA: Object, argB: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ error(format: String, argArray: Object...)</TD></TR><TR><TD ALIGN="LEFT" >+ error(msg: String, t: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >+ info(msg: String)</TD></TR><TR><TD ALIGN="LEFT" >+ info(format: String, arg: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ info(format: String, argA: Object, argB: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ info(format: String, argArray: Object...)</TD></TR><TR><TD ALIGN="LEFT" >+ info(msg: String, t: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >- log(level: int, message: String)</TD></TR><TR><TD ALIGN="LEFT" >- log(level: int, message: String, cause: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >- log(level: int, tuple: FormattingTuple)</TD></TR><TR><TD ALIGN="LEFT" >+ trace(msg: String)</TD></TR><TR><TD ALIGN="LEFT" >+ trace(format: String, arg: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ trace(format: String, argA: Object, argB: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ trace(format: String, argArray: Object...)</TD></TR><TR><TD ALIGN="LEFT" >+ trace(msg: String, t: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >+ warn(msg: String)</TD></TR><TR><TD ALIGN="LEFT" >+ warn(format: String, arg: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ warn(format: String, argArray: Object...)</TD></TR><TR><TD ALIGN="LEFT" >+ warn(format: String, argA: Object, argB: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ warn(msg: String, t: Throwable)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];Log4J2Logger2048307398[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)Log4J2Logger</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ debug(t: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >+ error(t: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >+ info(t: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >+ isEnabled(level: InternalLogLevel): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ log(level: InternalLogLevel, msg: String)</TD></TR><TR><TD ALIGN="LEFT" >+ log(level: InternalLogLevel, format: String, arg: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ log(level: InternalLogLevel, format: String, argA: Object, argB: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ log(level: InternalLogLevel, format: String, arguments: Object...)</TD></TR><TR><TD ALIGN="LEFT" >+ log(level: InternalLogLevel, msg: String, t: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >+ log(level: InternalLogLevel, t: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >+ name(): String</TD></TR><TR><TD ALIGN="LEFT" >- toLevel(level: InternalLogLevel): Level</TD></TR><TR><TD ALIGN="LEFT" >+ trace(t: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >+ warn(t: Throwable)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];Log4JLogger2048307398[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)Log4JLogger</TD></TR><HR/><TR><TD ALIGN="LEFT" >#   logger: Logger [0..1]</TD></TR><TR><TD ALIGN="LEFT" >#   traceCapable: boolean [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ debug(msg: String)</TD></TR><TR><TD ALIGN="LEFT" >+ debug(format: String, arg: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ debug(format: String, argA: Object, argB: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ debug(format: String, arguments: Object...)</TD></TR><TR><TD ALIGN="LEFT" >+ debug(msg: String, t: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >+ error(msg: String)</TD></TR><TR><TD ALIGN="LEFT" >+ error(format: String, arg: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ error(format: String, argA: Object, argB: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ error(format: String, argArray: Object...)</TD></TR><TR><TD ALIGN="LEFT" >+ error(msg: String, t: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >+ info(msg: String)</TD></TR><TR><TD ALIGN="LEFT" >+ info(format: String, arg: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ info(format: String, argA: Object, argB: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ info(format: String, argArray: Object...)</TD></TR><TR><TD ALIGN="LEFT" >+ info(msg: String, t: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >+ trace(msg: String)</TD></TR><TR><TD ALIGN="LEFT" >+ trace(format: String, arg: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ trace(format: String, argA: Object, argB: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ trace(format: String, arguments: Object...)</TD></TR><TR><TD ALIGN="LEFT" >+ trace(msg: String, t: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >+ warn(msg: String)</TD></TR><TR><TD ALIGN="LEFT" >+ warn(format: String, arg: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ warn(format: String, argA: Object, argB: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ warn(format: String, argArray: Object...)</TD></TR><TR><TD ALIGN="LEFT" >+ warn(msg: String, t: Throwable)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];Mpsc2059920467[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)Mpsc</TD></TR><HR/><TR><TD ALIGN="LEFT" ># newChunkedMpscQueue(chunkSize: int, capacity: int): Queue&lt;T&gt;</TD></TR><TR><TD ALIGN="LEFT" ># newMpscQueue(maxCapacity: int): Queue&lt;T&gt;</TD></TR><TR><TD ALIGN="LEFT" ># newMpscQueue(): Queue&lt;T&gt;</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];MultithreadEventExecutorGroup1377604431[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)MultithreadEventExecutorGroup</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   children: EventExecutor[] [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   chooser: EventExecutorChooser [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   readonlyChildren: Set&lt;EventExecutor&gt; [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   terminatedChildren: AtomicInteger [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   terminationFuture: Promise&lt;?&gt; [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ awaitTermination(timeout: long, unit: TimeUnit): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ executorCount(): int</TD></TR><TR><TD ALIGN="LEFT" >+ iterator(): Iterator&lt;EventExecutor&gt;</TD></TR><TR><TD ALIGN="LEFT" ># newChild(executor: Executor, args: Object...): EventExecutor</TD></TR><TR><TD ALIGN="LEFT" ># newDefaultThreadFactory(): ThreadFactory</TD></TR><TR><TD ALIGN="LEFT" >+ next(): EventExecutor</TD></TR><TR><TD ALIGN="LEFT" >+ shutdown()</TD></TR><TR><TD ALIGN="LEFT" >+ shutdownGracefully(quietPeriod: long, timeout: long, unit: TimeUnit): Future&lt;?&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ terminationFuture(): Future&lt;?&gt;</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];NativeLibraryLoader1713044053[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)NativeLibraryLoader</TD></TR><HR/><TR><TD ALIGN="LEFT" >- calculateMangledPackagePrefix(): String</TD></TR><TR><TD ALIGN="LEFT" >- classToByteArray(clazz: Class&lt;?&gt;): byte[]</TD></TR><TR><TD ALIGN="LEFT" >- closeQuietly(c: Closeable)</TD></TR><TR><TD ALIGN="LEFT" >- digest(digest: MessageDigest, url: URL): byte[]</TD></TR><TR><TD ALIGN="LEFT" >- generateUniqueId(length: int): byte[]</TD></TR><TR><TD ALIGN="LEFT" >- getResource(path: String, loader: ClassLoader): URL</TD></TR><TR><TD ALIGN="LEFT" >+ load(originalName: String, loader: ClassLoader)</TD></TR><TR><TD ALIGN="LEFT" >+ loadFirstAvailable(loader: ClassLoader, names: String...)</TD></TR><TR><TD ALIGN="LEFT" >- loadLibrary(loader: ClassLoader, name: String, absolute: boolean)</TD></TR><TR><TD ALIGN="LEFT" >- loadLibraryByHelper(helper: Class&lt;?&gt;, name: String, absolute: boolean)</TD></TR><TR><TD ALIGN="LEFT" >- rethrowWithMoreDetailsIfPossible(name: String, error: NoSuchMethodError)</TD></TR><TR><TD ALIGN="LEFT" >- shouldShadedLibraryIdBePatched(packagePrefix: String): boolean</TD></TR><TR><TD ALIGN="LEFT" >- tryExec(cmd: String): boolean</TD></TR><TR><TD ALIGN="LEFT" ># tryPatchShadedLibraryIdAndSign(libraryFile: File, originalName: String)</TD></TR><TR><TD ALIGN="LEFT" >- tryToLoadClass(loader: ClassLoader, helper: Class&lt;?&gt;): Class&lt;?&gt;</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];NonStickyEventExecutorGroup1377604431[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)NonStickyEventExecutorGroup</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   group: EventExecutorGroup [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   maxTaskExecutePerRun: int [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ awaitTermination(timeout: long, unit: TimeUnit): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ execute(command: Runnable)</TD></TR><TR><TD ALIGN="LEFT" >+ invokeAll(tasks: Collection&lt;? extends Callable&lt;T&gt;&gt;): List&lt;Future&lt;T&gt;&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ invokeAll(tasks: Collection&lt;? extends Callable&lt;T&gt;&gt;, timeout: long, unit: TimeUnit): List&lt;Future&lt;T&gt;&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ invokeAny(tasks: Collection&lt;? extends Callable&lt;T&gt;&gt;): T</TD></TR><TR><TD ALIGN="LEFT" >+ invokeAny(tasks: Collection&lt;? extends Callable&lt;T&gt;&gt;, timeout: long, unit: TimeUnit): T</TD></TR><TR><TD ALIGN="LEFT" >+ iterator(): Iterator&lt;EventExecutor&gt;</TD></TR><TR><TD ALIGN="LEFT" >- newExecutor(executor: EventExecutor): NonStickyOrderedEventExecutor</TD></TR><TR><TD ALIGN="LEFT" >+ next(): EventExecutor</TD></TR><TR><TD ALIGN="LEFT" >+ schedule(command: Runnable, delay: long, unit: TimeUnit): ScheduledFuture&lt;?&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ schedule(callable: Callable&lt;V&gt;, delay: long, unit: TimeUnit): ScheduledFuture&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ scheduleAtFixedRate(command: Runnable, initialDelay: long, period: long, unit: TimeUnit): ScheduledFuture&lt;?&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ scheduleWithFixedDelay(command: Runnable, initialDelay: long, delay: long, unit: TimeUnit): ScheduledFuture&lt;?&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ shutdown()</TD></TR><TR><TD ALIGN="LEFT" >+ shutdownGracefully(): Future&lt;?&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ shutdownGracefully(quietPeriod: long, timeout: long, unit: TimeUnit): Future&lt;?&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ shutdownNow(): List&lt;Runnable&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ submit(task: Runnable): Future&lt;?&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ submit(task: Runnable, result: T): Future&lt;T&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ submit(task: Callable&lt;T&gt;): Future&lt;T&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ terminationFuture(): Future&lt;?&gt;</TD></TR><TR><TD ALIGN="LEFT" >- verify(group: EventExecutorGroup): EventExecutorGroup</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];NonStickyOrderedEventExecutor1867698281[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)NonStickyOrderedEventExecutor</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   executingThread: AtomicReference&lt;Thread&gt; [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   executor: EventExecutor [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   maxTaskExecutePerRun: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   state: AtomicInteger [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   tasks: Queue&lt;Runnable&gt; [0..*]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ awaitTermination(timeout: long, unit: TimeUnit): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ execute(command: Runnable)</TD></TR><TR><TD ALIGN="LEFT" >+ inEventLoop(thread: Thread): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ run()</TD></TR><TR><TD ALIGN="LEFT" >+ shutdown()</TD></TR><TR><TD ALIGN="LEFT" >+ shutdownGracefully(quietPeriod: long, timeout: long, unit: TimeUnit): Future&lt;?&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ terminationFuture(): Future&lt;?&gt;</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];ObjectUtil1713044053[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)ObjectUtil</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ checkInRange(i: int, start: int, end: int, name: String): int</TD></TR><TR><TD ALIGN="LEFT" >+ checkInRange(l: long, start: long, end: long, name: String): long</TD></TR><TR><TD ALIGN="LEFT" >+ checkNonEmpty(array: T[], name: String): T[]</TD></TR><TR><TD ALIGN="LEFT" >+ checkNonEmpty(array: byte[], name: String): byte[]</TD></TR><TR><TD ALIGN="LEFT" >+ checkNonEmpty(array: char[], name: String): char[]</TD></TR><TR><TD ALIGN="LEFT" >+ checkNonEmpty(value: T, name: String): T</TD></TR><TR><TD ALIGN="LEFT" >+ checkNonEmpty(value: String, name: String): String</TD></TR><TR><TD ALIGN="LEFT" >+ checkNonEmpty(value: CharSequence, name: String): CharSequence</TD></TR><TR><TD ALIGN="LEFT" >+ checkNonEmptyAfterTrim(value: String, name: String): String</TD></TR><TR><TD ALIGN="LEFT" >+ checkNotNull(arg: T, text: String): T</TD></TR><TR><TD ALIGN="LEFT" >+ checkNotNullArrayParam(value: T, index: int, name: String): T</TD></TR><TR><TD ALIGN="LEFT" >+ checkNotNullWithIAE(arg: T, paramName: String): T</TD></TR><TR><TD ALIGN="LEFT" >+ checkPositive(i: int, name: String): int</TD></TR><TR><TD ALIGN="LEFT" >+ checkPositive(l: long, name: String): long</TD></TR><TR><TD ALIGN="LEFT" >+ checkPositive(d: double, name: String): double</TD></TR><TR><TD ALIGN="LEFT" >+ checkPositive(f: float, name: String): float</TD></TR><TR><TD ALIGN="LEFT" >+ checkPositiveOrZero(i: int, name: String): int</TD></TR><TR><TD ALIGN="LEFT" >+ checkPositiveOrZero(l: long, name: String): long</TD></TR><TR><TD ALIGN="LEFT" >+ checkPositiveOrZero(d: double, name: String): double</TD></TR><TR><TD ALIGN="LEFT" >+ checkPositiveOrZero(f: float, name: String): float</TD></TR><TR><TD ALIGN="LEFT" >+ deepCheckNotNull(text: String, varargs: T...): T[]</TD></TR><TR><TD ALIGN="LEFT" >+ intValue(wrapper: Integer, defaultValue: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ longValue(wrapper: Long, defaultValue: long): long</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];PlatformDependent01713044053[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)PlatformDependent0</TD></TR><HR/><TR><TD ALIGN="LEFT" ># addressSize(): int</TD></TR><TR><TD ALIGN="LEFT" ># alignSlice(buffer: ByteBuffer, alignment: int): ByteBuffer</TD></TR><TR><TD ALIGN="LEFT" ># allocateDirectNoCleaner(capacity: int): ByteBuffer</TD></TR><TR><TD ALIGN="LEFT" ># allocateMemory(size: long): long</TD></TR><TR><TD ALIGN="LEFT" ># allocateUninitializedArray(size: int): byte[]</TD></TR><TR><TD ALIGN="LEFT" ># byteArrayBaseOffset(): long</TD></TR><TR><TD ALIGN="LEFT" ># copyMemory(srcAddr: long, dstAddr: long, length: long)</TD></TR><TR><TD ALIGN="LEFT" ># copyMemory(src: Object, srcOffset: long, dst: Object, dstOffset: long, length: long)</TD></TR><TR><TD ALIGN="LEFT" >- copyMemoryWithSafePointPolling(srcAddr: long, dstAddr: long, length: long)</TD></TR><TR><TD ALIGN="LEFT" >- copyMemoryWithSafePointPolling(src: Object, srcOffset: long, dst: Object, dstOffset: long, length: long)</TD></TR><TR><TD ALIGN="LEFT" ># directBufferAddress(buffer: ByteBuffer): long</TD></TR><TR><TD ALIGN="LEFT" ># equalsConstantTime(bytes1: byte[], startPos1: int, bytes2: byte[], startPos2: int, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >- explicitNoUnsafeCause0(): Throwable</TD></TR><TR><TD ALIGN="LEFT" >- explicitTryReflectionSetAccessible0(): boolean</TD></TR><TR><TD ALIGN="LEFT" ># freeMemory(address: long)</TD></TR><TR><TD ALIGN="LEFT" ># getByte(address: long): byte</TD></TR><TR><TD ALIGN="LEFT" ># getByte(data: byte[], index: int): byte</TD></TR><TR><TD ALIGN="LEFT" ># getByte(data: byte[], index: long): byte</TD></TR><TR><TD ALIGN="LEFT" ># getClassLoader(clazz: Class&lt;?&gt;): ClassLoader</TD></TR><TR><TD ALIGN="LEFT" ># getInt(object: Object, fieldOffset: long): int</TD></TR><TR><TD ALIGN="LEFT" ># getInt(address: long): int</TD></TR><TR><TD ALIGN="LEFT" ># getInt(data: byte[], index: int): int</TD></TR><TR><TD ALIGN="LEFT" ># getInt(data: int[], index: long): int</TD></TR><TR><TD ALIGN="LEFT" ># getIntVolatile(address: long): int</TD></TR><TR><TD ALIGN="LEFT" >- getLong(object: Object, fieldOffset: long): long</TD></TR><TR><TD ALIGN="LEFT" ># getLong(address: long): long</TD></TR><TR><TD ALIGN="LEFT" ># getLong(data: byte[], index: int): long</TD></TR><TR><TD ALIGN="LEFT" ># getLong(data: long[], index: long): long</TD></TR><TR><TD ALIGN="LEFT" ># getObject(object: Object, fieldOffset: long): Object</TD></TR><TR><TD ALIGN="LEFT" ># getShort(address: long): short</TD></TR><TR><TD ALIGN="LEFT" ># getShort(data: byte[], index: int): short</TD></TR><TR><TD ALIGN="LEFT" ># hashCodeAscii(bytes: byte[], startPos: int, length: int): int</TD></TR><TR><TD ALIGN="LEFT" ># hashCodeAsciiCompute(value: long, hash: int): int</TD></TR><TR><TD ALIGN="LEFT" ># hashCodeAsciiSanitize(value: int): int</TD></TR><TR><TD ALIGN="LEFT" ># hashCodeAsciiSanitize(value: short): int</TD></TR><TR><TD ALIGN="LEFT" ># hashCodeAsciiSanitize(value: byte): int</TD></TR><TR><TD ALIGN="LEFT" ># isZero(bytes: byte[], startPos: int, length: int): boolean</TD></TR><TR><TD ALIGN="LEFT" ># javaVersion(): int</TD></TR><TR><TD ALIGN="LEFT" >- javaVersion0(): int</TD></TR><TR><TD ALIGN="LEFT" ># majorVersion(javaSpecVersion: String): int</TD></TR><TR><TD ALIGN="LEFT" ># majorVersionFromJavaSpecificationVersion(): int</TD></TR><TR><TD ALIGN="LEFT" ># newDirectBuffer(address: long, capacity: int): ByteBuffer</TD></TR><TR><TD ALIGN="LEFT" ># objectFieldOffset(field: Field): long</TD></TR><TR><TD ALIGN="LEFT" ># putByte(address: long, value: byte)</TD></TR><TR><TD ALIGN="LEFT" ># putByte(data: byte[], index: int, value: byte)</TD></TR><TR><TD ALIGN="LEFT" ># putByte(data: Object, offset: long, value: byte)</TD></TR><TR><TD ALIGN="LEFT" ># putInt(address: long, value: int)</TD></TR><TR><TD ALIGN="LEFT" ># putInt(data: byte[], index: int, value: int)</TD></TR><TR><TD ALIGN="LEFT" ># putIntOrdered(adddress: long, newValue: int)</TD></TR><TR><TD ALIGN="LEFT" ># putLong(address: long, value: long)</TD></TR><TR><TD ALIGN="LEFT" ># putLong(data: byte[], index: int, value: long)</TD></TR><TR><TD ALIGN="LEFT" ># putObject(o: Object, offset: long, x: Object)</TD></TR><TR><TD ALIGN="LEFT" ># putShort(address: long, value: short)</TD></TR><TR><TD ALIGN="LEFT" ># putShort(data: byte[], index: int, value: short)</TD></TR><TR><TD ALIGN="LEFT" ># reallocateDirectNoCleaner(buffer: ByteBuffer, capacity: int): ByteBuffer</TD></TR><TR><TD ALIGN="LEFT" ># reallocateMemory(address: long, newSize: long): long</TD></TR><TR><TD ALIGN="LEFT" ># safeConstructPutInt(object: Object, fieldOffset: long, value: int)</TD></TR><TR><TD ALIGN="LEFT" ># throwException(cause: Throwable)</TD></TR><TR><TD ALIGN="LEFT" ># unalignedAccess(): boolean</TD></TR><TR><TD ALIGN="LEFT" >- unsafeStaticFieldOffsetSupported(): boolean</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];PlatformDependent1713044053[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)PlatformDependent</TD></TR><HR/><TR><TD ALIGN="LEFT" >- addClassifier(allowed: Set&lt;String&gt;, dest: Set&lt;String&gt;, maybeClassifiers: String...)</TD></TR><TR><TD ALIGN="LEFT" ># addFilesystemOsClassifiers(allowedClassifiers: Set&lt;String&gt;, availableClassifiers: Set&lt;String&gt;)</TD></TR><TR><TD ALIGN="LEFT" ># addPropertyOsClassifiers(allowedClassifiers: Set&lt;String&gt;, availableClassifiers: Set&lt;String&gt;): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ addressSize(): int</TD></TR><TR><TD ALIGN="LEFT" >- addressSize0(): int</TD></TR><TR><TD ALIGN="LEFT" >+ align(value: long, alignment: int): long</TD></TR><TR><TD ALIGN="LEFT" >+ alignDirectBuffer(buffer: ByteBuffer, alignment: int): ByteBuffer</TD></TR><TR><TD ALIGN="LEFT" >+ allocateDirectNoCleaner(capacity: int): ByteBuffer</TD></TR><TR><TD ALIGN="LEFT" >+ allocateMemory(size: long): long</TD></TR><TR><TD ALIGN="LEFT" >+ allocateUninitializedArray(size: int): byte[]</TD></TR><TR><TD ALIGN="LEFT" >+ bitMode(): int</TD></TR><TR><TD ALIGN="LEFT" >- bitMode0(): int</TD></TR><TR><TD ALIGN="LEFT" >+ byteArrayBaseOffset(): long</TD></TR><TR><TD ALIGN="LEFT" >- byteArrayBaseOffset0(): long</TD></TR><TR><TD ALIGN="LEFT" >+ canEnableTcpNoDelayByDefault(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ copyMemory(srcAddr: long, dstAddr: long, length: long)</TD></TR><TR><TD ALIGN="LEFT" >+ copyMemory(src: byte[], srcIndex: int, dstAddr: long, length: long)</TD></TR><TR><TD ALIGN="LEFT" >+ copyMemory(src: byte[], srcIndex: int, dst: byte[], dstIndex: int, length: long)</TD></TR><TR><TD ALIGN="LEFT" >+ copyMemory(srcAddr: long, dst: byte[], dstIndex: int, length: long)</TD></TR><TR><TD ALIGN="LEFT" >+ createTempFile(prefix: String, suffix: String, directory: File): File</TD></TR><TR><TD ALIGN="LEFT" >- decrementMemoryCounter(capacity: int)</TD></TR><TR><TD ALIGN="LEFT" >+ directBuffer(memoryAddress: long, size: int): ByteBuffer</TD></TR><TR><TD ALIGN="LEFT" >+ directBufferAddress(buffer: ByteBuffer): long</TD></TR><TR><TD ALIGN="LEFT" >+ directBufferPreferred(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ equalsConstantTime(bytes1: byte[], startPos1: int, bytes2: byte[], startPos2: int, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >- equalsSafe(bytes1: byte[], startPos1: int, bytes2: byte[], startPos2: int, length: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ estimateMaxDirectMemory(): long</TD></TR><TR><TD ALIGN="LEFT" >+ freeDirectBuffer(buffer: ByteBuffer)</TD></TR><TR><TD ALIGN="LEFT" >+ freeDirectNoCleaner(buffer: ByteBuffer)</TD></TR><TR><TD ALIGN="LEFT" >+ freeMemory(address: long)</TD></TR><TR><TD ALIGN="LEFT" >+ getByte(address: long): byte</TD></TR><TR><TD ALIGN="LEFT" >+ getByte(data: byte[], index: int): byte</TD></TR><TR><TD ALIGN="LEFT" >+ getByte(data: byte[], index: long): byte</TD></TR><TR><TD ALIGN="LEFT" >+ getClassLoader(clazz: Class&lt;?&gt;): ClassLoader</TD></TR><TR><TD ALIGN="LEFT" >+ getInt(object: Object, fieldOffset: long): int</TD></TR><TR><TD ALIGN="LEFT" >+ getInt(address: long): int</TD></TR><TR><TD ALIGN="LEFT" >+ getInt(data: byte[], index: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getInt(data: int[], index: long): int</TD></TR><TR><TD ALIGN="LEFT" >- getIntSafe(bytes: byte[], offset: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getIntVolatile(address: long): int</TD></TR><TR><TD ALIGN="LEFT" >+ getLong(address: long): long</TD></TR><TR><TD ALIGN="LEFT" >+ getLong(data: byte[], index: int): long</TD></TR><TR><TD ALIGN="LEFT" >+ getLong(data: long[], index: long): long</TD></TR><TR><TD ALIGN="LEFT" >- getLongSafe(bytes: byte[], offset: int): long</TD></TR><TR><TD ALIGN="LEFT" >+ getObject(object: Object, fieldOffset: long): Object</TD></TR><TR><TD ALIGN="LEFT" >+ getShort(address: long): short</TD></TR><TR><TD ALIGN="LEFT" >+ getShort(data: byte[], index: int): short</TD></TR><TR><TD ALIGN="LEFT" >- getShortSafe(bytes: byte[], offset: int): short</TD></TR><TR><TD ALIGN="LEFT" >+ hashCodeAscii(bytes: byte[], startPos: int, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ hashCodeAscii(bytes: CharSequence): int</TD></TR><TR><TD ALIGN="LEFT" >- hashCodeAsciiCompute(value: CharSequence, offset: int, hash: int): int</TD></TR><TR><TD ALIGN="LEFT" ># hashCodeAsciiSafe(bytes: byte[], startPos: int, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >- hashCodeAsciiSanitizeByte(value: char): int</TD></TR><TR><TD ALIGN="LEFT" >- hashCodeAsciiSanitizeInt(value: CharSequence, offset: int): int</TD></TR><TR><TD ALIGN="LEFT" >- hashCodeAsciiSanitizeShort(value: CharSequence, offset: int): int</TD></TR><TR><TD ALIGN="LEFT" >- incrementMemoryCounter(capacity: int)</TD></TR><TR><TD ALIGN="LEFT" >+ isZero(bytes: byte[], startPos: int, length: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >- isZeroSafe(bytes: byte[], startPos: int, length: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ javaVersion(): int</TD></TR><TR><TD ALIGN="LEFT" >+ maxDirectMemory(): long</TD></TR><TR><TD ALIGN="LEFT" >+ maybeSuperUser(): boolean</TD></TR><TR><TD ALIGN="LEFT" >- maybeSuperUser0(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ newConcurrentDeque(): Deque&lt;C&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ newConcurrentHashMap(): ConcurrentMap&lt;K, V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ newConcurrentHashMap(initialCapacity: int): ConcurrentMap&lt;K, V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ newConcurrentHashMap(initialCapacity: int, loadFactor: float): ConcurrentMap&lt;K, V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ newConcurrentHashMap(initialCapacity: int, loadFactor: float, concurrencyLevel: int): ConcurrentMap&lt;K, V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ newConcurrentHashMap(map: Map&lt;? extends K, ? extends V&gt;): ConcurrentMap&lt;K, V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ newFixedMpscQueue(capacity: int): Queue&lt;T&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ newLongCounter(): LongCounter</TD></TR><TR><TD ALIGN="LEFT" >+ newMpscQueue(): Queue&lt;T&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ newMpscQueue(maxCapacity: int): Queue&lt;T&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ newMpscQueue(chunkSize: int, maxCapacity: int): Queue&lt;T&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ newSpscQueue(): Queue&lt;T&gt;</TD></TR><TR><TD ALIGN="LEFT" >- normalize(value: String): String</TD></TR><TR><TD ALIGN="LEFT" >- normalizeArch(value: String): String</TD></TR><TR><TD ALIGN="LEFT" >- normalizeOs(value: String): String</TD></TR><TR><TD ALIGN="LEFT" >- normalizeOsReleaseVariableValue(value: String): String</TD></TR><TR><TD ALIGN="LEFT" >+ normalizedArch(): String</TD></TR><TR><TD ALIGN="LEFT" >+ normalizedLinuxClassifiers(): Set&lt;String&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ normalizedOs(): String</TD></TR><TR><TD ALIGN="LEFT" >+ objectFieldOffset(field: Field): long</TD></TR><TR><TD ALIGN="LEFT" >+ putByte(address: long, value: byte)</TD></TR><TR><TD ALIGN="LEFT" >+ putByte(data: byte[], index: int, value: byte)</TD></TR><TR><TD ALIGN="LEFT" >+ putByte(data: Object, offset: long, value: byte)</TD></TR><TR><TD ALIGN="LEFT" >+ putInt(address: long, value: int)</TD></TR><TR><TD ALIGN="LEFT" >+ putInt(data: byte[], index: int, value: int)</TD></TR><TR><TD ALIGN="LEFT" >+ putIntOrdered(adddress: long, newValue: int)</TD></TR><TR><TD ALIGN="LEFT" >+ putLong(address: long, value: long)</TD></TR><TR><TD ALIGN="LEFT" >+ putLong(data: byte[], index: int, value: long)</TD></TR><TR><TD ALIGN="LEFT" >+ putObject(o: Object, offset: long, x: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ putShort(address: long, value: short)</TD></TR><TR><TD ALIGN="LEFT" >+ putShort(data: byte[], index: int, value: short)</TD></TR><TR><TD ALIGN="LEFT" >+ reallocateDirectNoCleaner(buffer: ByteBuffer, capacity: int): ByteBuffer</TD></TR><TR><TD ALIGN="LEFT" >+ reallocateMemory(address: long, newSize: long): long</TD></TR><TR><TD ALIGN="LEFT" ># safeConstructPutInt(object: Object, fieldOffset: long, value: int)</TD></TR><TR><TD ALIGN="LEFT" >+ threadLocalRandom(): Random</TD></TR><TR><TD ALIGN="LEFT" >+ throwException(t: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >- throwException0(t: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >+ tmpdir(): File</TD></TR><TR><TD ALIGN="LEFT" >- tmpdir0(): File</TD></TR><TR><TD ALIGN="LEFT" >- toDirectory(path: String): File</TD></TR><TR><TD ALIGN="LEFT" >- unsafeUnavailabilityCause0(): Throwable</TD></TR><TR><TD ALIGN="LEFT" >+ useDirectBufferNoCleaner(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ usedDirectMemory(): long</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];PowerOfTwoEventExecutorChooser1538551386[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)PowerOfTwoEventExecutorChooser</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   executors: EventExecutor[] [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   idx: AtomicInteger [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ next(): EventExecutor</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];PrimitiveIterator1622999976[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)PrimitiveIterator</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   entryIndex: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   nextIndex: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   prevIndex: int [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ key(): int</TD></TR><TR><TD ALIGN="LEFT" >+ next(): PrimitiveEntry&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ remove()</TD></TR><TR><TD ALIGN="LEFT" >- scanNext()</TD></TR><TR><TD ALIGN="LEFT" >+ value(): V</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];PromiseAggregator1377604431[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)PromiseAggregator&lt;V, F extends Future&lt;V&gt;&gt;</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   aggregatePromise: Promise&lt;?&gt; [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   failPending: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   pendingPromises: Set&lt;Promise&lt;V&gt;&gt; [0..*]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ add(promises: Promise&lt;V&gt;...): PromiseAggregator&lt;V, F&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ operationComplete(future: F)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];PromiseCombiner1377604431[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)PromiseCombiner</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   aggregatePromise: Promise&lt;Void&gt; [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   cause: Throwable [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   doneCount: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   executor: EventExecutor [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   expectedCount: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   listener: GenericFutureListener&lt;Future&lt;?&gt;&gt; [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ add(promise: Promise)</TD></TR><TR><TD ALIGN="LEFT" >+ add(future: Future)</TD></TR><TR><TD ALIGN="LEFT" >+ addAll(promises: Promise...)</TD></TR><TR><TD ALIGN="LEFT" >+ addAll(futures: Future...)</TD></TR><TR><TD ALIGN="LEFT" >- checkAddAllowed()</TD></TR><TR><TD ALIGN="LEFT" >- checkInEventLoop()</TD></TR><TR><TD ALIGN="LEFT" >+ finish(aggregatePromise: Promise&lt;Void&gt;)</TD></TR><TR><TD ALIGN="LEFT" >- tryPromise(): boolean</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];PromiseNotifier1377604431[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)PromiseNotifier&lt;V, F extends Future&lt;V&gt;&gt;</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   logNotifyFailure: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   promises: Promise&lt;? super V&gt;[] [0..*]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ cascade(future: F, promise: Promise&lt;? super V&gt;): F</TD></TR><TR><TD ALIGN="LEFT" >+ cascade(logNotifyFailure: boolean, future: F, promise: Promise&lt;? super V&gt;): F</TD></TR><TR><TD ALIGN="LEFT" >+ operationComplete(future: F)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];PromiseTask1377604431[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)PromiseTask&lt;V&gt;</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   task: Object [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ cancel(mayInterruptIfRunning: boolean): boolean</TD></TR><TR><TD ALIGN="LEFT" >- clearTaskAfterCompletion(done: boolean, result: Runnable): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ run()</TD></TR><TR><TD ALIGN="LEFT" ># runTask(): V</TD></TR><TR><TD ALIGN="LEFT" >+ setFailure(cause: Throwable): Promise&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" ># setFailureInternal(cause: Throwable): Promise&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ setSuccess(result: V): Promise&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" ># setSuccessInternal(result: V): Promise&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ setUncancellable(): boolean</TD></TR><TR><TD ALIGN="LEFT" ># setUncancellableInternal(): boolean</TD></TR><TR><TD ALIGN="LEFT" ># toStringBuilder(): StringBuilder</TD></TR><TR><TD ALIGN="LEFT" >+ tryFailure(cause: Throwable): boolean</TD></TR><TR><TD ALIGN="LEFT" ># tryFailureInternal(cause: Throwable): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ trySuccess(result: V): boolean</TD></TR><TR><TD ALIGN="LEFT" ># trySuccessInternal(result: V): boolean</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];ReferenceCountUtil1023385430[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)ReferenceCountUtil</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ refCnt(msg: Object): int</TD></TR><TR><TD ALIGN="LEFT" >+ release(msg: Object): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ release(msg: Object, decrement: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ releaseLater(msg: T): T</TD></TR><TR><TD ALIGN="LEFT" >+ releaseLater(msg: T, decrement: int): T</TD></TR><TR><TD ALIGN="LEFT" >+ retain(msg: T): T</TD></TR><TR><TD ALIGN="LEFT" >+ retain(msg: T, increment: int): T</TD></TR><TR><TD ALIGN="LEFT" >+ safeRelease(msg: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ safeRelease(msg: Object, decrement: int)</TD></TR><TR><TD ALIGN="LEFT" >+ touch(msg: T): T</TD></TR><TR><TD ALIGN="LEFT" >+ touch(msg: T, hint: Object): T</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];RunnableScheduledFutureTask1156059762[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)RunnableScheduledFutureTask&lt;V&gt;</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   future: RunnableScheduledFuture&lt;V&gt; [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   wasCallable: boolean [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ compareTo(o: Delayed): int</TD></TR><TR><TD ALIGN="LEFT" >+ getDelay(unit: TimeUnit): long</TD></TR><TR><TD ALIGN="LEFT" >+ run()</TD></TR><TR><TD ALIGN="LEFT" ># runTask(): V</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];ScheduledFutureTask1377604431[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)ScheduledFutureTask&lt;V&gt;</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   deadlineNanos: long [1]</TD></TR><TR><TD ALIGN="LEFT" >-   id: long [1]</TD></TR><TR><TD ALIGN="LEFT" >-   periodNanos: long [1]</TD></TR><TR><TD ALIGN="LEFT" >-   queueIndex: int [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ cancel(mayInterruptIfRunning: boolean): boolean</TD></TR><TR><TD ALIGN="LEFT" ># cancelWithoutRemove(mayInterruptIfRunning: boolean): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ compareTo(o: Delayed): int</TD></TR><TR><TD ALIGN="LEFT" >+ deadlineNanos(): long</TD></TR><TR><TD ALIGN="LEFT" ># deadlineToDelayNanos(currentTimeNanos: long, deadlineNanos: long): long</TD></TR><TR><TD ALIGN="LEFT" >+ delayNanos(): long</TD></TR><TR><TD ALIGN="LEFT" >+ delayNanos(currentTimeNanos: long): long</TD></TR><TR><TD ALIGN="LEFT" ># executor(): EventExecutor</TD></TR><TR><TD ALIGN="LEFT" >+ getDelay(unit: TimeUnit): long</TD></TR><TR><TD ALIGN="LEFT" >+ priorityQueueIndex(queue: DefaultPriorityQueue&lt;?&gt;): int</TD></TR><TR><TD ALIGN="LEFT" >+ priorityQueueIndex(queue: DefaultPriorityQueue&lt;?&gt;, i: int)</TD></TR><TR><TD ALIGN="LEFT" >+ run()</TD></TR><TR><TD ALIGN="LEFT" >- scheduledExecutor(): AbstractScheduledEventExecutor</TD></TR><TR><TD ALIGN="LEFT" ># setId(id: long): ScheduledFutureTask&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" ># toStringBuilder(): StringBuilder</TD></TR><TR><TD ALIGN="LEFT" >- validatePeriod(period: long): long</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];SingleThreadEventExecutor1377604431[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)SingleThreadEventExecutor</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   addTaskWakesUp: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   executor: Executor [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   gracefulShutdownQuietPeriod: long [1]</TD></TR><TR><TD ALIGN="LEFT" >-   gracefulShutdownStartTime: long [1]</TD></TR><TR><TD ALIGN="LEFT" >-   gracefulShutdownTimeout: long [1]</TD></TR><TR><TD ALIGN="LEFT" >-   interrupted: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   lastExecutionTime: long [1]</TD></TR><TR><TD ALIGN="LEFT" >-   maxPendingTasks: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   rejectedExecutionHandler: RejectedExecutionHandler [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   shutdownHooks: Set&lt;Runnable&gt; [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   state: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   taskQueue: Queue&lt;Runnable&gt; [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   terminationFuture: Promise&lt;?&gt; [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   thread: Thread [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   threadLock: CountDownLatch [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   threadProperties: ThreadProperties [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ addShutdownHook(task: Runnable)</TD></TR><TR><TD ALIGN="LEFT" ># addTask(task: Runnable)</TD></TR><TR><TD ALIGN="LEFT" ># afterRunningAllTasks()</TD></TR><TR><TD ALIGN="LEFT" >+ awaitTermination(timeout: long, unit: TimeUnit): boolean</TD></TR><TR><TD ALIGN="LEFT" ># cleanup()</TD></TR><TR><TD ALIGN="LEFT" ># confirmShutdown(): boolean</TD></TR><TR><TD ALIGN="LEFT" ># deadlineNanos(): long</TD></TR><TR><TD ALIGN="LEFT" ># delayNanos(currentTimeNanos: long): long</TD></TR><TR><TD ALIGN="LEFT" >- doStartThread()</TD></TR><TR><TD ALIGN="LEFT" ># drainTasks(): int</TD></TR><TR><TD ALIGN="LEFT" >- ensureThreadStarted(oldState: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ execute(task: Runnable)</TD></TR><TR><TD ALIGN="LEFT" >- execute(task: Runnable, immediate: boolean)</TD></TR><TR><TD ALIGN="LEFT" >- execute0(task: Runnable)</TD></TR><TR><TD ALIGN="LEFT" >- executeExpiredScheduledTasks(): boolean</TD></TR><TR><TD ALIGN="LEFT" >- fetchFromScheduledTaskQueue(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ inEventLoop(thread: Thread): boolean</TD></TR><TR><TD ALIGN="LEFT" ># interruptThread()</TD></TR><TR><TD ALIGN="LEFT" >+ invokeAll(tasks: Collection&lt;? extends Callable&lt;T&gt;&gt;): List&lt;Future&lt;T&gt;&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ invokeAll(tasks: Collection&lt;? extends Callable&lt;T&gt;&gt;, timeout: long, unit: TimeUnit): List&lt;Future&lt;T&gt;&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ invokeAny(tasks: Collection&lt;? extends Callable&lt;T&gt;&gt;): T</TD></TR><TR><TD ALIGN="LEFT" >+ invokeAny(tasks: Collection&lt;? extends Callable&lt;T&gt;&gt;, timeout: long, unit: TimeUnit): T</TD></TR><TR><TD ALIGN="LEFT" >+ lazyExecute(task: Runnable)</TD></TR><TR><TD ALIGN="LEFT" >- lazyExecute0(task: Runnable)</TD></TR><TR><TD ALIGN="LEFT" ># newTaskQueue(): Queue&lt;Runnable&gt;</TD></TR><TR><TD ALIGN="LEFT" ># newTaskQueue(maxPendingTasks: int): Queue&lt;Runnable&gt;</TD></TR><TR><TD ALIGN="LEFT" ># offerTask(task: Runnable): boolean</TD></TR><TR><TD ALIGN="LEFT" ># peekTask(): Runnable</TD></TR><TR><TD ALIGN="LEFT" >+ pendingTasks(): int</TD></TR><TR><TD ALIGN="LEFT" ># pollTask(): Runnable</TD></TR><TR><TD ALIGN="LEFT" ># pollTaskFrom(taskQueue: Queue&lt;Runnable&gt;): Runnable</TD></TR><TR><TD ALIGN="LEFT" ># reject()</TD></TR><TR><TD ALIGN="LEFT" ># reject(task: Runnable)</TD></TR><TR><TD ALIGN="LEFT" >+ removeShutdownHook(task: Runnable)</TD></TR><TR><TD ALIGN="LEFT" ># removeTask(task: Runnable): boolean</TD></TR><TR><TD ALIGN="LEFT" ># run()</TD></TR><TR><TD ALIGN="LEFT" ># runAllTasks(): boolean</TD></TR><TR><TD ALIGN="LEFT" ># runAllTasks(timeoutNanos: long): boolean</TD></TR><TR><TD ALIGN="LEFT" ># runAllTasksFrom(taskQueue: Queue&lt;Runnable&gt;): boolean</TD></TR><TR><TD ALIGN="LEFT" >- runExistingTasksFrom(taskQueue: Queue&lt;Runnable&gt;): boolean</TD></TR><TR><TD ALIGN="LEFT" ># runScheduledAndExecutorTasks(maxDrainAttempts: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >- runShutdownHooks(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ shutdown()</TD></TR><TR><TD ALIGN="LEFT" >+ shutdownGracefully(quietPeriod: long, timeout: long, unit: TimeUnit): Future&lt;?&gt;</TD></TR><TR><TD ALIGN="LEFT" >- startThread()</TD></TR><TR><TD ALIGN="LEFT" ># takeTask(): Runnable</TD></TR><TR><TD ALIGN="LEFT" >+ terminationFuture(): Future&lt;?&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ threadProperties(): ThreadProperties</TD></TR><TR><TD ALIGN="LEFT" >- throwIfInEventLoop(method: String)</TD></TR><TR><TD ALIGN="LEFT" ># updateLastExecutionTime()</TD></TR><TR><TD ALIGN="LEFT" ># wakesUpForTask(task: Runnable): boolean</TD></TR><TR><TD ALIGN="LEFT" ># wakeup(inEventLoop: boolean)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];Slf4JLogger2048307398[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)Slf4JLogger</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   logger: Logger [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ debug(msg: String)</TD></TR><TR><TD ALIGN="LEFT" >+ debug(format: String, arg: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ debug(format: String, argA: Object, argB: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ debug(format: String, argArray: Object...)</TD></TR><TR><TD ALIGN="LEFT" >+ debug(msg: String, t: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >+ error(msg: String)</TD></TR><TR><TD ALIGN="LEFT" >+ error(format: String, arg: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ error(format: String, argA: Object, argB: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ error(format: String, argArray: Object...)</TD></TR><TR><TD ALIGN="LEFT" >+ error(msg: String, t: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >+ info(msg: String)</TD></TR><TR><TD ALIGN="LEFT" >+ info(format: String, arg: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ info(format: String, argA: Object, argB: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ info(format: String, argArray: Object...)</TD></TR><TR><TD ALIGN="LEFT" >+ info(msg: String, t: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >+ trace(msg: String)</TD></TR><TR><TD ALIGN="LEFT" >+ trace(format: String, arg: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ trace(format: String, argA: Object, argB: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ trace(format: String, argArray: Object...)</TD></TR><TR><TD ALIGN="LEFT" >+ trace(msg: String, t: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >+ warn(msg: String)</TD></TR><TR><TD ALIGN="LEFT" >+ warn(format: String, arg: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ warn(format: String, argArray: Object...)</TD></TR><TR><TD ALIGN="LEFT" >+ warn(format: String, argA: Object, argB: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ warn(msg: String, t: Throwable)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];StringUtil1713044053[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)StringUtil</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ byteToHexString(value: int): String</TD></TR><TR><TD ALIGN="LEFT" >+ byteToHexString(buf: T, value: int): T</TD></TR><TR><TD ALIGN="LEFT" >+ byteToHexStringPadded(value: int): String</TD></TR><TR><TD ALIGN="LEFT" >+ byteToHexStringPadded(buf: T, value: int): T</TD></TR><TR><TD ALIGN="LEFT" >+ commonSuffixOfLength(s: String, p: String, len: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ decodeHexByte(s: CharSequence, pos: int): byte</TD></TR><TR><TD ALIGN="LEFT" >+ decodeHexDump(hexDump: CharSequence, fromIndex: int, length: int): byte[]</TD></TR><TR><TD ALIGN="LEFT" >+ decodeHexDump(hexDump: CharSequence): byte[]</TD></TR><TR><TD ALIGN="LEFT" >+ decodeHexNibble(c: char): int</TD></TR><TR><TD ALIGN="LEFT" >+ decodeHexNibble(b: byte): int</TD></TR><TR><TD ALIGN="LEFT" >+ endsWith(s: CharSequence, c: char): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ escapeCsv(value: CharSequence): CharSequence</TD></TR><TR><TD ALIGN="LEFT" >+ escapeCsv(value: CharSequence, trimWhiteSpace: boolean): CharSequence</TD></TR><TR><TD ALIGN="LEFT" >- indexOfFirstNonOwsChar(value: CharSequence, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >- indexOfLastNonOwsChar(value: CharSequence, start: int, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ indexOfNonWhiteSpace(seq: CharSequence, offset: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ indexOfWhiteSpace(seq: CharSequence, offset: int): int</TD></TR><TR><TD ALIGN="LEFT" >- isDoubleQuote(c: char): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ isNullOrEmpty(s: String): boolean</TD></TR><TR><TD ALIGN="LEFT" >- isOws(c: char): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ isSurrogate(c: char): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ join(separator: CharSequence, elements: Iterable&lt;? extends CharSequence&gt;): CharSequence</TD></TR><TR><TD ALIGN="LEFT" >+ length(s: String): int</TD></TR><TR><TD ALIGN="LEFT" >- newInvalidEscapedCsvFieldException(value: CharSequence, index: int): IllegalArgumentException</TD></TR><TR><TD ALIGN="LEFT" >+ simpleClassName(o: Object): String</TD></TR><TR><TD ALIGN="LEFT" >+ simpleClassName(clazz: Class&lt;?&gt;): String</TD></TR><TR><TD ALIGN="LEFT" >+ substringAfter(value: String, delim: char): String</TD></TR><TR><TD ALIGN="LEFT" >+ substringBefore(value: String, delim: char): String</TD></TR><TR><TD ALIGN="LEFT" >+ toHexString(src: byte[]): String</TD></TR><TR><TD ALIGN="LEFT" >+ toHexString(src: byte[], offset: int, length: int): String</TD></TR><TR><TD ALIGN="LEFT" >+ toHexString(dst: T, src: byte[]): T</TD></TR><TR><TD ALIGN="LEFT" >+ toHexString(dst: T, src: byte[], offset: int, length: int): T</TD></TR><TR><TD ALIGN="LEFT" >+ toHexStringPadded(src: byte[]): String</TD></TR><TR><TD ALIGN="LEFT" >+ toHexStringPadded(src: byte[], offset: int, length: int): String</TD></TR><TR><TD ALIGN="LEFT" >+ toHexStringPadded(dst: T, src: byte[]): T</TD></TR><TR><TD ALIGN="LEFT" >+ toHexStringPadded(dst: T, src: byte[], offset: int, length: int): T</TD></TR><TR><TD ALIGN="LEFT" >+ trimOws(value: CharSequence): CharSequence</TD></TR><TR><TD ALIGN="LEFT" >+ unescapeCsv(value: CharSequence): CharSequence</TD></TR><TR><TD ALIGN="LEFT" >+ unescapeCsvFields(value: CharSequence): List&lt;CharSequence&gt;</TD></TR><TR><TD ALIGN="LEFT" >- validateCsvFormat(value: CharSequence)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];SucceededFuture1377604431[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)SucceededFuture&lt;V&gt;</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   result: V [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ cause(): Throwable</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];SystemPropertyUtil1713044053[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)SystemPropertyUtil</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ contains(key: String): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ get(key: String): String</TD></TR><TR><TD ALIGN="LEFT" >+ get(key: String, def: String): String</TD></TR><TR><TD ALIGN="LEFT" >+ getBoolean(key: String, def: boolean): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ getInt(key: String, def: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getLong(key: String, def: long): long</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];ThreadExecutorMap1713044053[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)ThreadExecutorMap</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ apply(executor: Executor, eventExecutor: EventExecutor): Executor</TD></TR><TR><TD ALIGN="LEFT" >+ apply(command: Runnable, eventExecutor: EventExecutor): Runnable</TD></TR><TR><TD ALIGN="LEFT" >+ apply(threadFactory: ThreadFactory, eventExecutor: EventExecutor): ThreadFactory</TD></TR><TR><TD ALIGN="LEFT" >+ currentExecutor(): EventExecutor</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];ThreadLocalRandom1713044053[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)ThreadLocalRandom</TD></TR><HR/><TR><TD ALIGN="LEFT" >#   initialized: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   pad0: long [1]</TD></TR><TR><TD ALIGN="LEFT" >-   pad1: long [1]</TD></TR><TR><TD ALIGN="LEFT" >-   pad2: long [1]</TD></TR><TR><TD ALIGN="LEFT" >-   pad3: long [1]</TD></TR><TR><TD ALIGN="LEFT" >-   pad4: long [1]</TD></TR><TR><TD ALIGN="LEFT" >-   pad5: long [1]</TD></TR><TR><TD ALIGN="LEFT" >-   pad6: long [1]</TD></TR><TR><TD ALIGN="LEFT" >-   pad7: long [1]</TD></TR><TR><TD ALIGN="LEFT" >-   rnd: long [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ current(): ThreadLocalRandom</TD></TR><TR><TD ALIGN="LEFT" >- mix64(z: long): long</TD></TR><TR><TD ALIGN="LEFT" >- newSeed(): long</TD></TR><TR><TD ALIGN="LEFT" ># next(bits: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ nextDouble(n: double): double</TD></TR><TR><TD ALIGN="LEFT" >+ nextDouble(least: double, bound: double): double</TD></TR><TR><TD ALIGN="LEFT" >+ nextInt(least: int, bound: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ nextLong(n: long): long</TD></TR><TR><TD ALIGN="LEFT" >+ nextLong(least: long, bound: long): long</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];ThrowableUtil1713044053[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)ThrowableUtil</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ addSuppressed(target: Throwable, suppressed: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >+ addSuppressed(target: Throwable, suppressed: List&lt;Throwable&gt;)</TD></TR><TR><TD ALIGN="LEFT" >+ addSuppressedAndClear(target: Throwable, suppressed: List&lt;Throwable&gt;)</TD></TR><TR><TD ALIGN="LEFT" >+ haveSuppressed(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ stackTraceToString(cause: Throwable): String</TD></TR><TR><TD ALIGN="LEFT" >+ unknownStackTrace(cause: T, clazz: Class&lt;?&gt;, method: String): T</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];TypeParameterMatcher1713044053[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)TypeParameterMatcher</TD></TR><HR/><TR><TD ALIGN="LEFT" >- fail(type: Class&lt;?&gt;, typeParamName: String): Class&lt;?&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ find(object: Object, parametrizedSuperclass: Class&lt;?&gt;, typeParamName: String): TypeParameterMatcher</TD></TR><TR><TD ALIGN="LEFT" >- find0(object: Object, parametrizedSuperclass: Class&lt;?&gt;, typeParamName: String): Class&lt;?&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ get(parameterType: Class&lt;?&gt;): TypeParameterMatcher</TD></TR><TR><TD ALIGN="LEFT" >+ match(msg: Object): boolean</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];UnaryPromiseNotifier1377604431[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)UnaryPromiseNotifier&lt;T&gt;</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   promise: Promise&lt;? super T&gt; [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ cascadeTo(completedFuture: Future&lt;X&gt;, promise: Promise&lt;? super X&gt;)</TD></TR><TR><TD ALIGN="LEFT" >+ operationComplete(future: Future&lt;T&gt;)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];UnmodifiableMap397406466[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)UnmodifiableMap&lt;V&gt;</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   entries: Iterable&lt;PrimitiveEntry&lt;V&gt;&gt; [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   entrySet: Set&lt;Entry&lt;Integer, V&gt;&gt; [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   keySet: Set&lt;Integer&gt; [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   map: IntObjectMap&lt;V&gt; [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   values: Collection&lt;V&gt; [0..*]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ clear()</TD></TR><TR><TD ALIGN="LEFT" >+ containsKey(key: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ containsKey(key: Object): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ containsValue(value: Object): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ entries(): Iterable&lt;PrimitiveEntry&lt;V&gt;&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ entrySet(): Set&lt;Entry&lt;Integer, V&gt;&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ get(key: int): V</TD></TR><TR><TD ALIGN="LEFT" >+ get(key: Object): V</TD></TR><TR><TD ALIGN="LEFT" >+ keySet(): Set&lt;Integer&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ put(key: int, value: V): V</TD></TR><TR><TD ALIGN="LEFT" >+ put(key: Integer, value: V): V</TD></TR><TR><TD ALIGN="LEFT" >+ putAll(m: Map&lt;? extends Integer, ? extends V&gt;)</TD></TR><TR><TD ALIGN="LEFT" >+ remove(key: int): V</TD></TR><TR><TD ALIGN="LEFT" >+ remove(key: Object): V</TD></TR><TR><TD ALIGN="LEFT" >+ size(): int</TD></TR><TR><TD ALIGN="LEFT" >+ values(): Collection&lt;V&gt;</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];UnorderedThreadPoolEventExecutor1377604431[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)UnorderedThreadPoolEventExecutor</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   executorSet: Set&lt;EventExecutor&gt; [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   terminationFuture: Promise&lt;?&gt; [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" ># decorateTask(runnable: Runnable, task: RunnableScheduledFuture&lt;V&gt;): RunnableScheduledFuture&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" ># decorateTask(callable: Callable&lt;V&gt;, task: RunnableScheduledFuture&lt;V&gt;): RunnableScheduledFuture&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ execute(command: Runnable)</TD></TR><TR><TD ALIGN="LEFT" >+ inEventLoop(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ inEventLoop(thread: Thread): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ iterator(): Iterator&lt;EventExecutor&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ newFailedFuture(cause: Throwable): Future&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ newProgressivePromise(): ProgressivePromise&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ newPromise(): Promise&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ newSucceededFuture(result: V): Future&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ next(): EventExecutor</TD></TR><TR><TD ALIGN="LEFT" >+ parent(): EventExecutorGroup</TD></TR><TR><TD ALIGN="LEFT" >+ schedule(command: Runnable, delay: long, unit: TimeUnit): ScheduledFuture&lt;?&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ schedule(callable: Callable&lt;V&gt;, delay: long, unit: TimeUnit): ScheduledFuture&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ scheduleAtFixedRate(command: Runnable, initialDelay: long, period: long, unit: TimeUnit): ScheduledFuture&lt;?&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ scheduleWithFixedDelay(command: Runnable, initialDelay: long, delay: long, unit: TimeUnit): ScheduledFuture&lt;?&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ shutdown()</TD></TR><TR><TD ALIGN="LEFT" >+ shutdownGracefully(): Future&lt;?&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ shutdownGracefully(quietPeriod: long, timeout: long, unit: TimeUnit): Future&lt;?&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ shutdownNow(): List&lt;Runnable&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ submit(task: Runnable): Future&lt;?&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ submit(task: Runnable, result: T): Future&lt;T&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ submit(task: Callable&lt;T&gt;): Future&lt;T&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ terminationFuture(): Future&lt;?&gt;</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];UnpaddedInternalThreadLocalMap1713044053[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)UnpaddedInternalThreadLocalMap</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];} subgraph cluster_1725607945 {    	label=channel	labeljust=l	fillcolor="#d8d8d8"	style=filled      AbstractChannel1443455697[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AbstractChannel</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   closeFuture: CloseFuture [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   closeInitiated: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   eventLoop: EventLoop [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   id: ChannelId [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   initialCloseCause: Throwable [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   localAddress: SocketAddress [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   parent: Channel [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   pipeline: DefaultChannelPipeline [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   registered: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   remoteAddress: SocketAddress [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   strVal: String [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   strValActive: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   unsafe: Unsafe [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   unsafeVoidPromise: VoidChannelPromise [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ alloc(): ByteBufAllocator</TD></TR><TR><TD ALIGN="LEFT" >+ bind(localAddress: SocketAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ bind(localAddress: SocketAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ bytesBeforeUnwritable(): long</TD></TR><TR><TD ALIGN="LEFT" >+ bytesBeforeWritable(): long</TD></TR><TR><TD ALIGN="LEFT" >+ close(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ close(promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ closeFuture(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ compareTo(o: Channel): int</TD></TR><TR><TD ALIGN="LEFT" >+ connect(remoteAddress: SocketAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ connect(remoteAddress: SocketAddress, localAddress: SocketAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ connect(remoteAddress: SocketAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ connect(remoteAddress: SocketAddress, localAddress: SocketAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ deregister(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ deregister(promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ disconnect(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ disconnect(promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" ># doBeginRead()</TD></TR><TR><TD ALIGN="LEFT" ># doBind(localAddress: SocketAddress)</TD></TR><TR><TD ALIGN="LEFT" ># doClose()</TD></TR><TR><TD ALIGN="LEFT" ># doDeregister()</TD></TR><TR><TD ALIGN="LEFT" ># doDisconnect()</TD></TR><TR><TD ALIGN="LEFT" ># doRegister()</TD></TR><TR><TD ALIGN="LEFT" ># doShutdownOutput()</TD></TR><TR><TD ALIGN="LEFT" ># doWrite(in: ChannelOutboundBuffer)</TD></TR><TR><TD ALIGN="LEFT" >+ eventLoop(): EventLoop</TD></TR><TR><TD ALIGN="LEFT" ># filterOutboundMessage(msg: Object): Object</TD></TR><TR><TD ALIGN="LEFT" >+ flush(): Channel</TD></TR><TR><TD ALIGN="LEFT" >+ id(): ChannelId</TD></TR><TR><TD ALIGN="LEFT" ># invalidateLocalAddress()</TD></TR><TR><TD ALIGN="LEFT" ># invalidateRemoteAddress()</TD></TR><TR><TD ALIGN="LEFT" ># isCompatible(loop: EventLoop): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ localAddress(): SocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># localAddress0(): SocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># maxMessagesPerWrite(): int</TD></TR><TR><TD ALIGN="LEFT" ># newChannelPipeline(): DefaultChannelPipeline</TD></TR><TR><TD ALIGN="LEFT" >+ newFailedFuture(cause: Throwable): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" ># newId(): ChannelId</TD></TR><TR><TD ALIGN="LEFT" >+ newProgressivePromise(): ChannelProgressivePromise</TD></TR><TR><TD ALIGN="LEFT" >+ newPromise(): ChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ newSucceededFuture(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" ># newUnsafe(): AbstractUnsafe</TD></TR><TR><TD ALIGN="LEFT" >+ parent(): Channel</TD></TR><TR><TD ALIGN="LEFT" >+ pipeline(): ChannelPipeline</TD></TR><TR><TD ALIGN="LEFT" >+ read(): Channel</TD></TR><TR><TD ALIGN="LEFT" >+ remoteAddress(): SocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># remoteAddress0(): SocketAddress</TD></TR><TR><TD ALIGN="LEFT" >+ unsafe(): Unsafe</TD></TR><TR><TD ALIGN="LEFT" ># validateFileRegion(region: DefaultFileRegion, position: long)</TD></TR><TR><TD ALIGN="LEFT" >+ voidPromise(): ChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ write(msg: Object): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ write(msg: Object, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ writeAndFlush(msg: Object): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ writeAndFlush(msg: Object, promise: ChannelPromise): ChannelFuture</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];AbstractChannelHandlerContext1443455697[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AbstractChannelHandlerContext</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   executionMask: int [1]</TD></TR><TR><TD ALIGN="LEFT" >#   executor: EventExecutor [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   handlerState: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   invokeTasks: Tasks [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   name: String [0..1]</TD></TR><TR><TD ALIGN="LEFT" >#   next: AbstractChannelHandlerContext [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   ordered: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   pipeline: DefaultChannelPipeline [0..1]</TD></TR><TR><TD ALIGN="LEFT" >#   prev: AbstractChannelHandlerContext [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   succeededFuture: ChannelFuture [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ alloc(): ByteBufAllocator</TD></TR><TR><TD ALIGN="LEFT" >+ attr(key: AttributeKey&lt;T&gt;): Attribute&lt;T&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ bind(localAddress: SocketAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ bind(localAddress: SocketAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" ># callHandlerAdded()</TD></TR><TR><TD ALIGN="LEFT" ># callHandlerRemoved()</TD></TR><TR><TD ALIGN="LEFT" >+ channel(): Channel</TD></TR><TR><TD ALIGN="LEFT" >+ close(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ close(promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ connect(remoteAddress: SocketAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ connect(remoteAddress: SocketAddress, localAddress: SocketAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ connect(remoteAddress: SocketAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ connect(remoteAddress: SocketAddress, localAddress: SocketAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ deregister(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ deregister(promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ disconnect(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ disconnect(promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ executor(): EventExecutor</TD></TR><TR><TD ALIGN="LEFT" >- findContextInbound(mask: int): AbstractChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" >- findContextOutbound(mask: int): AbstractChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" >+ fireChannelActive(): ChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" >+ fireChannelInactive(): ChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" >+ fireChannelRead(msg: Object): ChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" >+ fireChannelReadComplete(): ChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" >+ fireChannelRegistered(): ChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" >+ fireChannelUnregistered(): ChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" >+ fireChannelWritabilityChanged(): ChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" >+ fireExceptionCaught(cause: Throwable): ChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" >+ fireUserEventTriggered(event: Object): ChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" >+ flush(): ChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" >+ hasAttr(key: AttributeKey&lt;T&gt;): boolean</TD></TR><TR><TD ALIGN="LEFT" >- invokeBind(localAddress: SocketAddress, promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" ># invokeChannelActive(next: AbstractChannelHandlerContext)</TD></TR><TR><TD ALIGN="LEFT" >- invokeChannelActive()</TD></TR><TR><TD ALIGN="LEFT" ># invokeChannelInactive(next: AbstractChannelHandlerContext)</TD></TR><TR><TD ALIGN="LEFT" >- invokeChannelInactive()</TD></TR><TR><TD ALIGN="LEFT" ># invokeChannelRead(next: AbstractChannelHandlerContext, msg: Object)</TD></TR><TR><TD ALIGN="LEFT" >- invokeChannelRead(msg: Object)</TD></TR><TR><TD ALIGN="LEFT" ># invokeChannelReadComplete(next: AbstractChannelHandlerContext)</TD></TR><TR><TD ALIGN="LEFT" >- invokeChannelReadComplete()</TD></TR><TR><TD ALIGN="LEFT" ># invokeChannelRegistered(next: AbstractChannelHandlerContext)</TD></TR><TR><TD ALIGN="LEFT" >- invokeChannelRegistered()</TD></TR><TR><TD ALIGN="LEFT" ># invokeChannelUnregistered(next: AbstractChannelHandlerContext)</TD></TR><TR><TD ALIGN="LEFT" >- invokeChannelUnregistered()</TD></TR><TR><TD ALIGN="LEFT" ># invokeChannelWritabilityChanged(next: AbstractChannelHandlerContext)</TD></TR><TR><TD ALIGN="LEFT" >- invokeChannelWritabilityChanged()</TD></TR><TR><TD ALIGN="LEFT" >- invokeClose(promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >- invokeConnect(remoteAddress: SocketAddress, localAddress: SocketAddress, promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >- invokeDeregister(promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >- invokeDisconnect(promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" ># invokeExceptionCaught(next: AbstractChannelHandlerContext, cause: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >- invokeExceptionCaught(cause: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >- invokeFlush()</TD></TR><TR><TD ALIGN="LEFT" >- invokeFlush0()</TD></TR><TR><TD ALIGN="LEFT" >- invokeHandler(): boolean</TD></TR><TR><TD ALIGN="LEFT" >- invokeRead()</TD></TR><TR><TD ALIGN="LEFT" ># invokeUserEventTriggered(next: AbstractChannelHandlerContext, event: Object)</TD></TR><TR><TD ALIGN="LEFT" >- invokeUserEventTriggered(event: Object)</TD></TR><TR><TD ALIGN="LEFT" ># invokeWrite(msg: Object, promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >- invokeWrite0(msg: Object, promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" ># invokeWriteAndFlush(msg: Object, promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >- isNotValidPromise(promise: ChannelPromise, allowVoidPromise: boolean): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ name(): String</TD></TR><TR><TD ALIGN="LEFT" >+ newFailedFuture(cause: Throwable): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ newProgressivePromise(): ChannelProgressivePromise</TD></TR><TR><TD ALIGN="LEFT" >+ newPromise(): ChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ newSucceededFuture(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >- notifyOutboundHandlerException(cause: Throwable, promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >+ pipeline(): ChannelPipeline</TD></TR><TR><TD ALIGN="LEFT" >+ read(): ChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" >- safeExecute(executor: EventExecutor, runnable: Runnable, promise: ChannelPromise, msg: Object, lazy: boolean): boolean</TD></TR><TR><TD ALIGN="LEFT" ># setAddComplete(): boolean</TD></TR><TR><TD ALIGN="LEFT" >- skipContext(ctx: AbstractChannelHandlerContext, currentExecutor: EventExecutor, mask: int, onlyMask: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ toHintString(): String</TD></TR><TR><TD ALIGN="LEFT" >+ voidPromise(): ChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ write(msg: Object): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ write(msg: Object, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >- write(msg: Object, flush: boolean, promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >+ writeAndFlush(msg: Object, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ writeAndFlush(msg: Object): ChannelFuture</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];AbstractEpollChannel374638629[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AbstractEpollChannel</TD></TR><HR/><TR><TD ALIGN="LEFT" >#   active: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   connectPromise: ChannelPromise [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   connectTimeoutFuture: Future&lt;?&gt; [0..1]</TD></TR><TR><TD ALIGN="LEFT" >#   epollInReadyRunnablePending: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >#   flags: int [1]</TD></TR><TR><TD ALIGN="LEFT" >#   inputClosedSeenErrorOnRead: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   local: SocketAddress [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   remote: SocketAddress [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   requestedRemoteAddress: SocketAddress [0..1]</TD></TR><TR><TD ALIGN="LEFT" >#   socket: LinuxSocket [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" ># checkResolvable(addr: InetSocketAddress)</TD></TR><TR><TD ALIGN="LEFT" ># clearEpollIn()</TD></TR><TR><TD ALIGN="LEFT" ># clearFlag(flag: int)</TD></TR><TR><TD ALIGN="LEFT" >+ config(): EpollChannelConfig</TD></TR><TR><TD ALIGN="LEFT" ># doBeginRead()</TD></TR><TR><TD ALIGN="LEFT" ># doBind(local: SocketAddress)</TD></TR><TR><TD ALIGN="LEFT" ># doClose()</TD></TR><TR><TD ALIGN="LEFT" ># doConnect(remoteAddress: SocketAddress, localAddress: SocketAddress): boolean</TD></TR><TR><TD ALIGN="LEFT" ># doConnect0(remote: SocketAddress): boolean</TD></TR><TR><TD ALIGN="LEFT" ># doDeregister()</TD></TR><TR><TD ALIGN="LEFT" ># doDisconnect()</TD></TR><TR><TD ALIGN="LEFT" ># doReadBytes(byteBuf: ByteBuf): int</TD></TR><TR><TD ALIGN="LEFT" ># doRegister()</TD></TR><TR><TD ALIGN="LEFT" ># doWriteBytes(in: ChannelOutboundBuffer, buf: ByteBuf): int</TD></TR><TR><TD ALIGN="LEFT" ># doWriteOrSendBytes(data: ByteBuf, remoteAddress: InetSocketAddress, fastOpen: boolean): long</TD></TR><TR><TD ALIGN="LEFT" >+ fd(): FileDescriptor</TD></TR><TR><TD ALIGN="LEFT" >- isAllowHalfClosure(config: ChannelConfig): boolean</TD></TR><TR><TD ALIGN="LEFT" ># isCompatible(loop: EventLoop): boolean</TD></TR><TR><TD ALIGN="LEFT" ># isFlagSet(flag: int): boolean</TD></TR><TR><TD ALIGN="LEFT" ># isSoErrorZero(fd: Socket): boolean</TD></TR><TR><TD ALIGN="LEFT" ># localAddress0(): SocketAddress</TD></TR><TR><TD ALIGN="LEFT" >+ metadata(): ChannelMetadata</TD></TR><TR><TD ALIGN="LEFT" >- modifyEvents()</TD></TR><TR><TD ALIGN="LEFT" ># newDirectBuffer(buf: ByteBuf): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" ># newDirectBuffer(holder: Object, buf: ByteBuf): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >- newDirectBuffer0(holder: Object, buf: ByteBuf, alloc: ByteBufAllocator, capacity: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" ># newUnsafe(): AbstractEpollUnsafe</TD></TR><TR><TD ALIGN="LEFT" ># remoteAddress0(): SocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># resetCachedAddresses()</TD></TR><TR><TD ALIGN="LEFT" ># shouldBreakEpollInReady(config: ChannelConfig): boolean</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];AbstractEpollServerChannel374638629[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AbstractEpollServerChannel</TD></TR><HR/><TR><TD ALIGN="LEFT" ># doConnect(remoteAddress: SocketAddress, localAddress: SocketAddress): boolean</TD></TR><TR><TD ALIGN="LEFT" ># doWrite(in: ChannelOutboundBuffer)</TD></TR><TR><TD ALIGN="LEFT" ># filterOutboundMessage(msg: Object): Object</TD></TR><TR><TD ALIGN="LEFT" ># isCompatible(loop: EventLoop): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ metadata(): ChannelMetadata</TD></TR><TR><TD ALIGN="LEFT" ># newChildChannel(fd: int, remote: byte[], offset: int, len: int): Channel</TD></TR><TR><TD ALIGN="LEFT" ># newUnsafe(): AbstractEpollUnsafe</TD></TR><TR><TD ALIGN="LEFT" ># remoteAddress0(): InetSocketAddress</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];AbstractEpollStreamChannel374638629[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AbstractEpollStreamChannel</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   byteChannel: WritableByteChannel [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   flushTask: Runnable [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   pipeIn: FileDescriptor [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   pipeOut: FileDescriptor [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   spliceQueue: Queue&lt;SpliceInTask&gt; [0..*]</TD></TR><HR/><TR><TD ALIGN="LEFT" >- addToSpliceQueue(task: SpliceInTask)</TD></TR><TR><TD ALIGN="LEFT" >- adjustMaxBytesPerGatheringWrite(attempted: long, written: long, oldMaxBytesPerGatheringWrite: long)</TD></TR><TR><TD ALIGN="LEFT" >- clearSpliceQueue()</TD></TR><TR><TD ALIGN="LEFT" ># doClose()</TD></TR><TR><TD ALIGN="LEFT" ># doShutdownOutput()</TD></TR><TR><TD ALIGN="LEFT" ># doWrite(in: ChannelOutboundBuffer)</TD></TR><TR><TD ALIGN="LEFT" >- doWriteMultiple(in: ChannelOutboundBuffer): int</TD></TR><TR><TD ALIGN="LEFT" ># doWriteSingle(in: ChannelOutboundBuffer): int</TD></TR><TR><TD ALIGN="LEFT" >- failSpliceIfClosed(promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" ># filterOutboundMessage(msg: Object): Object</TD></TR><TR><TD ALIGN="LEFT" >+ metadata(): ChannelMetadata</TD></TR><TR><TD ALIGN="LEFT" ># newUnsafe(): AbstractEpollUnsafe</TD></TR><TR><TD ALIGN="LEFT" >- safeClosePipe(fd: FileDescriptor)</TD></TR><TR><TD ALIGN="LEFT" >+ shutdown(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ shutdown(promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >- shutdownDone(shutdownOutputFuture: ChannelFuture, shutdownInputFuture: ChannelFuture, promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >+ shutdownInput(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ shutdownInput(promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >- shutdownInput0(promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >+ shutdownOutput(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ shutdownOutput(promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >- shutdownOutputDone(shutdownOutputFuture: ChannelFuture, promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >+ spliceTo(ch: AbstractEpollStreamChannel, len: int): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ spliceTo(ch: AbstractEpollStreamChannel, len: int, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ spliceTo(ch: FileDescriptor, offset: int, len: int): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ spliceTo(ch: FileDescriptor, offset: int, len: int, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >- writeBytes(in: ChannelOutboundBuffer, buf: ByteBuf): int</TD></TR><TR><TD ALIGN="LEFT" >- writeBytesMultiple(in: ChannelOutboundBuffer, array: IovArray): int</TD></TR><TR><TD ALIGN="LEFT" >- writeBytesMultiple(in: ChannelOutboundBuffer, nioBuffers: ByteBuffer[], nioBufferCnt: int, expectedWrittenBytes: long, maxBytesPerGatheringWrite: long): int</TD></TR><TR><TD ALIGN="LEFT" >- writeDefaultFileRegion(in: ChannelOutboundBuffer, region: DefaultFileRegion): int</TD></TR><TR><TD ALIGN="LEFT" >- writeFileRegion(in: ChannelOutboundBuffer, region: FileRegion): int</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];AbstractEpollUnsafe152582730[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AbstractEpollUnsafe</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   allocHandle: EpollRecvByteAllocatorHandle [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   epollInReadyRunnable: Runnable [0..1]</TD></TR><TR><TD ALIGN="LEFT" >#   maybeMoreDataToRead: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >#   readPending: boolean [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" ># clearEpollIn0()</TD></TR><TR><TD ALIGN="LEFT" >- clearEpollRdHup()</TD></TR><TR><TD ALIGN="LEFT" >+ connect(remoteAddress: SocketAddress, localAddress: SocketAddress, promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >- doFinishConnect(): boolean</TD></TR><TR><TD ALIGN="LEFT" ># epollInBefore()</TD></TR><TR><TD ALIGN="LEFT" ># epollInFinally(config: ChannelConfig)</TD></TR><TR><TD ALIGN="LEFT" ># epollInReady()</TD></TR><TR><TD ALIGN="LEFT" ># epollOutReady()</TD></TR><TR><TD ALIGN="LEFT" ># epollRdHupReady()</TD></TR><TR><TD ALIGN="LEFT" ># executeEpollInReadyRunnable(config: ChannelConfig)</TD></TR><TR><TD ALIGN="LEFT" >- finishConnect()</TD></TR><TR><TD ALIGN="LEFT" >- fireEventAndClose(evt: Object)</TD></TR><TR><TD ALIGN="LEFT" ># flush0()</TD></TR><TR><TD ALIGN="LEFT" >- fulfillConnectPromise(promise: ChannelPromise, wasActive: boolean)</TD></TR><TR><TD ALIGN="LEFT" >- fulfillConnectPromise(promise: ChannelPromise, cause: Throwable)</TD></TR><TR><TD ALIGN="LEFT" ># newEpollHandle(handle: ExtendedHandle): EpollRecvByteAllocatorHandle</TD></TR><TR><TD ALIGN="LEFT" >+ recvBufAllocHandle(): EpollRecvByteAllocatorHandle</TD></TR><TR><TD ALIGN="LEFT" ># shutdownInput(rdHup: boolean)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];AbstractEventLoop1443455697[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AbstractEventLoop</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ next(): EventLoop</TD></TR><TR><TD ALIGN="LEFT" >+ parent(): EventLoopGroup</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];AbstractEventLoopGroup1443455697[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AbstractEventLoopGroup</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ next(): EventLoop</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];AbstractKQueueChannel1098233563[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AbstractKQueueChannel</TD></TR><HR/><TR><TD ALIGN="LEFT" >#   active: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   connectPromise: ChannelPromise [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   connectTimeoutFuture: Future&lt;?&gt; [0..1]</TD></TR><TR><TD ALIGN="LEFT" >#   inputClosedSeenErrorOnRead: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   local: SocketAddress [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   readFilterEnabled: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >#   readReadyRunnablePending: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   remote: SocketAddress [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   requestedRemoteAddress: SocketAddress [0..1]</TD></TR><TR><TD ALIGN="LEFT" >#   socket: BsdSocket [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   writeFilterEnabled: boolean [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" ># checkResolvable(addr: InetSocketAddress)</TD></TR><TR><TD ALIGN="LEFT" >- clearRdHup0()</TD></TR><TR><TD ALIGN="LEFT" ># clearReadFilter()</TD></TR><TR><TD ALIGN="LEFT" >+ config(): KQueueChannelConfig</TD></TR><TR><TD ALIGN="LEFT" ># doBeginRead()</TD></TR><TR><TD ALIGN="LEFT" ># doBind(local: SocketAddress)</TD></TR><TR><TD ALIGN="LEFT" ># doClose()</TD></TR><TR><TD ALIGN="LEFT" ># doConnect(remoteAddress: SocketAddress, localAddress: SocketAddress): boolean</TD></TR><TR><TD ALIGN="LEFT" ># doConnect0(remoteAddress: SocketAddress, localAddress: SocketAddress): boolean</TD></TR><TR><TD ALIGN="LEFT" ># doDeregister()</TD></TR><TR><TD ALIGN="LEFT" ># doDisconnect()</TD></TR><TR><TD ALIGN="LEFT" ># doReadBytes(byteBuf: ByteBuf): int</TD></TR><TR><TD ALIGN="LEFT" ># doRegister()</TD></TR><TR><TD ALIGN="LEFT" ># doWriteBytes(in: ChannelOutboundBuffer, buf: ByteBuf): int</TD></TR><TR><TD ALIGN="LEFT" >- evSet(filter: short, flags: short)</TD></TR><TR><TD ALIGN="LEFT" >- evSet0(filter: short, flags: short)</TD></TR><TR><TD ALIGN="LEFT" >- evSet0(filter: short, flags: short, fflags: int)</TD></TR><TR><TD ALIGN="LEFT" >+ fd(): FileDescriptor</TD></TR><TR><TD ALIGN="LEFT" >- isAllowHalfClosure(config: ChannelConfig): boolean</TD></TR><TR><TD ALIGN="LEFT" ># isCompatible(loop: EventLoop): boolean</TD></TR><TR><TD ALIGN="LEFT" ># isSoErrorZero(fd: BsdSocket): boolean</TD></TR><TR><TD ALIGN="LEFT" ># localAddress0(): SocketAddress</TD></TR><TR><TD ALIGN="LEFT" >+ metadata(): ChannelMetadata</TD></TR><TR><TD ALIGN="LEFT" ># newDirectBuffer(buf: ByteBuf): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" ># newDirectBuffer(holder: Object, buf: ByteBuf): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >- newDirectBuffer0(holder: Object, buf: ByteBuf, alloc: ByteBufAllocator, capacity: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" ># newUnsafe(): AbstractKQueueUnsafe</TD></TR><TR><TD ALIGN="LEFT" ># readFilter(readFilterEnabled: boolean)</TD></TR><TR><TD ALIGN="LEFT" ># remoteAddress0(): SocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># resetCachedAddresses()</TD></TR><TR><TD ALIGN="LEFT" ># shouldBreakReadReady(config: ChannelConfig): boolean</TD></TR><TR><TD ALIGN="LEFT" ># unregisterFilters()</TD></TR><TR><TD ALIGN="LEFT" ># writeFilter(writeFilterEnabled: boolean)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];AbstractKQueueServerChannel1098233563[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AbstractKQueueServerChannel</TD></TR><HR/><TR><TD ALIGN="LEFT" ># doConnect(remoteAddress: SocketAddress, localAddress: SocketAddress): boolean</TD></TR><TR><TD ALIGN="LEFT" ># doWrite(in: ChannelOutboundBuffer)</TD></TR><TR><TD ALIGN="LEFT" ># filterOutboundMessage(msg: Object): Object</TD></TR><TR><TD ALIGN="LEFT" ># isCompatible(loop: EventLoop): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ metadata(): ChannelMetadata</TD></TR><TR><TD ALIGN="LEFT" ># newChildChannel(fd: int, remote: byte[], offset: int, len: int): Channel</TD></TR><TR><TD ALIGN="LEFT" ># newUnsafe(): AbstractKQueueUnsafe</TD></TR><TR><TD ALIGN="LEFT" ># remoteAddress0(): InetSocketAddress</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];AbstractKQueueStreamChannel1098233563[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AbstractKQueueStreamChannel</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   byteChannel: WritableByteChannel [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   flushTask: Runnable [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >- adjustMaxBytesPerGatheringWrite(attempted: long, written: long, oldMaxBytesPerGatheringWrite: long)</TD></TR><TR><TD ALIGN="LEFT" ># doShutdownOutput()</TD></TR><TR><TD ALIGN="LEFT" ># doWrite(in: ChannelOutboundBuffer)</TD></TR><TR><TD ALIGN="LEFT" >- doWriteMultiple(in: ChannelOutboundBuffer): int</TD></TR><TR><TD ALIGN="LEFT" ># doWriteSingle(in: ChannelOutboundBuffer): int</TD></TR><TR><TD ALIGN="LEFT" ># filterOutboundMessage(msg: Object): Object</TD></TR><TR><TD ALIGN="LEFT" >+ metadata(): ChannelMetadata</TD></TR><TR><TD ALIGN="LEFT" ># newUnsafe(): AbstractKQueueUnsafe</TD></TR><TR><TD ALIGN="LEFT" >+ shutdown(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ shutdown(promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >- shutdownDone(shutdownOutputFuture: ChannelFuture, shutdownInputFuture: ChannelFuture, promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >+ shutdownInput(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ shutdownInput(promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >- shutdownInput0(promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >+ shutdownOutput(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ shutdownOutput(promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >- shutdownOutputDone(shutdownOutputFuture: ChannelFuture, promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >- writeBytes(in: ChannelOutboundBuffer, buf: ByteBuf): int</TD></TR><TR><TD ALIGN="LEFT" >- writeBytesMultiple(in: ChannelOutboundBuffer, array: IovArray): int</TD></TR><TR><TD ALIGN="LEFT" >- writeBytesMultiple(in: ChannelOutboundBuffer, nioBuffers: ByteBuffer[], nioBufferCnt: int, expectedWrittenBytes: long, maxBytesPerGatheringWrite: long): int</TD></TR><TR><TD ALIGN="LEFT" >- writeDefaultFileRegion(in: ChannelOutboundBuffer, region: DefaultFileRegion): int</TD></TR><TR><TD ALIGN="LEFT" >- writeFileRegion(in: ChannelOutboundBuffer, region: FileRegion): int</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];AbstractKQueueUnsafe1055166062[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AbstractKQueueUnsafe</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   allocHandle: KQueueRecvByteAllocatorHandle [0..1]</TD></TR><TR><TD ALIGN="LEFT" >#   maybeMoreDataToRead: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >#   readPending: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   readReadyRunnable: Runnable [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" ># clearReadFilter0()</TD></TR><TR><TD ALIGN="LEFT" >+ connect(remoteAddress: SocketAddress, localAddress: SocketAddress, promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >- doFinishConnect(): boolean</TD></TR><TR><TD ALIGN="LEFT" ># executeReadReadyRunnable(config: ChannelConfig)</TD></TR><TR><TD ALIGN="LEFT" ># failConnectPromise(cause: Throwable): boolean</TD></TR><TR><TD ALIGN="LEFT" >- finishConnect()</TD></TR><TR><TD ALIGN="LEFT" >- fireEventAndClose(evt: Object)</TD></TR><TR><TD ALIGN="LEFT" ># flush0()</TD></TR><TR><TD ALIGN="LEFT" >- fulfillConnectPromise(promise: ChannelPromise, wasActive: boolean)</TD></TR><TR><TD ALIGN="LEFT" >- fulfillConnectPromise(promise: ChannelPromise, cause: Throwable)</TD></TR><TR><TD ALIGN="LEFT" ># readEOF()</TD></TR><TR><TD ALIGN="LEFT" ># readReady(numberBytesPending: long)</TD></TR><TR><TD ALIGN="LEFT" ># readReady(allocHandle: KQueueRecvByteAllocatorHandle)</TD></TR><TR><TD ALIGN="LEFT" ># readReadyBefore()</TD></TR><TR><TD ALIGN="LEFT" ># readReadyFinally(config: ChannelConfig)</TD></TR><TR><TD ALIGN="LEFT" >+ recvBufAllocHandle(): KQueueRecvByteAllocatorHandle</TD></TR><TR><TD ALIGN="LEFT" ># shutdownInput(readEOF: boolean)</TD></TR><TR><TD ALIGN="LEFT" ># writeReady()</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];AbstractNioByteChannel1712128213[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AbstractNioByteChannel</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   flushTask: Runnable [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   inputClosedSeenErrorOnRead: boolean [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" ># clearOpWrite()</TD></TR><TR><TD ALIGN="LEFT" ># doReadBytes(buf: ByteBuf): int</TD></TR><TR><TD ALIGN="LEFT" ># doWrite(in: ChannelOutboundBuffer)</TD></TR><TR><TD ALIGN="LEFT" ># doWrite0(in: ChannelOutboundBuffer): int</TD></TR><TR><TD ALIGN="LEFT" ># doWriteBytes(buf: ByteBuf): int</TD></TR><TR><TD ALIGN="LEFT" ># doWriteFileRegion(region: FileRegion): long</TD></TR><TR><TD ALIGN="LEFT" >- doWriteInternal(in: ChannelOutboundBuffer, msg: Object): int</TD></TR><TR><TD ALIGN="LEFT" ># filterOutboundMessage(msg: Object): Object</TD></TR><TR><TD ALIGN="LEFT" ># incompleteWrite(setOpWrite: boolean)</TD></TR><TR><TD ALIGN="LEFT" >- isAllowHalfClosure(config: ChannelConfig): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ metadata(): ChannelMetadata</TD></TR><TR><TD ALIGN="LEFT" ># newUnsafe(): AbstractNioUnsafe</TD></TR><TR><TD ALIGN="LEFT" ># shouldBreakReadReady(config: ChannelConfig): boolean</TD></TR><TR><TD ALIGN="LEFT" ># shutdownInput(): ChannelFuture</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];AbstractNioChannel1712128213[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AbstractNioChannel</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   ch: SelectableChannel [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   clearReadPendingRunnable: Runnable [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   connectPromise: ChannelPromise [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   connectTimeoutFuture: Future&lt;?&gt; [0..1]</TD></TR><TR><TD ALIGN="LEFT" >#   readInterestOp: int [1]</TD></TR><TR><TD ALIGN="LEFT" >#   readPending: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   requestedRemoteAddress: SocketAddress [0..1]</TD></TR><TR><TD ALIGN="LEFT" >#   selectionKey: SelectionKey [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" ># clearReadPending()</TD></TR><TR><TD ALIGN="LEFT" >- clearReadPending0()</TD></TR><TR><TD ALIGN="LEFT" ># doBeginRead()</TD></TR><TR><TD ALIGN="LEFT" ># doClose()</TD></TR><TR><TD ALIGN="LEFT" ># doConnect(remoteAddress: SocketAddress, localAddress: SocketAddress): boolean</TD></TR><TR><TD ALIGN="LEFT" ># doDeregister()</TD></TR><TR><TD ALIGN="LEFT" ># doFinishConnect()</TD></TR><TR><TD ALIGN="LEFT" ># doRegister()</TD></TR><TR><TD ALIGN="LEFT" >+ eventLoop(): NioEventLoop</TD></TR><TR><TD ALIGN="LEFT" ># isCompatible(loop: EventLoop): boolean</TD></TR><TR><TD ALIGN="LEFT" ># javaChannel(): SelectableChannel</TD></TR><TR><TD ALIGN="LEFT" ># newDirectBuffer(buf: ByteBuf): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" ># newDirectBuffer(holder: ReferenceCounted, buf: ByteBuf): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" ># selectionKey(): SelectionKey</TD></TR><TR><TD ALIGN="LEFT" >+ unsafe(): NioUnsafe</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];AbstractNioUnsafe2133975018[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AbstractNioUnsafe</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ ch(): SelectableChannel</TD></TR><TR><TD ALIGN="LEFT" >+ connect(remoteAddress: SocketAddress, localAddress: SocketAddress, promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >+ finishConnect()</TD></TR><TR><TD ALIGN="LEFT" ># flush0()</TD></TR><TR><TD ALIGN="LEFT" >+ forceFlush()</TD></TR><TR><TD ALIGN="LEFT" >- fulfillConnectPromise(promise: ChannelPromise, wasActive: boolean)</TD></TR><TR><TD ALIGN="LEFT" >- fulfillConnectPromise(promise: ChannelPromise, cause: Throwable)</TD></TR><TR><TD ALIGN="LEFT" ># removeReadOp()</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];AbstractOioByteChannel1712129174[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AbstractOioByteChannel</TD></TR><HR/><TR><TD ALIGN="LEFT" ># available(): int</TD></TR><TR><TD ALIGN="LEFT" >- closeOnRead(pipeline: ChannelPipeline)</TD></TR><TR><TD ALIGN="LEFT" ># doRead()</TD></TR><TR><TD ALIGN="LEFT" ># doReadBytes(buf: ByteBuf): int</TD></TR><TR><TD ALIGN="LEFT" ># doWrite(in: ChannelOutboundBuffer)</TD></TR><TR><TD ALIGN="LEFT" ># doWriteBytes(buf: ByteBuf)</TD></TR><TR><TD ALIGN="LEFT" ># doWriteFileRegion(region: FileRegion)</TD></TR><TR><TD ALIGN="LEFT" ># filterOutboundMessage(msg: Object): Object</TD></TR><TR><TD ALIGN="LEFT" >- handleReadException(pipeline: ChannelPipeline, byteBuf: ByteBuf, cause: Throwable, close: boolean, allocHandle: Handle)</TD></TR><TR><TD ALIGN="LEFT" >+ metadata(): ChannelMetadata</TD></TR><TR><TD ALIGN="LEFT" ># shutdownInput(): ChannelFuture</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];AbstractOioChannel1712129174[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AbstractOioChannel</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   clearReadPendingRunnable: Runnable [0..1]</TD></TR><TR><TD ALIGN="LEFT" >#   readPending: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >#   readTask: Runnable [0..1]</TD></TR><TR><TD ALIGN="LEFT" >#   readWhenInactive: boolean [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" ># clearReadPending()</TD></TR><TR><TD ALIGN="LEFT" ># doBeginRead()</TD></TR><TR><TD ALIGN="LEFT" ># doConnect(remoteAddress: SocketAddress, localAddress: SocketAddress)</TD></TR><TR><TD ALIGN="LEFT" ># doRead()</TD></TR><TR><TD ALIGN="LEFT" ># isCompatible(loop: EventLoop): boolean</TD></TR><TR><TD ALIGN="LEFT" ># newUnsafe(): AbstractUnsafe</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];AbstractServerChannel1443455697[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AbstractServerChannel</TD></TR><HR/><TR><TD ALIGN="LEFT" ># doDisconnect()</TD></TR><TR><TD ALIGN="LEFT" ># doWrite(in: ChannelOutboundBuffer)</TD></TR><TR><TD ALIGN="LEFT" ># filterOutboundMessage(msg: Object): Object</TD></TR><TR><TD ALIGN="LEFT" >+ metadata(): ChannelMetadata</TD></TR><TR><TD ALIGN="LEFT" ># newUnsafe(): AbstractUnsafe</TD></TR><TR><TD ALIGN="LEFT" >+ remoteAddress(): SocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># remoteAddress0(): SocketAddress</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];AbstractUnsafe1089015714[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AbstractUnsafe</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   inFlush0: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   neverRegistered: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   outboundBuffer: ChannelOutboundBuffer [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   recvHandle: Handle [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" ># annotateConnectException(cause: Throwable, remoteAddress: SocketAddress): Throwable</TD></TR><TR><TD ALIGN="LEFT" >- assertEventLoop()</TD></TR><TR><TD ALIGN="LEFT" >+ beginRead()</TD></TR><TR><TD ALIGN="LEFT" >+ bind(localAddress: SocketAddress, promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >+ close(promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >- close(promise: ChannelPromise, cause: Throwable, closeCause: ClosedChannelException, notify: boolean)</TD></TR><TR><TD ALIGN="LEFT" >+ closeForcibly()</TD></TR><TR><TD ALIGN="LEFT" ># closeIfClosed()</TD></TR><TR><TD ALIGN="LEFT" >- closeOutboundBufferForShutdown(pipeline: ChannelPipeline, buffer: ChannelOutboundBuffer, cause: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >+ deregister(promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >- deregister(promise: ChannelPromise, fireChannelInactive: boolean)</TD></TR><TR><TD ALIGN="LEFT" >+ disconnect(promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >- doClose0(promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" ># ensureOpen(promise: ChannelPromise): boolean</TD></TR><TR><TD ALIGN="LEFT" >- fireChannelInactiveAndDeregister(wasActive: boolean)</TD></TR><TR><TD ALIGN="LEFT" >+ flush()</TD></TR><TR><TD ALIGN="LEFT" ># flush0()</TD></TR><TR><TD ALIGN="LEFT" ># handleWriteError(t: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >- invokeLater(task: Runnable)</TD></TR><TR><TD ALIGN="LEFT" >+ localAddress(): SocketAddress</TD></TR><TR><TD ALIGN="LEFT" >- newClosedChannelException(cause: Throwable, method: String): ClosedChannelException</TD></TR><TR><TD ALIGN="LEFT" >+ outboundBuffer(): ChannelOutboundBuffer</TD></TR><TR><TD ALIGN="LEFT" ># prepareToClose(): Executor</TD></TR><TR><TD ALIGN="LEFT" >+ recvBufAllocHandle(): Handle</TD></TR><TR><TD ALIGN="LEFT" >+ register(eventLoop: EventLoop, promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >- register0(promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >+ remoteAddress(): SocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># safeSetFailure(promise: ChannelPromise, cause: Throwable)</TD></TR><TR><TD ALIGN="LEFT" ># safeSetSuccess(promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >+ shutdownOutput(promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >- shutdownOutput(promise: ChannelPromise, cause: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >+ voidPromise(): ChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ write(msg: Object, promise: ChannelPromise)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];AcquireListener431262754[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AcquireListener</TD></TR><HR/><TR><TD ALIGN="LEFT" >#   acquired: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   originalPromise: Promise&lt;Channel&gt; [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ acquired()</TD></TR><TR><TD ALIGN="LEFT" >+ operationComplete(future: Future&lt;Channel&gt;)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];AdaptiveRecvByteBufAllocator1443455697[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AdaptiveRecvByteBufAllocator</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   initial: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   maxIndex: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   minIndex: int [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >- getSizeTableIndex(size: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ newHandle(): Handle</TD></TR><TR><TD ALIGN="LEFT" >+ respectMaybeMoreData(respectMaybeMoreData: boolean): AdaptiveRecvByteBufAllocator</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];Buffer1536580327[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)Buffer</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ addressSize(): int</TD></TR><TR><TD ALIGN="LEFT" >- addressSize0(): int</TD></TR><TR><TD ALIGN="LEFT" >+ allocateDirectWithNativeOrder(capacity: int): ByteBuffer</TD></TR><TR><TD ALIGN="LEFT" >+ free(buffer: ByteBuffer)</TD></TR><TR><TD ALIGN="LEFT" >+ memoryAddress(buffer: ByteBuffer): long</TD></TR><TR><TD ALIGN="LEFT" >- memoryAddress0(buffer: ByteBuffer): long</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];ChannelMatchers376545536[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)ChannelMatchers</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ all(): ChannelMatcher</TD></TR><TR><TD ALIGN="LEFT" >+ compose(matchers: ChannelMatcher...): ChannelMatcher</TD></TR><TR><TD ALIGN="LEFT" >+ invert(matcher: ChannelMatcher): ChannelMatcher</TD></TR><TR><TD ALIGN="LEFT" >+ is(channel: Channel): ChannelMatcher</TD></TR><TR><TD ALIGN="LEFT" >+ isInstanceOf(clazz: Class&lt;? extends Channel&gt;): ChannelMatcher</TD></TR><TR><TD ALIGN="LEFT" >+ isNot(channel: Channel): ChannelMatcher</TD></TR><TR><TD ALIGN="LEFT" >+ isNotInstanceOf(clazz: Class&lt;? extends Channel&gt;): ChannelMatcher</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];ChannelPromiseAggregator1443455697[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)ChannelPromiseAggregator</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];ChannelPromiseNotifier1443455697[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)ChannelPromiseNotifier</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];ChannelsReadOnlyIterator992346003[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)ChannelsReadOnlyIterator&lt;T extends Channel&gt;</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   channelIterator: Iterator&lt;T&gt; [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ empty(): Iterator&lt;T&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ next(): Channel</TD></TR><TR><TD ALIGN="LEFT" >+ remove()</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];ClassMatcher1668350614[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)ClassMatcher</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   clazz: Class&lt;? extends Channel&gt; [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ matches(ch: Channel): boolean</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];CloseFuture1089015714[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)CloseFuture</TD></TR><HR/><TR><TD ALIGN="LEFT" ># setClosed(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ setFailure(cause: Throwable): ChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ setSuccess(): ChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ tryFailure(cause: Throwable): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ trySuccess(): boolean</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];CompleteChannelFuture1443455697[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)CompleteChannelFuture</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   channel: Channel [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ addListener(listener: GenericFutureListener&lt;? extends Future&lt;? super Void&gt;&gt;): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ addListeners(listeners: GenericFutureListener&lt;? extends Future&lt;? super Void&gt;&gt;...): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ await(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ awaitUninterruptibly(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ channel(): Channel</TD></TR><TR><TD ALIGN="LEFT" ># executor(): EventExecutor</TD></TR><TR><TD ALIGN="LEFT" >+ removeListener(listener: GenericFutureListener&lt;? extends Future&lt;? super Void&gt;&gt;): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ removeListeners(listeners: GenericFutureListener&lt;? extends Future&lt;? super Void&gt;&gt;...): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ sync(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ syncUninterruptibly(): ChannelFuture</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];CompositeMatcher1668350614[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)CompositeMatcher</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   matchers: ChannelMatcher[] [0..*]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ matches(channel: Channel): boolean</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DatagramPacket871578350[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DatagramPacket</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ copy(): DatagramPacket</TD></TR><TR><TD ALIGN="LEFT" >+ duplicate(): DatagramPacket</TD></TR><TR><TD ALIGN="LEFT" >+ replace(content: ByteBuf): DatagramPacket</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): DatagramPacket</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): DatagramPacket</TD></TR><TR><TD ALIGN="LEFT" >+ retainedDuplicate(): DatagramPacket</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): DatagramPacket</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): DatagramPacket</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultAddressedEnvelope1443455697[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultAddressedEnvelope&lt;M, A extends SocketAddress&gt;</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   message: M [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   recipient: A [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   sender: A [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ content(): M</TD></TR><TR><TD ALIGN="LEFT" >+ recipient(): A</TD></TR><TR><TD ALIGN="LEFT" >+ refCnt(): int</TD></TR><TR><TD ALIGN="LEFT" >+ release(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ release(decrement: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): AddressedEnvelope&lt;M, A&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): AddressedEnvelope&lt;M, A&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ sender(): A</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): AddressedEnvelope&lt;M, A&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): AddressedEnvelope&lt;M, A&gt;</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultChannelConfig1443455697[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultChannelConfig</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   allocator: ByteBufAllocator [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   autoClose: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   autoRead: int [1]</TD></TR><TR><TD ALIGN="LEFT" >#   channel: Channel [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   connectTimeoutMillis: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   maxMessagesPerWrite: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   msgSizeEstimator: MessageSizeEstimator [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   pinEventExecutor: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   rcvBufAllocator: RecvByteBufAllocator [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   writeBufferWaterMark: WriteBufferWaterMark [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   writeSpinCount: int [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" ># autoReadCleared()</TD></TR><TR><TD ALIGN="LEFT" >+ getOption(option: ChannelOption&lt;T&gt;): T</TD></TR><TR><TD ALIGN="LEFT" ># getOptions(result: Map&lt;ChannelOption&lt;?&gt;, Object&gt;, options: ChannelOption&lt;?&gt;...): Map&lt;ChannelOption&lt;?&gt;, Object&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ setAllocator(allocator: ByteBufAllocator): ChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAutoClose(autoClose: boolean): ChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAutoRead(autoRead: boolean): ChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setConnectTimeoutMillis(connectTimeoutMillis: int): ChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMaxMessagesPerRead(maxMessagesPerRead: int): ChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMaxMessagesPerWrite(maxMessagesPerWrite: int): ChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMessageSizeEstimator(estimator: MessageSizeEstimator): ChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setOption(option: ChannelOption&lt;T&gt;, value: T): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ setOptions(options: Map&lt;ChannelOption&lt;?&gt;, ?&gt;): boolean</TD></TR><TR><TD ALIGN="LEFT" >- setPinEventExecutorPerGroup(pinEventExecutor: boolean): ChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setRecvByteBufAllocator(allocator: RecvByteBufAllocator): ChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferHighWaterMark(writeBufferHighWaterMark: int): ChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferLowWaterMark(writeBufferLowWaterMark: int): ChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferWaterMark(writeBufferWaterMark: WriteBufferWaterMark): ChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteSpinCount(writeSpinCount: int): ChannelConfig</TD></TR><TR><TD ALIGN="LEFT" ># validate(option: ChannelOption&lt;T&gt;, value: T)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultChannelGroup376545536[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultChannelGroup</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   closed: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   executor: EventExecutor [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   name: String [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   nonServerChannels: ConcurrentMap&lt;ChannelId, Channel&gt; [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   remover: ChannelFutureListener [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   serverChannels: ConcurrentMap&lt;ChannelId, Channel&gt; [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   stayClosed: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   voidFuture: VoidChannelGroupFuture [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ add(channel: Channel): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ clear()</TD></TR><TR><TD ALIGN="LEFT" >+ close(): ChannelGroupFuture</TD></TR><TR><TD ALIGN="LEFT" >+ close(matcher: ChannelMatcher): ChannelGroupFuture</TD></TR><TR><TD ALIGN="LEFT" >+ compareTo(o: ChannelGroup): int</TD></TR><TR><TD ALIGN="LEFT" >+ contains(o: Object): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ deregister(): ChannelGroupFuture</TD></TR><TR><TD ALIGN="LEFT" >+ deregister(matcher: ChannelMatcher): ChannelGroupFuture</TD></TR><TR><TD ALIGN="LEFT" >+ disconnect(): ChannelGroupFuture</TD></TR><TR><TD ALIGN="LEFT" >+ disconnect(matcher: ChannelMatcher): ChannelGroupFuture</TD></TR><TR><TD ALIGN="LEFT" >+ find(id: ChannelId): Channel</TD></TR><TR><TD ALIGN="LEFT" >+ flush(): ChannelGroup</TD></TR><TR><TD ALIGN="LEFT" >+ flush(matcher: ChannelMatcher): ChannelGroup</TD></TR><TR><TD ALIGN="LEFT" >+ flushAndWrite(message: Object): ChannelGroupFuture</TD></TR><TR><TD ALIGN="LEFT" >+ flushAndWrite(message: Object, matcher: ChannelMatcher): ChannelGroupFuture</TD></TR><TR><TD ALIGN="LEFT" >+ iterator(): Iterator&lt;Channel&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ name(): String</TD></TR><TR><TD ALIGN="LEFT" >+ newCloseFuture(): ChannelGroupFuture</TD></TR><TR><TD ALIGN="LEFT" >+ newCloseFuture(matcher: ChannelMatcher): ChannelGroupFuture</TD></TR><TR><TD ALIGN="LEFT" >+ remove(o: Object): boolean</TD></TR><TR><TD ALIGN="LEFT" >- safeDuplicate(message: Object): Object</TD></TR><TR><TD ALIGN="LEFT" >+ size(): int</TD></TR><TR><TD ALIGN="LEFT" >+ toArray(): Object[]</TD></TR><TR><TD ALIGN="LEFT" >+ toArray(a: T[]): T[]</TD></TR><TR><TD ALIGN="LEFT" >+ write(message: Object): ChannelGroupFuture</TD></TR><TR><TD ALIGN="LEFT" >+ write(message: Object, matcher: ChannelMatcher): ChannelGroupFuture</TD></TR><TR><TD ALIGN="LEFT" >+ write(message: Object, matcher: ChannelMatcher, voidPromise: boolean): ChannelGroupFuture</TD></TR><TR><TD ALIGN="LEFT" >+ writeAndFlush(message: Object): ChannelGroupFuture</TD></TR><TR><TD ALIGN="LEFT" >+ writeAndFlush(message: Object, matcher: ChannelMatcher): ChannelGroupFuture</TD></TR><TR><TD ALIGN="LEFT" >+ writeAndFlush(message: Object, matcher: ChannelMatcher, voidPromise: boolean): ChannelGroupFuture</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultChannelGroupFuture376545536[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultChannelGroupFuture</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   childListener: ChannelFutureListener [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   failureCount: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   futures: Map&lt;Channel, ChannelFuture&gt; [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   group: ChannelGroup [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   successCount: int [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ addListener(listener: GenericFutureListener&lt;? extends Future&lt;? super Void&gt;&gt;): DefaultChannelGroupFuture</TD></TR><TR><TD ALIGN="LEFT" >+ addListeners(listeners: GenericFutureListener&lt;? extends Future&lt;? super Void&gt;&gt;...): DefaultChannelGroupFuture</TD></TR><TR><TD ALIGN="LEFT" >+ await(): DefaultChannelGroupFuture</TD></TR><TR><TD ALIGN="LEFT" >+ awaitUninterruptibly(): DefaultChannelGroupFuture</TD></TR><TR><TD ALIGN="LEFT" >+ cause(): ChannelGroupException</TD></TR><TR><TD ALIGN="LEFT" ># checkDeadLock()</TD></TR><TR><TD ALIGN="LEFT" >+ find(channel: Channel): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ group(): ChannelGroup</TD></TR><TR><TD ALIGN="LEFT" >+ iterator(): Iterator&lt;ChannelFuture&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ removeListener(listener: GenericFutureListener&lt;? extends Future&lt;? super Void&gt;&gt;): DefaultChannelGroupFuture</TD></TR><TR><TD ALIGN="LEFT" >+ removeListeners(listeners: GenericFutureListener&lt;? extends Future&lt;? super Void&gt;&gt;...): DefaultChannelGroupFuture</TD></TR><TR><TD ALIGN="LEFT" >+ setFailure(cause: Throwable): DefaultChannelGroupFuture</TD></TR><TR><TD ALIGN="LEFT" >+ setSuccess(result: Void): DefaultChannelGroupFuture</TD></TR><TR><TD ALIGN="LEFT" >+ sync(): DefaultChannelGroupFuture</TD></TR><TR><TD ALIGN="LEFT" >+ syncUninterruptibly(): DefaultChannelGroupFuture</TD></TR><TR><TD ALIGN="LEFT" >+ tryFailure(cause: Throwable): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ trySuccess(result: Void): boolean</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultChannelHandlerContext1443455697[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultChannelHandlerContext</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   handler: ChannelHandler [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ handler(): ChannelHandler</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultChannelId1443455697[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultChannelId</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   data: byte[] [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   hashCode: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   longValue: String [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   shortValue: String [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >- appendHexDumpField(buf: StringBuilder, i: int, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ asLongText(): String</TD></TR><TR><TD ALIGN="LEFT" >+ asShortText(): String</TD></TR><TR><TD ALIGN="LEFT" >+ compareTo(o: ChannelId): int</TD></TR><TR><TD ALIGN="LEFT" ># defaultProcessId(): int</TD></TR><TR><TD ALIGN="LEFT" ># jmxPid(loader: ClassLoader): int</TD></TR><TR><TD ALIGN="LEFT" >+ newInstance(): DefaultChannelId</TD></TR><TR><TD ALIGN="LEFT" >- newLongValue(): String</TD></TR><TR><TD ALIGN="LEFT" ># processHandlePid(loader: ClassLoader): int</TD></TR><TR><TD ALIGN="LEFT" >- writeInt(i: int, value: int): int</TD></TR><TR><TD ALIGN="LEFT" >- writeLong(i: int, value: long): int</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultChannelPipeline1443455697[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultChannelPipeline</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   channel: Channel [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   childExecutors: Map&lt;EventExecutorGroup, EventExecutor&gt; [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   estimatorHandle: Handle [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   firstRegistration: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >#   head: HeadContext [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   pendingHandlerCallbackHead: PendingHandlerCallback [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   registered: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   succeededFuture: ChannelFuture [0..1]</TD></TR><TR><TD ALIGN="LEFT" >#   tail: TailContext [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   touch: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   voidPromise: VoidChannelPromise [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ addAfter(baseName: String, name: String, handler: ChannelHandler): ChannelPipeline</TD></TR><TR><TD ALIGN="LEFT" >+ addAfter(group: EventExecutorGroup, baseName: String, name: String, handler: ChannelHandler): ChannelPipeline</TD></TR><TR><TD ALIGN="LEFT" >- addAfter0(ctx: AbstractChannelHandlerContext, newCtx: AbstractChannelHandlerContext)</TD></TR><TR><TD ALIGN="LEFT" >+ addBefore(baseName: String, name: String, handler: ChannelHandler): ChannelPipeline</TD></TR><TR><TD ALIGN="LEFT" >+ addBefore(group: EventExecutorGroup, baseName: String, name: String, handler: ChannelHandler): ChannelPipeline</TD></TR><TR><TD ALIGN="LEFT" >- addBefore0(ctx: AbstractChannelHandlerContext, newCtx: AbstractChannelHandlerContext)</TD></TR><TR><TD ALIGN="LEFT" >+ addFirst(name: String, handler: ChannelHandler): ChannelPipeline</TD></TR><TR><TD ALIGN="LEFT" >+ addFirst(group: EventExecutorGroup, name: String, handler: ChannelHandler): ChannelPipeline</TD></TR><TR><TD ALIGN="LEFT" >+ addFirst(handler: ChannelHandler): ChannelPipeline</TD></TR><TR><TD ALIGN="LEFT" >+ addFirst(handlers: ChannelHandler...): ChannelPipeline</TD></TR><TR><TD ALIGN="LEFT" >+ addFirst(executor: EventExecutorGroup, handlers: ChannelHandler...): ChannelPipeline</TD></TR><TR><TD ALIGN="LEFT" >- addFirst0(newCtx: AbstractChannelHandlerContext)</TD></TR><TR><TD ALIGN="LEFT" >+ addLast(name: String, handler: ChannelHandler): ChannelPipeline</TD></TR><TR><TD ALIGN="LEFT" >+ addLast(group: EventExecutorGroup, name: String, handler: ChannelHandler): ChannelPipeline</TD></TR><TR><TD ALIGN="LEFT" >+ addLast(handler: ChannelHandler): ChannelPipeline</TD></TR><TR><TD ALIGN="LEFT" >+ addLast(handlers: ChannelHandler...): ChannelPipeline</TD></TR><TR><TD ALIGN="LEFT" >+ addLast(executor: EventExecutorGroup, handlers: ChannelHandler...): ChannelPipeline</TD></TR><TR><TD ALIGN="LEFT" >- addLast0(newCtx: AbstractChannelHandlerContext)</TD></TR><TR><TD ALIGN="LEFT" >- atomicRemoveFromHandlerList(ctx: AbstractChannelHandlerContext)</TD></TR><TR><TD ALIGN="LEFT" >+ bind(localAddress: SocketAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ bind(localAddress: SocketAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >- callHandlerAdded0(ctx: AbstractChannelHandlerContext)</TD></TR><TR><TD ALIGN="LEFT" >- callHandlerAddedForAllHandlers()</TD></TR><TR><TD ALIGN="LEFT" >- callHandlerAddedInEventLoop(newCtx: AbstractChannelHandlerContext, executor: EventExecutor)</TD></TR><TR><TD ALIGN="LEFT" >- callHandlerCallbackLater(ctx: AbstractChannelHandlerContext, added: boolean)</TD></TR><TR><TD ALIGN="LEFT" >- callHandlerRemoved0(ctx: AbstractChannelHandlerContext)</TD></TR><TR><TD ALIGN="LEFT" >+ channel(): Channel</TD></TR><TR><TD ALIGN="LEFT" >- checkDuplicateName(name: String)</TD></TR><TR><TD ALIGN="LEFT" >- checkMultiplicity(handler: ChannelHandler)</TD></TR><TR><TD ALIGN="LEFT" >- childExecutor(group: EventExecutorGroup): EventExecutor</TD></TR><TR><TD ALIGN="LEFT" >+ close(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ close(promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ connect(remoteAddress: SocketAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ connect(remoteAddress: SocketAddress, localAddress: SocketAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ connect(remoteAddress: SocketAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ connect(remoteAddress: SocketAddress, localAddress: SocketAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ context(name: String): ChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" >+ context(handler: ChannelHandler): ChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" >+ context(handlerType: Class&lt;? extends ChannelHandler&gt;): ChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" >- context0(name: String): AbstractChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" ># decrementPendingOutboundBytes(size: long)</TD></TR><TR><TD ALIGN="LEFT" >+ deregister(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ deregister(promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >- destroy()</TD></TR><TR><TD ALIGN="LEFT" >- destroyDown(currentThread: Thread, ctx: AbstractChannelHandlerContext, inEventLoop: boolean)</TD></TR><TR><TD ALIGN="LEFT" >- destroyUp(ctx: AbstractChannelHandlerContext, inEventLoop: boolean)</TD></TR><TR><TD ALIGN="LEFT" >+ disconnect(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ disconnect(promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" ># estimatorHandle(): Handle</TD></TR><TR><TD ALIGN="LEFT" >- filterName(name: String, handler: ChannelHandler): String</TD></TR><TR><TD ALIGN="LEFT" >+ fireChannelActive(): ChannelPipeline</TD></TR><TR><TD ALIGN="LEFT" >+ fireChannelInactive(): ChannelPipeline</TD></TR><TR><TD ALIGN="LEFT" >+ fireChannelRead(msg: Object): ChannelPipeline</TD></TR><TR><TD ALIGN="LEFT" >+ fireChannelReadComplete(): ChannelPipeline</TD></TR><TR><TD ALIGN="LEFT" >+ fireChannelRegistered(): ChannelPipeline</TD></TR><TR><TD ALIGN="LEFT" >+ fireChannelUnregistered(): ChannelPipeline</TD></TR><TR><TD ALIGN="LEFT" >+ fireChannelWritabilityChanged(): ChannelPipeline</TD></TR><TR><TD ALIGN="LEFT" >+ fireExceptionCaught(cause: Throwable): ChannelPipeline</TD></TR><TR><TD ALIGN="LEFT" >+ fireUserEventTriggered(event: Object): ChannelPipeline</TD></TR><TR><TD ALIGN="LEFT" >+ first(): ChannelHandler</TD></TR><TR><TD ALIGN="LEFT" >+ firstContext(): ChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" >+ flush(): ChannelPipeline</TD></TR><TR><TD ALIGN="LEFT" >- generateName(handler: ChannelHandler): String</TD></TR><TR><TD ALIGN="LEFT" >- generateName0(handlerType: Class&lt;?&gt;): String</TD></TR><TR><TD ALIGN="LEFT" >+ get(name: String): ChannelHandler</TD></TR><TR><TD ALIGN="LEFT" >+ get(handlerType: Class&lt;T&gt;): T</TD></TR><TR><TD ALIGN="LEFT" >- getContextOrDie(name: String): AbstractChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" >- getContextOrDie(handler: ChannelHandler): AbstractChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" >- getContextOrDie(handlerType: Class&lt;? extends ChannelHandler&gt;): AbstractChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" ># incrementPendingOutboundBytes(size: long)</TD></TR><TR><TD ALIGN="LEFT" ># invokeHandlerAddedIfNeeded()</TD></TR><TR><TD ALIGN="LEFT" >+ iterator(): Iterator&lt;Entry&lt;String, ChannelHandler&gt;&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ last(): ChannelHandler</TD></TR><TR><TD ALIGN="LEFT" >+ lastContext(): ChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" >+ names(): List&lt;String&gt;</TD></TR><TR><TD ALIGN="LEFT" >- newContext(group: EventExecutorGroup, name: String, handler: ChannelHandler): AbstractChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" >+ newFailedFuture(cause: Throwable): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ newProgressivePromise(): ChannelProgressivePromise</TD></TR><TR><TD ALIGN="LEFT" >+ newPromise(): ChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ newSucceededFuture(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" ># onUnhandledChannelWritabilityChanged()</TD></TR><TR><TD ALIGN="LEFT" ># onUnhandledInboundChannelActive()</TD></TR><TR><TD ALIGN="LEFT" ># onUnhandledInboundChannelInactive()</TD></TR><TR><TD ALIGN="LEFT" ># onUnhandledInboundChannelReadComplete()</TD></TR><TR><TD ALIGN="LEFT" ># onUnhandledInboundException(cause: Throwable)</TD></TR><TR><TD ALIGN="LEFT" ># onUnhandledInboundMessage(msg: Object)</TD></TR><TR><TD ALIGN="LEFT" ># onUnhandledInboundMessage(ctx: ChannelHandlerContext, msg: Object)</TD></TR><TR><TD ALIGN="LEFT" ># onUnhandledInboundUserEventTriggered(evt: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ read(): ChannelPipeline</TD></TR><TR><TD ALIGN="LEFT" >+ remove(handler: ChannelHandler): ChannelPipeline</TD></TR><TR><TD ALIGN="LEFT" >+ remove(name: String): ChannelHandler</TD></TR><TR><TD ALIGN="LEFT" >+ remove(handlerType: Class&lt;T&gt;): T</TD></TR><TR><TD ALIGN="LEFT" >- remove(ctx: AbstractChannelHandlerContext): AbstractChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" >+ removeFirst(): ChannelHandler</TD></TR><TR><TD ALIGN="LEFT" >+ removeIfExists(name: String): T</TD></TR><TR><TD ALIGN="LEFT" >+ removeIfExists(handlerType: Class&lt;T&gt;): T</TD></TR><TR><TD ALIGN="LEFT" >+ removeIfExists(handler: ChannelHandler): T</TD></TR><TR><TD ALIGN="LEFT" >- removeIfExists(ctx: ChannelHandlerContext): T</TD></TR><TR><TD ALIGN="LEFT" >+ removeLast(): ChannelHandler</TD></TR><TR><TD ALIGN="LEFT" >+ replace(oldHandler: ChannelHandler, newName: String, newHandler: ChannelHandler): ChannelPipeline</TD></TR><TR><TD ALIGN="LEFT" >+ replace(oldName: String, newName: String, newHandler: ChannelHandler): ChannelHandler</TD></TR><TR><TD ALIGN="LEFT" >+ replace(oldHandlerType: Class&lt;T&gt;, newName: String, newHandler: ChannelHandler): T</TD></TR><TR><TD ALIGN="LEFT" >- replace(ctx: AbstractChannelHandlerContext, newName: String, newHandler: ChannelHandler): ChannelHandler</TD></TR><TR><TD ALIGN="LEFT" >- replace0(oldCtx: AbstractChannelHandlerContext, newCtx: AbstractChannelHandlerContext)</TD></TR><TR><TD ALIGN="LEFT" >+ toMap(): Map&lt;String, ChannelHandler&gt;</TD></TR><TR><TD ALIGN="LEFT" ># touch(msg: Object, next: AbstractChannelHandlerContext): Object</TD></TR><TR><TD ALIGN="LEFT" >+ voidPromise(): ChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ write(msg: Object): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ write(msg: Object, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ writeAndFlush(msg: Object, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ writeAndFlush(msg: Object): ChannelFuture</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultChannelProgressivePromise1443455697[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultChannelProgressivePromise</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   channel: Channel [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   checkpoint: long [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ addListener(listener: GenericFutureListener&lt;? extends Future&lt;? super Void&gt;&gt;): ChannelProgressivePromise</TD></TR><TR><TD ALIGN="LEFT" >+ addListeners(listeners: GenericFutureListener&lt;? extends Future&lt;? super Void&gt;&gt;...): ChannelProgressivePromise</TD></TR><TR><TD ALIGN="LEFT" >+ await(): ChannelProgressivePromise</TD></TR><TR><TD ALIGN="LEFT" >+ awaitUninterruptibly(): ChannelProgressivePromise</TD></TR><TR><TD ALIGN="LEFT" >+ channel(): Channel</TD></TR><TR><TD ALIGN="LEFT" ># checkDeadLock()</TD></TR><TR><TD ALIGN="LEFT" ># executor(): EventExecutor</TD></TR><TR><TD ALIGN="LEFT" >+ flushCheckpoint(): long</TD></TR><TR><TD ALIGN="LEFT" >+ flushCheckpoint(checkpoint: long)</TD></TR><TR><TD ALIGN="LEFT" >+ promise(): ChannelProgressivePromise</TD></TR><TR><TD ALIGN="LEFT" >+ removeListener(listener: GenericFutureListener&lt;? extends Future&lt;? super Void&gt;&gt;): ChannelProgressivePromise</TD></TR><TR><TD ALIGN="LEFT" >+ removeListeners(listeners: GenericFutureListener&lt;? extends Future&lt;? super Void&gt;&gt;...): ChannelProgressivePromise</TD></TR><TR><TD ALIGN="LEFT" >+ setFailure(cause: Throwable): ChannelProgressivePromise</TD></TR><TR><TD ALIGN="LEFT" >+ setProgress(progress: long, total: long): ChannelProgressivePromise</TD></TR><TR><TD ALIGN="LEFT" >+ setSuccess(): ChannelProgressivePromise</TD></TR><TR><TD ALIGN="LEFT" >+ setSuccess(result: Void): ChannelProgressivePromise</TD></TR><TR><TD ALIGN="LEFT" >+ sync(): ChannelProgressivePromise</TD></TR><TR><TD ALIGN="LEFT" >+ syncUninterruptibly(): ChannelProgressivePromise</TD></TR><TR><TD ALIGN="LEFT" >+ trySuccess(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ unvoid(): ChannelProgressivePromise</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultChannelPromise1443455697[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultChannelPromise</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   channel: Channel [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   checkpoint: long [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ addListener(listener: GenericFutureListener&lt;? extends Future&lt;? super Void&gt;&gt;): ChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ addListeners(listeners: GenericFutureListener&lt;? extends Future&lt;? super Void&gt;&gt;...): ChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ await(): ChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ awaitUninterruptibly(): ChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ channel(): Channel</TD></TR><TR><TD ALIGN="LEFT" ># checkDeadLock()</TD></TR><TR><TD ALIGN="LEFT" ># executor(): EventExecutor</TD></TR><TR><TD ALIGN="LEFT" >+ flushCheckpoint(): long</TD></TR><TR><TD ALIGN="LEFT" >+ flushCheckpoint(checkpoint: long)</TD></TR><TR><TD ALIGN="LEFT" >+ promise(): ChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ removeListener(listener: GenericFutureListener&lt;? extends Future&lt;? super Void&gt;&gt;): ChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ removeListeners(listeners: GenericFutureListener&lt;? extends Future&lt;? super Void&gt;&gt;...): ChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ setFailure(cause: Throwable): ChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ setSuccess(): ChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ setSuccess(result: Void): ChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ sync(): ChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ syncUninterruptibly(): ChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ trySuccess(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ unvoid(): ChannelPromise</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultDatagramChannelConfig871578350[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultDatagramChannelConfig</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   activeOnOpen: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   javaSocket: DatagramSocket [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ getOption(option: ChannelOption&lt;T&gt;): T</TD></TR><TR><TD ALIGN="LEFT" ># javaSocket(): DatagramSocket</TD></TR><TR><TD ALIGN="LEFT" >+ setAllocator(allocator: ByteBufAllocator): DatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAutoClose(autoClose: boolean): DatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAutoRead(autoRead: boolean): DatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setBroadcast(broadcast: boolean): DatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setConnectTimeoutMillis(connectTimeoutMillis: int): DatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setInterface(interfaceAddress: InetAddress): DatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setLoopbackModeDisabled(loopbackModeDisabled: boolean): DatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMaxMessagesPerRead(maxMessagesPerRead: int): DatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMaxMessagesPerWrite(maxMessagesPerWrite: int): DatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMessageSizeEstimator(estimator: MessageSizeEstimator): DatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setNetworkInterface(networkInterface: NetworkInterface): DatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setOption(option: ChannelOption&lt;T&gt;, value: T): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ setReceiveBufferSize(receiveBufferSize: int): DatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setRecvByteBufAllocator(allocator: RecvByteBufAllocator): DatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setReuseAddress(reuseAddress: boolean): DatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setSendBufferSize(sendBufferSize: int): DatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setTimeToLive(ttl: int): DatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setTrafficClass(trafficClass: int): DatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferHighWaterMark(writeBufferHighWaterMark: int): DatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferLowWaterMark(writeBufferLowWaterMark: int): DatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferWaterMark(writeBufferWaterMark: WriteBufferWaterMark): DatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteSpinCount(writeSpinCount: int): DatagramChannelConfig</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultEventLoop1443455697[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultEventLoop</TD></TR><HR/><TR><TD ALIGN="LEFT" ># run()</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultFileRegion1443455697[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultFileRegion</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   count: long [1]</TD></TR><TR><TD ALIGN="LEFT" >-   f: File [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   file: FileChannel [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   position: long [1]</TD></TR><TR><TD ALIGN="LEFT" >-   transferred: long [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ count(): long</TD></TR><TR><TD ALIGN="LEFT" ># deallocate()</TD></TR><TR><TD ALIGN="LEFT" >+ open()</TD></TR><TR><TD ALIGN="LEFT" >+ position(): long</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): FileRegion</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): FileRegion</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): FileRegion</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): FileRegion</TD></TR><TR><TD ALIGN="LEFT" >+ transferTo(target: WritableByteChannel, position: long): long</TD></TR><TR><TD ALIGN="LEFT" >+ transfered(): long</TD></TR><TR><TD ALIGN="LEFT" >+ transferred(): long</TD></TR><TR><TD ALIGN="LEFT" ># validate(region: DefaultFileRegion, position: long)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultMaxBytesRecvByteBufAllocator1443455697[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultMaxBytesRecvByteBufAllocator</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   maxBytesPerIndividualRead: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   maxBytesPerRead: int [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >- checkMaxBytesPerReadPair(maxBytesPerRead: int, maxBytesPerIndividualRead: int)</TD></TR><TR><TD ALIGN="LEFT" >+ maxBytesPerIndividualRead(): int</TD></TR><TR><TD ALIGN="LEFT" >+ maxBytesPerIndividualRead(maxBytesPerIndividualRead: int): DefaultMaxBytesRecvByteBufAllocator</TD></TR><TR><TD ALIGN="LEFT" >+ maxBytesPerRead(): int</TD></TR><TR><TD ALIGN="LEFT" >+ maxBytesPerRead(maxBytesPerRead: int): DefaultMaxBytesRecvByteBufAllocator</TD></TR><TR><TD ALIGN="LEFT" >+ maxBytesPerReadPair(): Entry&lt;Integer, Integer&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ maxBytesPerReadPair(maxBytesPerRead: int, maxBytesPerIndividualRead: int): DefaultMaxBytesRecvByteBufAllocator</TD></TR><TR><TD ALIGN="LEFT" >+ newHandle(): Handle</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultMaxMessagesRecvByteBufAllocator1443455697[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultMaxMessagesRecvByteBufAllocator</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   ignoreBytesRead: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   maxMessagesPerRead: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   respectMaybeMoreData: boolean [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ maxMessagesPerRead(): int</TD></TR><TR><TD ALIGN="LEFT" >+ maxMessagesPerRead(maxMessagesPerRead: int): MaxMessagesRecvByteBufAllocator</TD></TR><TR><TD ALIGN="LEFT" >+ respectMaybeMoreData(respectMaybeMoreData: boolean): DefaultMaxMessagesRecvByteBufAllocator</TD></TR><TR><TD ALIGN="LEFT" >+ respectMaybeMoreData(): boolean</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultOioDatagramChannelConfig1086946567[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultOioDatagramChannelConfig</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ getOption(option: ChannelOption&lt;T&gt;): T</TD></TR><TR><TD ALIGN="LEFT" >+ setAllocator(allocator: ByteBufAllocator): OioDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAutoClose(autoClose: boolean): OioDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAutoRead(autoRead: boolean): OioDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setBroadcast(broadcast: boolean): OioDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setConnectTimeoutMillis(connectTimeoutMillis: int): OioDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setInterface(interfaceAddress: InetAddress): OioDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setLoopbackModeDisabled(loopbackModeDisabled: boolean): OioDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMaxMessagesPerRead(maxMessagesPerRead: int): OioDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMessageSizeEstimator(estimator: MessageSizeEstimator): OioDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setNetworkInterface(networkInterface: NetworkInterface): OioDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setOption(option: ChannelOption&lt;T&gt;, value: T): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ setReceiveBufferSize(receiveBufferSize: int): OioDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setRecvByteBufAllocator(allocator: RecvByteBufAllocator): OioDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setReuseAddress(reuseAddress: boolean): OioDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setSendBufferSize(sendBufferSize: int): OioDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setSoTimeout(timeout: int): OioDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setTimeToLive(ttl: int): OioDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setTrafficClass(trafficClass: int): OioDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferHighWaterMark(writeBufferHighWaterMark: int): OioDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferLowWaterMark(writeBufferLowWaterMark: int): OioDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferWaterMark(writeBufferWaterMark: WriteBufferWaterMark): OioDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteSpinCount(writeSpinCount: int): OioDatagramChannelConfig</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultOioServerSocketChannelConfig1086946567[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultOioServerSocketChannelConfig</TD></TR><HR/><TR><TD ALIGN="LEFT" ># autoReadCleared()</TD></TR><TR><TD ALIGN="LEFT" >+ getOption(option: ChannelOption&lt;T&gt;): T</TD></TR><TR><TD ALIGN="LEFT" >+ setAllocator(allocator: ByteBufAllocator): OioServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAutoClose(autoClose: boolean): OioServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAutoRead(autoRead: boolean): OioServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setBacklog(backlog: int): OioServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setConnectTimeoutMillis(connectTimeoutMillis: int): OioServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMaxMessagesPerRead(maxMessagesPerRead: int): OioServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMessageSizeEstimator(estimator: MessageSizeEstimator): OioServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setOption(option: ChannelOption&lt;T&gt;, value: T): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ setPerformancePreferences(connectionTime: int, latency: int, bandwidth: int): OioServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setReceiveBufferSize(receiveBufferSize: int): OioServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setRecvByteBufAllocator(allocator: RecvByteBufAllocator): OioServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setReuseAddress(reuseAddress: boolean): OioServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setSoTimeout(timeout: int): OioServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferHighWaterMark(writeBufferHighWaterMark: int): OioServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferLowWaterMark(writeBufferLowWaterMark: int): OioServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferWaterMark(writeBufferWaterMark: WriteBufferWaterMark): OioServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteSpinCount(writeSpinCount: int): OioServerSocketChannelConfig</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultOioSocketChannelConfig1086946567[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultOioSocketChannelConfig</TD></TR><HR/><TR><TD ALIGN="LEFT" ># autoReadCleared()</TD></TR><TR><TD ALIGN="LEFT" >+ getOption(option: ChannelOption&lt;T&gt;): T</TD></TR><TR><TD ALIGN="LEFT" >+ setAllocator(allocator: ByteBufAllocator): OioSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAllowHalfClosure(allowHalfClosure: boolean): OioSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAutoClose(autoClose: boolean): OioSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAutoRead(autoRead: boolean): OioSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setConnectTimeoutMillis(connectTimeoutMillis: int): OioSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setKeepAlive(keepAlive: boolean): OioSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMaxMessagesPerRead(maxMessagesPerRead: int): OioSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMessageSizeEstimator(estimator: MessageSizeEstimator): OioSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setOption(option: ChannelOption&lt;T&gt;, value: T): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ setPerformancePreferences(connectionTime: int, latency: int, bandwidth: int): OioSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setReceiveBufferSize(receiveBufferSize: int): OioSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setRecvByteBufAllocator(allocator: RecvByteBufAllocator): OioSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setReuseAddress(reuseAddress: boolean): OioSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setSendBufferSize(sendBufferSize: int): OioSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setSoLinger(soLinger: int): OioSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setSoTimeout(timeout: int): OioSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setTcpNoDelay(tcpNoDelay: boolean): OioSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setTrafficClass(trafficClass: int): OioSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferHighWaterMark(writeBufferHighWaterMark: int): OioSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferLowWaterMark(writeBufferLowWaterMark: int): OioSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferWaterMark(writeBufferWaterMark: WriteBufferWaterMark): OioSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteSpinCount(writeSpinCount: int): OioSocketChannelConfig</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultOioUnsafe100594776[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultOioUnsafe</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ connect(remoteAddress: SocketAddress, localAddress: SocketAddress, promise: ChannelPromise)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultRxtxChannelConfig1536500905[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultRxtxChannelConfig</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   baudrate: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   databits: Databits [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   dtr: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   paritybit: Paritybit [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   readTimeout: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   rts: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   stopbits: Stopbits [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   waitTime: int [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ getOption(option: ChannelOption&lt;T&gt;): T</TD></TR><TR><TD ALIGN="LEFT" >+ setAllocator(allocator: ByteBufAllocator): RxtxChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAutoClose(autoClose: boolean): RxtxChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAutoRead(autoRead: boolean): RxtxChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setBaudrate(baudrate: int): RxtxChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setConnectTimeoutMillis(connectTimeoutMillis: int): RxtxChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setDatabits(databits: Databits): RxtxChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setDtr(dtr: boolean): RxtxChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMaxMessagesPerRead(maxMessagesPerRead: int): RxtxChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMessageSizeEstimator(estimator: MessageSizeEstimator): RxtxChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setOption(option: ChannelOption&lt;T&gt;, value: T): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ setParitybit(paritybit: Paritybit): RxtxChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setReadTimeout(readTimeout: int): RxtxChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setRecvByteBufAllocator(allocator: RecvByteBufAllocator): RxtxChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setRts(rts: boolean): RxtxChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setStopbits(stopbits: Stopbits): RxtxChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWaitTimeMillis(waitTimeMillis: int): RxtxChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferHighWaterMark(writeBufferHighWaterMark: int): RxtxChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferLowWaterMark(writeBufferLowWaterMark: int): RxtxChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferWaterMark(writeBufferWaterMark: WriteBufferWaterMark): RxtxChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteSpinCount(writeSpinCount: int): RxtxChannelConfig</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultSctpChannelConfig1536510507[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultSctpChannelConfig</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   javaChannel: SctpChannel [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ getOption(option: ChannelOption&lt;T&gt;): T</TD></TR><TR><TD ALIGN="LEFT" >+ setAllocator(allocator: ByteBufAllocator): SctpChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAutoClose(autoClose: boolean): SctpChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAutoRead(autoRead: boolean): SctpChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setConnectTimeoutMillis(connectTimeoutMillis: int): SctpChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setInitMaxStreams(initMaxStreams: InitMaxStreams): SctpChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMaxMessagesPerRead(maxMessagesPerRead: int): SctpChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMessageSizeEstimator(estimator: MessageSizeEstimator): SctpChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setOption(option: ChannelOption&lt;T&gt;, value: T): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ setReceiveBufferSize(receiveBufferSize: int): SctpChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setRecvByteBufAllocator(allocator: RecvByteBufAllocator): SctpChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setSctpNoDelay(sctpNoDelay: boolean): SctpChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setSendBufferSize(sendBufferSize: int): SctpChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferHighWaterMark(writeBufferHighWaterMark: int): SctpChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferLowWaterMark(writeBufferLowWaterMark: int): SctpChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferWaterMark(writeBufferWaterMark: WriteBufferWaterMark): SctpChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteSpinCount(writeSpinCount: int): SctpChannelConfig</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultSctpServerChannelConfig1536510507[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultSctpServerChannelConfig</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   backlog: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   javaChannel: SctpServerChannel [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ getOption(option: ChannelOption&lt;T&gt;): T</TD></TR><TR><TD ALIGN="LEFT" >+ setAllocator(allocator: ByteBufAllocator): SctpServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAutoClose(autoClose: boolean): SctpServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAutoRead(autoRead: boolean): SctpServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setBacklog(backlog: int): SctpServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setConnectTimeoutMillis(connectTimeoutMillis: int): SctpServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setInitMaxStreams(initMaxStreams: InitMaxStreams): SctpServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMaxMessagesPerRead(maxMessagesPerRead: int): SctpServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMessageSizeEstimator(estimator: MessageSizeEstimator): SctpServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setOption(option: ChannelOption&lt;T&gt;, value: T): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ setReceiveBufferSize(receiveBufferSize: int): SctpServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setRecvByteBufAllocator(allocator: RecvByteBufAllocator): SctpServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setSendBufferSize(sendBufferSize: int): SctpServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferHighWaterMark(writeBufferHighWaterMark: int): SctpServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferLowWaterMark(writeBufferLowWaterMark: int): SctpServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferWaterMark(writeBufferWaterMark: WriteBufferWaterMark): SctpServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteSpinCount(writeSpinCount: int): SctpServerChannelConfig</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultSelectStrategy1443455697[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultSelectStrategy</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ calculateStrategy(selectSupplier: IntSupplier, hasTasks: boolean): int</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultServerSocketChannelConfig871578350[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultServerSocketChannelConfig</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   backlog: int [1]</TD></TR><TR><TD ALIGN="LEFT" >#   javaSocket: ServerSocket [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ getOption(option: ChannelOption&lt;T&gt;): T</TD></TR><TR><TD ALIGN="LEFT" >+ setAllocator(allocator: ByteBufAllocator): ServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAutoRead(autoRead: boolean): ServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setBacklog(backlog: int): ServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setConnectTimeoutMillis(connectTimeoutMillis: int): ServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMaxMessagesPerRead(maxMessagesPerRead: int): ServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMessageSizeEstimator(estimator: MessageSizeEstimator): ServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setOption(option: ChannelOption&lt;T&gt;, value: T): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ setPerformancePreferences(connectionTime: int, latency: int, bandwidth: int): ServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setReceiveBufferSize(receiveBufferSize: int): ServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setRecvByteBufAllocator(allocator: RecvByteBufAllocator): ServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setReuseAddress(reuseAddress: boolean): ServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferHighWaterMark(writeBufferHighWaterMark: int): ServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferLowWaterMark(writeBufferLowWaterMark: int): ServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferWaterMark(writeBufferWaterMark: WriteBufferWaterMark): ServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteSpinCount(writeSpinCount: int): ServerSocketChannelConfig</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultServerUnsafe904617057[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultServerUnsafe</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ connect(remoteAddress: SocketAddress, localAddress: SocketAddress, promise: ChannelPromise)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultSocketChannelConfig871578350[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultSocketChannelConfig</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   allowHalfClosure: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >#   javaSocket: Socket [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ getOption(option: ChannelOption&lt;T&gt;): T</TD></TR><TR><TD ALIGN="LEFT" >+ setAllocator(allocator: ByteBufAllocator): SocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAllowHalfClosure(allowHalfClosure: boolean): SocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAutoClose(autoClose: boolean): SocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAutoRead(autoRead: boolean): SocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setConnectTimeoutMillis(connectTimeoutMillis: int): SocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setKeepAlive(keepAlive: boolean): SocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMaxMessagesPerRead(maxMessagesPerRead: int): SocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMessageSizeEstimator(estimator: MessageSizeEstimator): SocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setOption(option: ChannelOption&lt;T&gt;, value: T): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ setPerformancePreferences(connectionTime: int, latency: int, bandwidth: int): SocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setReceiveBufferSize(receiveBufferSize: int): SocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setRecvByteBufAllocator(allocator: RecvByteBufAllocator): SocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setReuseAddress(reuseAddress: boolean): SocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setSendBufferSize(sendBufferSize: int): SocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setSoLinger(soLinger: int): SocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setTcpNoDelay(tcpNoDelay: boolean): SocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setTrafficClass(trafficClass: int): SocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferHighWaterMark(writeBufferHighWaterMark: int): SocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferLowWaterMark(writeBufferLowWaterMark: int): SocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferWaterMark(writeBufferWaterMark: WriteBufferWaterMark): SocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteSpinCount(writeSpinCount: int): SocketChannelConfig</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultUdtChannelConfig1712134790[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultUdtChannelConfig</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   allocatorReceiveBufferSize: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   allocatorSendBufferSize: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   protocolReceiveBufferSize: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   protocolSendBufferSize: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   reuseAddress: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   soLinger: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   systemReceiveBufferSize: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   systemSendBufferSize: int [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" ># apply(channelUDT: ChannelUDT)</TD></TR><TR><TD ALIGN="LEFT" >+ getOption(option: ChannelOption&lt;T&gt;): T</TD></TR><TR><TD ALIGN="LEFT" >+ setAllocator(allocator: ByteBufAllocator): UdtChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAutoClose(autoClose: boolean): UdtChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAutoRead(autoRead: boolean): UdtChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setConnectTimeoutMillis(connectTimeoutMillis: int): UdtChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMaxMessagesPerRead(maxMessagesPerRead: int): UdtChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMessageSizeEstimator(estimator: MessageSizeEstimator): UdtChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setOption(option: ChannelOption&lt;T&gt;, value: T): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ setProtocolReceiveBufferSize(protocolReceiveBufferSize: int): UdtChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setProtocolSendBufferSize(protocolSendBufferSize: int): UdtChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setReceiveBufferSize(receiveBufferSize: int): UdtChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setRecvByteBufAllocator(allocator: RecvByteBufAllocator): UdtChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setReuseAddress(reuseAddress: boolean): UdtChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setSendBufferSize(sendBufferSize: int): UdtChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setSoLinger(soLinger: int): UdtChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setSystemReceiveBufferSize(systemReceiveBufferSize: int): UdtChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setSystemSendBufferSize(systemSendBufferSize: int): UdtChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferHighWaterMark(writeBufferHighWaterMark: int): UdtChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferLowWaterMark(writeBufferLowWaterMark: int): UdtChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferWaterMark(writeBufferWaterMark: WriteBufferWaterMark): UdtChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteSpinCount(writeSpinCount: int): UdtChannelConfig</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultUdtServerChannelConfig1712134790[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultUdtServerChannelConfig</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   backlog: int [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" ># apply(channelUDT: ChannelUDT)</TD></TR><TR><TD ALIGN="LEFT" >+ getOption(option: ChannelOption&lt;T&gt;): T</TD></TR><TR><TD ALIGN="LEFT" >+ setAllocator(allocator: ByteBufAllocator): UdtServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAutoClose(autoClose: boolean): UdtServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAutoRead(autoRead: boolean): UdtServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setBacklog(backlog: int): UdtServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setConnectTimeoutMillis(connectTimeoutMillis: int): UdtServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMaxMessagesPerRead(maxMessagesPerRead: int): UdtServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMessageSizeEstimator(estimator: MessageSizeEstimator): UdtServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setOption(option: ChannelOption&lt;T&gt;, value: T): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ setProtocolReceiveBufferSize(protocolReceiveBufferSize: int): UdtServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setProtocolSendBufferSize(protocolSendBufferSize: int): UdtServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setReceiveBufferSize(receiveBufferSize: int): UdtServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setRecvByteBufAllocator(allocator: RecvByteBufAllocator): UdtServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setReuseAddress(reuseAddress: boolean): UdtServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setSendBufferSize(sendBufferSize: int): UdtServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setSoLinger(soLinger: int): UdtServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setSystemReceiveBufferSize(systemReceiveBufferSize: int): UdtServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setSystemSendBufferSize(systemSendBufferSize: int): UdtServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferHighWaterMark(writeBufferHighWaterMark: int): UdtServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferLowWaterMark(writeBufferLowWaterMark: int): UdtServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferWaterMark(writeBufferWaterMark: WriteBufferWaterMark): UdtServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteSpinCount(writeSpinCount: int): UdtServerChannelConfig</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DelegatingChannelHandlerContext1641065909[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DelegatingChannelHandlerContext</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   ctx: ChannelHandlerContext [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   handler: ChannelHandler [0..1]</TD></TR><TR><TD ALIGN="LEFT" >#   removed: boolean [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ alloc(): ByteBufAllocator</TD></TR><TR><TD ALIGN="LEFT" >+ attr(key: AttributeKey&lt;T&gt;): Attribute&lt;T&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ bind(localAddress: SocketAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ bind(localAddress: SocketAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ channel(): Channel</TD></TR><TR><TD ALIGN="LEFT" >+ close(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ close(promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ connect(remoteAddress: SocketAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ connect(remoteAddress: SocketAddress, localAddress: SocketAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ connect(remoteAddress: SocketAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ connect(remoteAddress: SocketAddress, localAddress: SocketAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ deregister(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ deregister(promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ disconnect(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ disconnect(promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ executor(): EventExecutor</TD></TR><TR><TD ALIGN="LEFT" >+ fireChannelActive(): ChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" >+ fireChannelInactive(): ChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" >+ fireChannelRead(msg: Object): ChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" >+ fireChannelReadComplete(): ChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" >+ fireChannelRegistered(): ChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" >+ fireChannelUnregistered(): ChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" >+ fireChannelWritabilityChanged(): ChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" >+ fireExceptionCaught(cause: Throwable): ChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" >+ fireUserEventTriggered(event: Object): ChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" >+ flush(): ChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" >+ handler(): ChannelHandler</TD></TR><TR><TD ALIGN="LEFT" >+ hasAttr(key: AttributeKey&lt;T&gt;): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ name(): String</TD></TR><TR><TD ALIGN="LEFT" >+ newFailedFuture(cause: Throwable): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ newProgressivePromise(): ChannelProgressivePromise</TD></TR><TR><TD ALIGN="LEFT" >+ newPromise(): ChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ newSucceededFuture(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ pipeline(): ChannelPipeline</TD></TR><TR><TD ALIGN="LEFT" >+ read(): ChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" ># remove()</TD></TR><TR><TD ALIGN="LEFT" >- remove0()</TD></TR><TR><TD ALIGN="LEFT" >+ voidPromise(): ChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ write(msg: Object): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ write(msg: Object, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ writeAndFlush(msg: Object, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ writeAndFlush(msg: Object): ChannelFuture</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DelegatingChannelPromiseNotifier1443455697[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DelegatingChannelPromiseNotifier</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   delegate: ChannelPromise [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   logNotifyFailure: boolean [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ addListener(listener: GenericFutureListener&lt;? extends Future&lt;? super Void&gt;&gt;): ChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ addListeners(listeners: GenericFutureListener&lt;? extends Future&lt;? super Void&gt;&gt;...): ChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ await(): ChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ await(timeout: long, unit: TimeUnit): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ await(timeoutMillis: long): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ awaitUninterruptibly(): ChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ awaitUninterruptibly(timeout: long, unit: TimeUnit): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ awaitUninterruptibly(timeoutMillis: long): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ cancel(mayInterruptIfRunning: boolean): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ cause(): Throwable</TD></TR><TR><TD ALIGN="LEFT" >+ channel(): Channel</TD></TR><TR><TD ALIGN="LEFT" >+ get(timeout: long, unit: TimeUnit): Void</TD></TR><TR><TD ALIGN="LEFT" >+ operationComplete(future: ChannelFuture)</TD></TR><TR><TD ALIGN="LEFT" >+ removeListener(listener: GenericFutureListener&lt;? extends Future&lt;? super Void&gt;&gt;): ChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ removeListeners(listeners: GenericFutureListener&lt;? extends Future&lt;? super Void&gt;&gt;...): ChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ setFailure(cause: Throwable): ChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ setSuccess(result: Void): ChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ setSuccess(): ChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ setUncancellable(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ sync(): ChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ syncUninterruptibly(): ChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ tryFailure(cause: Throwable): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ trySuccess(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ trySuccess(result: Void): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ unvoid(): ChannelPromise</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DelegatingHandle894525563[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DelegatingHandle</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   delegate: Handle [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ allocate(alloc: ByteBufAllocator): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ attemptedBytesRead(): int</TD></TR><TR><TD ALIGN="LEFT" >+ attemptedBytesRead(bytes: int)</TD></TR><TR><TD ALIGN="LEFT" >+ continueReading(): boolean</TD></TR><TR><TD ALIGN="LEFT" ># delegate(): Handle</TD></TR><TR><TD ALIGN="LEFT" >+ guess(): int</TD></TR><TR><TD ALIGN="LEFT" >+ incMessagesRead(numMessages: int)</TD></TR><TR><TD ALIGN="LEFT" >+ lastBytesRead(bytes: int)</TD></TR><TR><TD ALIGN="LEFT" >+ lastBytesRead(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readComplete()</TD></TR><TR><TD ALIGN="LEFT" >+ reset(config: ChannelConfig)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DomainDatagramPacket1536580327[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DomainDatagramPacket</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ copy(): DomainDatagramPacket</TD></TR><TR><TD ALIGN="LEFT" >+ duplicate(): DomainDatagramPacket</TD></TR><TR><TD ALIGN="LEFT" >+ replace(content: ByteBuf): DomainDatagramPacket</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): DomainDatagramPacket</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): DomainDatagramPacket</TD></TR><TR><TD ALIGN="LEFT" >+ retainedDuplicate(): DomainDatagramPacket</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): DomainDatagramPacket</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): DomainDatagramPacket</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];EmbeddedChannel506932119[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)EmbeddedChannel</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   config: ChannelConfig [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   inboundMessages: Queue&lt;Object&gt; [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   lastException: Throwable [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   loop: EmbeddedEventLoop [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   metadata: ChannelMetadata [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   outboundMessages: Queue&lt;Object&gt; [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   recordExceptionListener: ChannelFutureListener [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   state: State [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ advanceTimeBy(duration: long, unit: TimeUnit)</TD></TR><TR><TD ALIGN="LEFT" >- checkException(promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ checkException()</TD></TR><TR><TD ALIGN="LEFT" >- checkOpen(recordException: boolean): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ close(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ close(promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ config(): ChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ disconnect(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ disconnect(promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" ># doBeginRead()</TD></TR><TR><TD ALIGN="LEFT" ># doBind(localAddress: SocketAddress)</TD></TR><TR><TD ALIGN="LEFT" ># doClose()</TD></TR><TR><TD ALIGN="LEFT" ># doDisconnect()</TD></TR><TR><TD ALIGN="LEFT" ># doRegister()</TD></TR><TR><TD ALIGN="LEFT" ># doWrite(in: ChannelOutboundBuffer)</TD></TR><TR><TD ALIGN="LEFT" >- embeddedEventLoop(): EmbeddedEventLoop</TD></TR><TR><TD ALIGN="LEFT" ># ensureOpen()</TD></TR><TR><TD ALIGN="LEFT" >+ finish(): boolean</TD></TR><TR><TD ALIGN="LEFT" >- finish(releaseAll: boolean): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ finishAndReleaseAll(): boolean</TD></TR><TR><TD ALIGN="LEFT" >- finishPendingTasks(cancel: boolean)</TD></TR><TR><TD ALIGN="LEFT" >+ flushInbound(): EmbeddedChannel</TD></TR><TR><TD ALIGN="LEFT" >- flushInbound(recordException: boolean, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ flushOutbound(): EmbeddedChannel</TD></TR><TR><TD ALIGN="LEFT" >- flushOutbound0()</TD></TR><TR><TD ALIGN="LEFT" >+ freezeTime()</TD></TR><TR><TD ALIGN="LEFT" ># handleInboundMessage(msg: Object)</TD></TR><TR><TD ALIGN="LEFT" ># handleOutboundMessage(msg: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ inboundMessages(): Queue&lt;Object&gt;</TD></TR><TR><TD ALIGN="LEFT" ># isCompatible(loop: EventLoop): boolean</TD></TR><TR><TD ALIGN="LEFT" >- isNotEmpty(queue: Queue&lt;Object&gt;): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ lastInboundBuffer(): Queue&lt;Object&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ lastOutboundBuffer(): Queue&lt;Object&gt;</TD></TR><TR><TD ALIGN="LEFT" ># localAddress0(): SocketAddress</TD></TR><TR><TD ALIGN="LEFT" >- metadata(hasDisconnect: boolean): ChannelMetadata</TD></TR><TR><TD ALIGN="LEFT" >+ metadata(): ChannelMetadata</TD></TR><TR><TD ALIGN="LEFT" ># newChannelPipeline(): DefaultChannelPipeline</TD></TR><TR><TD ALIGN="LEFT" ># newUnsafe(): AbstractUnsafe</TD></TR><TR><TD ALIGN="LEFT" >+ outboundMessages(): Queue&lt;Object&gt;</TD></TR><TR><TD ALIGN="LEFT" >- poll(queue: Queue&lt;Object&gt;): Object</TD></TR><TR><TD ALIGN="LEFT" >+ readInbound(): T</TD></TR><TR><TD ALIGN="LEFT" >+ readOutbound(): T</TD></TR><TR><TD ALIGN="LEFT" >- recordException(future: ChannelFuture)</TD></TR><TR><TD ALIGN="LEFT" >- recordException(cause: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >+ register()</TD></TR><TR><TD ALIGN="LEFT" >- releaseAll(queue: Queue&lt;Object&gt;): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ releaseInbound(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ releaseOutbound(): boolean</TD></TR><TR><TD ALIGN="LEFT" ># remoteAddress0(): SocketAddress</TD></TR><TR><TD ALIGN="LEFT" >+ runPendingTasks()</TD></TR><TR><TD ALIGN="LEFT" >+ runScheduledPendingTasks(): long</TD></TR><TR><TD ALIGN="LEFT" >+ unfreezeTime()</TD></TR><TR><TD ALIGN="LEFT" >+ unsafe(): Unsafe</TD></TR><TR><TD ALIGN="LEFT" >+ writeInbound(msgs: Object...): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ writeOneInbound(msg: Object): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ writeOneInbound(msg: Object, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ writeOneOutbound(msg: Object): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ writeOneOutbound(msg: Object, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ writeOutbound(msgs: Object...): boolean</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];EmbeddedChannelId506932119[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)EmbeddedChannelId</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ asLongText(): String</TD></TR><TR><TD ALIGN="LEFT" >+ asShortText(): String</TD></TR><TR><TD ALIGN="LEFT" >+ compareTo(o: ChannelId): int</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];EmbeddedEventLoop506932119[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)EmbeddedEventLoop</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   frozenTimestamp: long [1]</TD></TR><TR><TD ALIGN="LEFT" >-   startTime: long [1]</TD></TR><TR><TD ALIGN="LEFT" >-   tasks: Queue&lt;Runnable&gt; [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   timeFrozen: boolean [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" ># advanceTimeBy(nanos: long)</TD></TR><TR><TD ALIGN="LEFT" >+ awaitTermination(timeout: long, unit: TimeUnit): boolean</TD></TR><TR><TD ALIGN="LEFT" ># cancelScheduledTasks()</TD></TR><TR><TD ALIGN="LEFT" >+ execute(command: Runnable)</TD></TR><TR><TD ALIGN="LEFT" ># freezeTime()</TD></TR><TR><TD ALIGN="LEFT" >+ inEventLoop(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ inEventLoop(thread: Thread): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ next(): EventLoop</TD></TR><TR><TD ALIGN="LEFT" ># nextScheduledTask(): long</TD></TR><TR><TD ALIGN="LEFT" >+ parent(): EventLoopGroup</TD></TR><TR><TD ALIGN="LEFT" >+ register(channel: Channel): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ register(promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ register(channel: Channel, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" ># runScheduledTasks(): long</TD></TR><TR><TD ALIGN="LEFT" ># runTasks()</TD></TR><TR><TD ALIGN="LEFT" >+ shutdown()</TD></TR><TR><TD ALIGN="LEFT" >+ shutdownGracefully(quietPeriod: long, timeout: long, unit: TimeUnit): Future&lt;?&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ terminationFuture(): Future&lt;?&gt;</TD></TR><TR><TD ALIGN="LEFT" ># unfreezeTime()</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];EmbeddedUnsafe1902943372[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)EmbeddedUnsafe</TD></TR><HR/><TR><TD ALIGN="LEFT" >#   wrapped: Unsafe [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ connect(remoteAddress: SocketAddress, localAddress: SocketAddress, promise: ChannelPromise)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];EpollDatagramChannel374638629[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)EpollDatagramChannel</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   config: EpollDatagramChannelConfig [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   connected: boolean [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >- addDatagramPacketToOut(packet: DatagramPacket, out: RecyclableArrayList)</TD></TR><TR><TD ALIGN="LEFT" >+ block(multicastAddress: InetAddress, networkInterface: NetworkInterface, sourceToBlock: InetAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ block(multicastAddress: InetAddress, networkInterface: NetworkInterface, sourceToBlock: InetAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ block(multicastAddress: InetAddress, sourceToBlock: InetAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ block(multicastAddress: InetAddress, sourceToBlock: InetAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >- checkUnresolved(envelope: AddressedEnvelope&lt;?, ?&gt;)</TD></TR><TR><TD ALIGN="LEFT" >- cleanDatagramPacketArray(): NativeDatagramPacketArray</TD></TR><TR><TD ALIGN="LEFT" >+ config(): EpollDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >- connectedRead(allocHandle: EpollRecvByteAllocatorHandle, byteBuf: ByteBuf, maxDatagramPacketSize: int): boolean</TD></TR><TR><TD ALIGN="LEFT" ># doBind(localAddress: SocketAddress)</TD></TR><TR><TD ALIGN="LEFT" ># doClose()</TD></TR><TR><TD ALIGN="LEFT" ># doConnect(remoteAddress: SocketAddress, localAddress: SocketAddress): boolean</TD></TR><TR><TD ALIGN="LEFT" ># doDisconnect()</TD></TR><TR><TD ALIGN="LEFT" ># doWrite(in: ChannelOutboundBuffer)</TD></TR><TR><TD ALIGN="LEFT" >- doWriteMessage(msg: Object): boolean</TD></TR><TR><TD ALIGN="LEFT" ># filterOutboundMessage(msg: Object): Object</TD></TR><TR><TD ALIGN="LEFT" >+ joinGroup(multicastAddress: InetAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ joinGroup(multicastAddress: InetAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ joinGroup(multicastAddress: InetSocketAddress, networkInterface: NetworkInterface): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ joinGroup(multicastAddress: InetSocketAddress, networkInterface: NetworkInterface, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ joinGroup(multicastAddress: InetAddress, networkInterface: NetworkInterface, source: InetAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ joinGroup(multicastAddress: InetAddress, networkInterface: NetworkInterface, source: InetAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >- joinGroup0(multicastAddress: InetAddress, networkInterface: NetworkInterface, source: InetAddress, promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >+ leaveGroup(multicastAddress: InetAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ leaveGroup(multicastAddress: InetAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ leaveGroup(multicastAddress: InetSocketAddress, networkInterface: NetworkInterface): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ leaveGroup(multicastAddress: InetSocketAddress, networkInterface: NetworkInterface, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ leaveGroup(multicastAddress: InetAddress, networkInterface: NetworkInterface, source: InetAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ leaveGroup(multicastAddress: InetAddress, networkInterface: NetworkInterface, source: InetAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >- leaveGroup0(multicastAddress: InetAddress, networkInterface: NetworkInterface, source: InetAddress, promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >+ localAddress(): InetSocketAddress</TD></TR><TR><TD ALIGN="LEFT" >+ metadata(): ChannelMetadata</TD></TR><TR><TD ALIGN="LEFT" ># newUnsafe(): AbstractEpollUnsafe</TD></TR><TR><TD ALIGN="LEFT" >- processPacket(pipeline: ChannelPipeline, handle: EpollRecvByteAllocatorHandle, bytesRead: int, packet: DatagramPacket)</TD></TR><TR><TD ALIGN="LEFT" >- processPacketList(pipeline: ChannelPipeline, handle: EpollRecvByteAllocatorHandle, bytesRead: int, packetList: RecyclableArrayList)</TD></TR><TR><TD ALIGN="LEFT" >- recvmsg(allocHandle: EpollRecvByteAllocatorHandle, array: NativeDatagramPacketArray, byteBuf: ByteBuf): boolean</TD></TR><TR><TD ALIGN="LEFT" >- releaseAndRecycle(byteBuf: ByteBuf, packetList: RecyclableArrayList)</TD></TR><TR><TD ALIGN="LEFT" >+ remoteAddress(): InetSocketAddress</TD></TR><TR><TD ALIGN="LEFT" >- scatteringRead(allocHandle: EpollRecvByteAllocatorHandle, array: NativeDatagramPacketArray, byteBuf: ByteBuf, datagramSize: int, numDatagram: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >- translateForConnected(e: NativeIoException): IOException</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];EpollDatagramChannelConfig374638629[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)EpollDatagramChannelConfig</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   activeOnOpen: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   gro: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   maxDatagramSize: int [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ getOption(option: ChannelOption&lt;T&gt;): T</TD></TR><TR><TD ALIGN="LEFT" >+ setAllocator(allocator: ByteBufAllocator): EpollDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAutoClose(autoClose: boolean): EpollDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAutoRead(autoRead: boolean): EpollDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setBroadcast(broadcast: boolean): EpollDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setConnectTimeoutMillis(connectTimeoutMillis: int): EpollDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setEpollMode(mode: EpollMode): EpollDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setFreeBind(freeBind: boolean): EpollDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setInterface(interfaceAddress: InetAddress): EpollDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setIpRecvOrigDestAddr(ipTransparent: boolean): EpollDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setIpTransparent(ipTransparent: boolean): EpollDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setLoopbackModeDisabled(loopbackModeDisabled: boolean): DatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMaxDatagramPayloadSize(maxDatagramSize: int): EpollDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMaxMessagesPerRead(maxMessagesPerRead: int): EpollDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMaxMessagesPerWrite(maxMessagesPerWrite: int): EpollDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMessageSizeEstimator(estimator: MessageSizeEstimator): EpollDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setNetworkInterface(networkInterface: NetworkInterface): EpollDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setOption(option: ChannelOption&lt;T&gt;, value: T): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ setReceiveBufferSize(receiveBufferSize: int): EpollDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setRecvByteBufAllocator(allocator: RecvByteBufAllocator): EpollDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setReuseAddress(reuseAddress: boolean): EpollDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setReusePort(reusePort: boolean): EpollDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setSendBufferSize(sendBufferSize: int): EpollDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setTimeToLive(ttl: int): EpollDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setTrafficClass(trafficClass: int): EpollDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setUdpGro(gro: boolean): EpollDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferHighWaterMark(writeBufferHighWaterMark: int): EpollDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferLowWaterMark(writeBufferLowWaterMark: int): EpollDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferWaterMark(writeBufferWaterMark: WriteBufferWaterMark): EpollDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteSpinCount(writeSpinCount: int): EpollDatagramChannelConfig</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];EpollDatagramChannelUnsafe1786172217[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)EpollDatagramChannelUnsafe</TD></TR><HR/><TR><TD ALIGN="LEFT" ># epollInReady()</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];EpollDomainDatagramChannel374638629[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)EpollDomainDatagramChannel</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   config: EpollDomainDatagramChannelConfig [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   connected: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   local: DomainSocketAddress [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   remote: DomainSocketAddress [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ config(): EpollDomainDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" ># doBind(localAddress: SocketAddress)</TD></TR><TR><TD ALIGN="LEFT" ># doClose()</TD></TR><TR><TD ALIGN="LEFT" ># doConnect(remoteAddress: SocketAddress, localAddress: SocketAddress): boolean</TD></TR><TR><TD ALIGN="LEFT" ># doDisconnect()</TD></TR><TR><TD ALIGN="LEFT" ># doWrite(in: ChannelOutboundBuffer)</TD></TR><TR><TD ALIGN="LEFT" >- doWriteMessage(msg: Object): boolean</TD></TR><TR><TD ALIGN="LEFT" ># filterOutboundMessage(msg: Object): Object</TD></TR><TR><TD ALIGN="LEFT" >+ localAddress(): DomainSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># localAddress0(): DomainSocketAddress</TD></TR><TR><TD ALIGN="LEFT" >+ metadata(): ChannelMetadata</TD></TR><TR><TD ALIGN="LEFT" ># newUnsafe(): AbstractEpollUnsafe</TD></TR><TR><TD ALIGN="LEFT" >+ peerCredentials(): PeerCredentials</TD></TR><TR><TD ALIGN="LEFT" >+ remoteAddress(): DomainSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># remoteAddress0(): DomainSocketAddress</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];EpollDomainDatagramChannelConfig374638629[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)EpollDomainDatagramChannelConfig</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   activeOnOpen: boolean [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ getOption(option: ChannelOption&lt;T&gt;): T</TD></TR><TR><TD ALIGN="LEFT" >+ setAllocator(allocator: ByteBufAllocator): EpollDomainDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAutoClose(autoClose: boolean): EpollDomainDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAutoRead(autoRead: boolean): EpollDomainDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setConnectTimeoutMillis(connectTimeoutMillis: int): EpollDomainDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setEpollMode(mode: EpollMode): EpollDomainDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMaxMessagesPerRead(maxMessagesPerRead: int): EpollDomainDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMaxMessagesPerWrite(maxMessagesPerWrite: int): EpollDomainDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMessageSizeEstimator(estimator: MessageSizeEstimator): EpollDomainDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setOption(option: ChannelOption&lt;T&gt;, value: T): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ setRecvByteBufAllocator(allocator: RecvByteBufAllocator): EpollDomainDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setSendBufferSize(sendBufferSize: int): EpollDomainDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferWaterMark(writeBufferWaterMark: WriteBufferWaterMark): EpollDomainDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteSpinCount(writeSpinCount: int): EpollDomainDatagramChannelConfig</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];EpollDomainDatagramChannelUnsafe1398445987[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)EpollDomainDatagramChannelUnsafe</TD></TR><HR/><TR><TD ALIGN="LEFT" ># epollInReady()</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];EpollDomainSocketChannel374638629[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)EpollDomainSocketChannel</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   config: EpollDomainSocketChannelConfig [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   local: DomainSocketAddress [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   remote: DomainSocketAddress [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ config(): EpollDomainSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" ># doBind(localAddress: SocketAddress)</TD></TR><TR><TD ALIGN="LEFT" ># doConnect(remoteAddress: SocketAddress, localAddress: SocketAddress): boolean</TD></TR><TR><TD ALIGN="LEFT" ># doWriteSingle(in: ChannelOutboundBuffer): int</TD></TR><TR><TD ALIGN="LEFT" ># filterOutboundMessage(msg: Object): Object</TD></TR><TR><TD ALIGN="LEFT" >+ localAddress(): DomainSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># localAddress0(): DomainSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># newUnsafe(): AbstractEpollUnsafe</TD></TR><TR><TD ALIGN="LEFT" >+ peerCredentials(): PeerCredentials</TD></TR><TR><TD ALIGN="LEFT" >+ remoteAddress(): DomainSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># remoteAddress0(): DomainSocketAddress</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];EpollDomainSocketChannelConfig374638629[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)EpollDomainSocketChannelConfig</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   allowHalfClosure: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   mode: DomainSocketReadMode [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ getOption(option: ChannelOption&lt;T&gt;): T</TD></TR><TR><TD ALIGN="LEFT" >+ setAllocator(allocator: ByteBufAllocator): EpollDomainSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAllowHalfClosure(allowHalfClosure: boolean): EpollDomainSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAutoClose(autoClose: boolean): EpollDomainSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAutoRead(autoRead: boolean): EpollDomainSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setConnectTimeoutMillis(connectTimeoutMillis: int): EpollDomainSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setEpollMode(mode: EpollMode): EpollDomainSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMaxMessagesPerRead(maxMessagesPerRead: int): EpollDomainSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMessageSizeEstimator(estimator: MessageSizeEstimator): EpollDomainSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setOption(option: ChannelOption&lt;T&gt;, value: T): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ setReadMode(mode: DomainSocketReadMode): EpollDomainSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setReceiveBufferSize(receiveBufferSize: int): EpollDomainSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setRecvByteBufAllocator(allocator: RecvByteBufAllocator): EpollDomainSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setSendBufferSize(sendBufferSize: int): EpollDomainSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferHighWaterMark(writeBufferHighWaterMark: int): EpollDomainSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferLowWaterMark(writeBufferLowWaterMark: int): EpollDomainSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferWaterMark(writeBufferWaterMark: WriteBufferWaterMark): EpollDomainSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteSpinCount(writeSpinCount: int): EpollDomainSocketChannelConfig</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];EpollEventLoop374638629[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)EpollEventLoop</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   allowGrowing: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   channels: IntObjectMap&lt;AbstractEpollChannel&gt; [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   datagramPacketArray: NativeDatagramPacketArray [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   epollFd: FileDescriptor [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   eventFd: FileDescriptor [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   events: EpollEventArray [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   ioRatio: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   iovArray: IovArray [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   nextWakeupNanos: AtomicLong [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   pendingWakeup: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   selectNowSupplier: IntSupplier [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   selectStrategy: SelectStrategy [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   timerFd: FileDescriptor [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" ># add(ch: AbstractEpollChannel)</TD></TR><TR><TD ALIGN="LEFT" ># afterScheduledTaskSubmitted(deadlineNanos: long): boolean</TD></TR><TR><TD ALIGN="LEFT" ># beforeScheduledTaskSubmitted(deadlineNanos: long): boolean</TD></TR><TR><TD ALIGN="LEFT" ># cleanDatagramPacketArray(): NativeDatagramPacketArray</TD></TR><TR><TD ALIGN="LEFT" ># cleanIovArray(): IovArray</TD></TR><TR><TD ALIGN="LEFT" ># cleanup()</TD></TR><TR><TD ALIGN="LEFT" >- closeAll()</TD></TR><TR><TD ALIGN="LEFT" >- epollBusyWait(): int</TD></TR><TR><TD ALIGN="LEFT" >- epollWait(deadlineNanos: long): long</TD></TR><TR><TD ALIGN="LEFT" >- epollWaitNoTimerChange(): int</TD></TR><TR><TD ALIGN="LEFT" >- epollWaitNow(): int</TD></TR><TR><TD ALIGN="LEFT" >- epollWaitTimeboxed(): int</TD></TR><TR><TD ALIGN="LEFT" ># handleLoopException(t: Throwable)</TD></TR><TR><TD ALIGN="LEFT" ># modify(ch: AbstractEpollChannel)</TD></TR><TR><TD ALIGN="LEFT" >- newTaskQueue(queueFactory: EventLoopTaskQueueFactory): Queue&lt;Runnable&gt;</TD></TR><TR><TD ALIGN="LEFT" ># newTaskQueue(maxPendingTasks: int): Queue&lt;Runnable&gt;</TD></TR><TR><TD ALIGN="LEFT" >- newTaskQueue0(maxPendingTasks: int): Queue&lt;Runnable&gt;</TD></TR><TR><TD ALIGN="LEFT" >- processReady(events: EpollEventArray, ready: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ registeredChannels(): int</TD></TR><TR><TD ALIGN="LEFT" >+ registeredChannelsIterator(): Iterator&lt;Channel&gt;</TD></TR><TR><TD ALIGN="LEFT" ># remove(ch: AbstractEpollChannel)</TD></TR><TR><TD ALIGN="LEFT" ># run()</TD></TR><TR><TD ALIGN="LEFT" ># wakeup(inEventLoop: boolean)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];EpollRecvByteAllocatorHandle374638629[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)EpollRecvByteAllocatorHandle</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   defaultMaybeMoreDataSupplier: UncheckedBooleanSupplier [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   isEdgeTriggered: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   preferredDirectByteBufAllocator: PreferredDirectByteBufAllocator [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   receivedRdHup: boolean [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ allocate(alloc: ByteBufAllocator): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ continueReading(maybeMoreDataSupplier: UncheckedBooleanSupplier): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ continueReading(): boolean</TD></TR><TR><TD ALIGN="LEFT" ># edgeTriggered(edgeTriggered: boolean)</TD></TR><TR><TD ALIGN="LEFT" ># maybeMoreDataToRead(): boolean</TD></TR><TR><TD ALIGN="LEFT" ># receivedRdHup()</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];EpollServerChannelConfig374638629[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)EpollServerChannelConfig</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   backlog: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   pendingFastOpenRequestsThreshold: int [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ getOption(option: ChannelOption&lt;T&gt;): T</TD></TR><TR><TD ALIGN="LEFT" >+ setAllocator(allocator: ByteBufAllocator): EpollServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAutoRead(autoRead: boolean): EpollServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setBacklog(backlog: int): EpollServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setConnectTimeoutMillis(connectTimeoutMillis: int): EpollServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setEpollMode(mode: EpollMode): EpollServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMaxMessagesPerRead(maxMessagesPerRead: int): EpollServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMessageSizeEstimator(estimator: MessageSizeEstimator): EpollServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setOption(option: ChannelOption&lt;T&gt;, value: T): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ setPerformancePreferences(connectionTime: int, latency: int, bandwidth: int): EpollServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setReceiveBufferSize(receiveBufferSize: int): EpollServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setRecvByteBufAllocator(allocator: RecvByteBufAllocator): EpollServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setReuseAddress(reuseAddress: boolean): EpollServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setTcpFastopen(pendingFastOpenRequestsThreshold: int): EpollServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferHighWaterMark(writeBufferHighWaterMark: int): EpollServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferLowWaterMark(writeBufferLowWaterMark: int): EpollServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferWaterMark(writeBufferWaterMark: WriteBufferWaterMark): EpollServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteSpinCount(writeSpinCount: int): EpollServerChannelConfig</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];EpollServerDomainSocketChannel374638629[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)EpollServerDomainSocketChannel</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   config: EpollServerChannelConfig [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   local: DomainSocketAddress [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ config(): EpollServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" ># doBind(localAddress: SocketAddress)</TD></TR><TR><TD ALIGN="LEFT" ># doClose()</TD></TR><TR><TD ALIGN="LEFT" >+ localAddress(): DomainSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># localAddress0(): DomainSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># newChildChannel(fd: int, addr: byte[], offset: int, len: int): Channel</TD></TR><TR><TD ALIGN="LEFT" >+ remoteAddress(): DomainSocketAddress</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];EpollServerSocketChannel374638629[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)EpollServerSocketChannel</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   config: EpollServerSocketChannelConfig [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   tcpMd5SigAddresses: Collection&lt;InetAddress&gt; [0..*]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ config(): EpollServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" ># doBind(localAddress: SocketAddress)</TD></TR><TR><TD ALIGN="LEFT" ># isCompatible(loop: EventLoop): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ localAddress(): InetSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># newChildChannel(fd: int, address: byte[], offset: int, len: int): Channel</TD></TR><TR><TD ALIGN="LEFT" >+ remoteAddress(): InetSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># tcpMd5SigAddresses(): Collection&lt;InetAddress&gt;</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];EpollServerSocketChannelConfig374638629[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)EpollServerSocketChannelConfig</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ getOption(option: ChannelOption&lt;T&gt;): T</TD></TR><TR><TD ALIGN="LEFT" >+ setAllocator(allocator: ByteBufAllocator): EpollServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAutoRead(autoRead: boolean): EpollServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setBacklog(backlog: int): EpollServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setConnectTimeoutMillis(connectTimeoutMillis: int): EpollServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setFreeBind(freeBind: boolean): EpollServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setIpTransparent(transparent: boolean): EpollServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMaxMessagesPerRead(maxMessagesPerRead: int): EpollServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMessageSizeEstimator(estimator: MessageSizeEstimator): EpollServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setOption(option: ChannelOption&lt;T&gt;, value: T): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ setPerformancePreferences(connectionTime: int, latency: int, bandwidth: int): EpollServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setReceiveBufferSize(receiveBufferSize: int): EpollServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setRecvByteBufAllocator(allocator: RecvByteBufAllocator): EpollServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setReuseAddress(reuseAddress: boolean): EpollServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setReusePort(reusePort: boolean): EpollServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setTcpDeferAccept(deferAccept: int): EpollServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setTcpMd5Sig(keys: Map&lt;InetAddress, byte[]&gt;): EpollServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferHighWaterMark(writeBufferHighWaterMark: int): EpollServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferLowWaterMark(writeBufferLowWaterMark: int): EpollServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferWaterMark(writeBufferWaterMark: WriteBufferWaterMark): EpollServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteSpinCount(writeSpinCount: int): EpollServerSocketChannelConfig</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];EpollServerSocketUnsafe271372217[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)EpollServerSocketUnsafe</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   acceptedAddress: byte[] [0..*]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ connect(socketAddress: SocketAddress, socketAddress2: SocketAddress, channelPromise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" ># epollInReady()</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];EpollSocketChannel374638629[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)EpollSocketChannel</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   config: EpollSocketChannelConfig [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   tcpMd5SigAddresses: Collection&lt;InetAddress&gt; [0..*]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ config(): EpollSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" ># doConnect0(remote: SocketAddress): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ localAddress(): InetSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># newUnsafe(): AbstractEpollUnsafe</TD></TR><TR><TD ALIGN="LEFT" >+ parent(): ServerSocketChannel</TD></TR><TR><TD ALIGN="LEFT" >+ remoteAddress(): InetSocketAddress</TD></TR><TR><TD ALIGN="LEFT" >+ tcpInfo(): EpollTcpInfo</TD></TR><TR><TD ALIGN="LEFT" >+ tcpInfo(info: EpollTcpInfo): EpollTcpInfo</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];EpollSocketChannelConfig374638629[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)EpollSocketChannelConfig</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   allowHalfClosure: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   tcpFastopen: boolean [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >- calculateMaxBytesPerGatheringWrite()</TD></TR><TR><TD ALIGN="LEFT" >+ getOption(option: ChannelOption&lt;T&gt;): T</TD></TR><TR><TD ALIGN="LEFT" >+ setAllocator(allocator: ByteBufAllocator): EpollSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAllowHalfClosure(allowHalfClosure: boolean): EpollSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAutoClose(autoClose: boolean): EpollSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAutoRead(autoRead: boolean): EpollSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setConnectTimeoutMillis(connectTimeoutMillis: int): EpollSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setEpollMode(mode: EpollMode): EpollSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setIpTransparent(transparent: boolean): EpollSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setKeepAlive(keepAlive: boolean): EpollSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMaxMessagesPerRead(maxMessagesPerRead: int): EpollSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMessageSizeEstimator(estimator: MessageSizeEstimator): EpollSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setOption(option: ChannelOption&lt;T&gt;, value: T): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ setPerformancePreferences(connectionTime: int, latency: int, bandwidth: int): EpollSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setReceiveBufferSize(receiveBufferSize: int): EpollSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setRecvByteBufAllocator(allocator: RecvByteBufAllocator): EpollSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setReuseAddress(reuseAddress: boolean): EpollSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setSendBufferSize(sendBufferSize: int): EpollSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setSoBusyPoll(loopMicros: int): EpollSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setSoLinger(soLinger: int): EpollSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setTcpCork(tcpCork: boolean): EpollSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setTcpFastOpenConnect(fastOpenConnect: boolean): EpollSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setTcpKeepCnt(probes: int): EpollSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setTcpKeepCntl(probes: int): EpollSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setTcpKeepIdle(seconds: int): EpollSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setTcpKeepIntvl(seconds: int): EpollSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setTcpMd5Sig(keys: Map&lt;InetAddress, byte[]&gt;): EpollSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setTcpNoDelay(tcpNoDelay: boolean): EpollSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setTcpNotSentLowAt(tcpNotSentLowAt: long): EpollSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setTcpQuickAck(quickAck: boolean): EpollSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setTcpUserTimeout(milliseconds: int): EpollSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setTrafficClass(trafficClass: int): EpollSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferHighWaterMark(writeBufferHighWaterMark: int): EpollSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferLowWaterMark(writeBufferLowWaterMark: int): EpollSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferWaterMark(writeBufferWaterMark: WriteBufferWaterMark): EpollSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteSpinCount(writeSpinCount: int): EpollSocketChannelConfig</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];EpollStreamUnsafe773602966[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)EpollStreamUnsafe</TD></TR><HR/><TR><TD ALIGN="LEFT" ># epollInReady()</TD></TR><TR><TD ALIGN="LEFT" >- handleReadException(pipeline: ChannelPipeline, byteBuf: ByteBuf, cause: Throwable, close: boolean, allocHandle: EpollRecvByteAllocatorHandle)</TD></TR><TR><TD ALIGN="LEFT" ># newEpollHandle(handle: ExtendedHandle): EpollRecvByteAllocatorHandle</TD></TR><TR><TD ALIGN="LEFT" ># prepareToClose(): Executor</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];Errors1536580327[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)Errors</TD></TR><HR/><TR><TD ALIGN="LEFT" >- errnoString(err: int): String</TD></TR><TR><TD ALIGN="LEFT" ># handleConnectErrno(method: String, err: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ ioResult(method: String, err: int, resetCause: NativeIoException, closedCause: ClosedChannelException): int</TD></TR><TR><TD ALIGN="LEFT" >+ ioResult(method: String, err: int): int</TD></TR><TR><TD ALIGN="LEFT" >- newConnectException0(method: String, err: int): IOException</TD></TR><TR><TD ALIGN="LEFT" >+ newConnectionResetException(method: String, errnoNegative: int): NativeIoException</TD></TR><TR><TD ALIGN="LEFT" >+ newIOException(method: String, err: int): NativeIoException</TD></TR><TR><TD ALIGN="LEFT" >+ throwConnectException(method: String, err: int)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];FailedChannelFuture1443455697[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)FailedChannelFuture</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   cause: Throwable [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ cause(): Throwable</TD></TR><TR><TD ALIGN="LEFT" >+ sync(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ syncUninterruptibly(): ChannelFuture</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];FileDescriptor1536580327[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)FileDescriptor</TD></TR><HR/><TR><TD ALIGN="LEFT" >#   fd: int [1]</TD></TR><TR><TD ALIGN="LEFT" >#   state: int [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" ># casState(expected: int, update: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ close()</TD></TR><TR><TD ALIGN="LEFT" >- close(fd: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ from(path: String): FileDescriptor</TD></TR><TR><TD ALIGN="LEFT" >+ from(file: File): FileDescriptor</TD></TR><TR><TD ALIGN="LEFT" ># inputShutdown(state: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ intValue(): int</TD></TR><TR><TD ALIGN="LEFT" ># isClosed(state: int): boolean</TD></TR><TR><TD ALIGN="LEFT" ># isInputShutdown(state: int): boolean</TD></TR><TR><TD ALIGN="LEFT" ># isOutputShutdown(state: int): boolean</TD></TR><TR><TD ALIGN="LEFT" ># markClosed(): boolean</TD></TR><TR><TD ALIGN="LEFT" >- newPipe(): long</TD></TR><TR><TD ALIGN="LEFT" >- open(path: String): int</TD></TR><TR><TD ALIGN="LEFT" ># outputShutdown(state: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ pipe(): FileDescriptor[]</TD></TR><TR><TD ALIGN="LEFT" >+ read(buf: ByteBuffer, pos: int, limit: int): int</TD></TR><TR><TD ALIGN="LEFT" >- read(fd: int, buf: ByteBuffer, pos: int, limit: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ readAddress(address: long, pos: int, limit: int): int</TD></TR><TR><TD ALIGN="LEFT" >- readAddress(fd: int, address: long, pos: int, limit: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ write(buf: ByteBuffer, pos: int, limit: int): int</TD></TR><TR><TD ALIGN="LEFT" >- write(fd: int, buf: ByteBuffer, pos: int, limit: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ writeAddress(address: long, pos: int, limit: int): int</TD></TR><TR><TD ALIGN="LEFT" >- writeAddress(fd: int, address: long, pos: int, limit: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ writev(buffers: ByteBuffer[], offset: int, length: int, maxBytesToWrite: long): long</TD></TR><TR><TD ALIGN="LEFT" >- writev(fd: int, buffers: ByteBuffer[], offset: int, length: int, maxBytesToWrite: long): long</TD></TR><TR><TD ALIGN="LEFT" >+ writevAddresses(memoryAddress: long, length: int): long</TD></TR><TR><TD ALIGN="LEFT" >- writevAddresses(fd: int, memoryAddress: long, length: int): long</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];FixedChannelPool1536432507[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)FixedChannelPool</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   acquireTimeoutNanos: long [1]</TD></TR><TR><TD ALIGN="LEFT" >-   acquiredChannelCount: AtomicInteger [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   closed: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   executor: EventExecutor [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   maxConnections: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   maxPendingAcquires: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   pendingAcquireCount: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   pendingAcquireQueue: Queue&lt;AcquireTask&gt; [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   timeoutTask: Runnable [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ acquire(promise: Promise&lt;Channel&gt;): Future&lt;Channel&gt;</TD></TR><TR><TD ALIGN="LEFT" >- acquire0(promise: Promise&lt;Channel&gt;)</TD></TR><TR><TD ALIGN="LEFT" >+ acquiredChannelCount(): int</TD></TR><TR><TD ALIGN="LEFT" >+ close()</TD></TR><TR><TD ALIGN="LEFT" >- close0(): Future&lt;Void&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ closeAsync(): Future&lt;Void&gt;</TD></TR><TR><TD ALIGN="LEFT" >- decrementAndRunTaskQueue()</TD></TR><TR><TD ALIGN="LEFT" >+ release(channel: Channel, promise: Promise&lt;Void&gt;): Future&lt;Void&gt;</TD></TR><TR><TD ALIGN="LEFT" >- runTaskQueue()</TD></TR><TR><TD ALIGN="LEFT" >- tooManyOutstanding(promise: Promise&lt;?&gt;)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];FixedRecvByteBufAllocator1443455697[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)FixedRecvByteBufAllocator</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   bufferSize: int [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ newHandle(): Handle</TD></TR><TR><TD ALIGN="LEFT" >+ respectMaybeMoreData(respectMaybeMoreData: boolean): FixedRecvByteBufAllocator</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];HandleImpl1278513466[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)HandleImpl</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   unknownSize: int [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ size(msg: Object): int</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];HeadContext641825789[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)HeadContext</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   unsafe: Unsafe [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ bind(ctx: ChannelHandlerContext, localAddress: SocketAddress, promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >+ channelActive(ctx: ChannelHandlerContext)</TD></TR><TR><TD ALIGN="LEFT" >+ channelInactive(ctx: ChannelHandlerContext)</TD></TR><TR><TD ALIGN="LEFT" >+ channelRead(ctx: ChannelHandlerContext, msg: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ channelReadComplete(ctx: ChannelHandlerContext)</TD></TR><TR><TD ALIGN="LEFT" >+ channelRegistered(ctx: ChannelHandlerContext)</TD></TR><TR><TD ALIGN="LEFT" >+ channelUnregistered(ctx: ChannelHandlerContext)</TD></TR><TR><TD ALIGN="LEFT" >+ channelWritabilityChanged(ctx: ChannelHandlerContext)</TD></TR><TR><TD ALIGN="LEFT" >+ close(ctx: ChannelHandlerContext, promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >+ connect(ctx: ChannelHandlerContext, remoteAddress: SocketAddress, localAddress: SocketAddress, promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >+ deregister(ctx: ChannelHandlerContext, promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >+ disconnect(ctx: ChannelHandlerContext, promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >+ exceptionCaught(ctx: ChannelHandlerContext, cause: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >+ flush(ctx: ChannelHandlerContext)</TD></TR><TR><TD ALIGN="LEFT" >+ handler(): ChannelHandler</TD></TR><TR><TD ALIGN="LEFT" >+ handlerAdded(ctx: ChannelHandlerContext)</TD></TR><TR><TD ALIGN="LEFT" >+ handlerRemoved(ctx: ChannelHandlerContext)</TD></TR><TR><TD ALIGN="LEFT" >+ read(ctx: ChannelHandlerContext)</TD></TR><TR><TD ALIGN="LEFT" >- readIfIsAutoRead()</TD></TR><TR><TD ALIGN="LEFT" >+ userEventTriggered(ctx: ChannelHandlerContext, evt: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ write(ctx: ChannelHandlerContext, msg: Object, promise: ChannelPromise)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];InstanceMatcher1668350614[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)InstanceMatcher</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   channel: Channel [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ matches(ch: Channel): boolean</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];InvertMatcher1668350614[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)InvertMatcher</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   matcher: ChannelMatcher [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ matches(channel: Channel): boolean</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];IovArray1536580327[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)IovArray</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   count: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   maxBytes: long [1]</TD></TR><TR><TD ALIGN="LEFT" >-   memory: ByteBuf [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   memoryAddress: long [1]</TD></TR><TR><TD ALIGN="LEFT" >-   size: long [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ add(buf: ByteBuf): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ add(buf: ByteBuf, offset: int, len: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >- add(memoryAddress: long, addr: long, len: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ clear()</TD></TR><TR><TD ALIGN="LEFT" >+ count(): int</TD></TR><TR><TD ALIGN="LEFT" >- idx(index: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ maxBytes(maxBytes: long)</TD></TR><TR><TD ALIGN="LEFT" >+ maxBytes(): long</TD></TR><TR><TD ALIGN="LEFT" >+ memoryAddress(offset: int): long</TD></TR><TR><TD ALIGN="LEFT" >+ processMessage(msg: Object): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ release()</TD></TR><TR><TD ALIGN="LEFT" >+ size(): long</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];KQueueDatagramChannel1098233563[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)KQueueDatagramChannel</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   config: KQueueDatagramChannelConfig [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   connected: boolean [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ block(multicastAddress: InetAddress, networkInterface: NetworkInterface, sourceToBlock: InetAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ block(multicastAddress: InetAddress, networkInterface: NetworkInterface, sourceToBlock: InetAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ block(multicastAddress: InetAddress, sourceToBlock: InetAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ block(multicastAddress: InetAddress, sourceToBlock: InetAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >- checkUnresolved(envelope: AddressedEnvelope&lt;?, ?&gt;)</TD></TR><TR><TD ALIGN="LEFT" >+ config(): KQueueDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" ># doBind(localAddress: SocketAddress)</TD></TR><TR><TD ALIGN="LEFT" ># doClose()</TD></TR><TR><TD ALIGN="LEFT" ># doConnect(remoteAddress: SocketAddress, localAddress: SocketAddress): boolean</TD></TR><TR><TD ALIGN="LEFT" ># doDisconnect()</TD></TR><TR><TD ALIGN="LEFT" ># doWriteMessage(msg: Object): boolean</TD></TR><TR><TD ALIGN="LEFT" ># filterOutboundMessage(msg: Object): Object</TD></TR><TR><TD ALIGN="LEFT" >+ joinGroup(multicastAddress: InetAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ joinGroup(multicastAddress: InetAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ joinGroup(multicastAddress: InetSocketAddress, networkInterface: NetworkInterface): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ joinGroup(multicastAddress: InetSocketAddress, networkInterface: NetworkInterface, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ joinGroup(multicastAddress: InetAddress, networkInterface: NetworkInterface, source: InetAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ joinGroup(multicastAddress: InetAddress, networkInterface: NetworkInterface, source: InetAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ leaveGroup(multicastAddress: InetAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ leaveGroup(multicastAddress: InetAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ leaveGroup(multicastAddress: InetSocketAddress, networkInterface: NetworkInterface): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ leaveGroup(multicastAddress: InetSocketAddress, networkInterface: NetworkInterface, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ leaveGroup(multicastAddress: InetAddress, networkInterface: NetworkInterface, source: InetAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ leaveGroup(multicastAddress: InetAddress, networkInterface: NetworkInterface, source: InetAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ localAddress(): InetSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># newUnsafe(): AbstractKQueueUnsafe</TD></TR><TR><TD ALIGN="LEFT" >+ remoteAddress(): InetSocketAddress</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];KQueueDatagramChannelConfig1098233563[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)KQueueDatagramChannelConfig</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   activeOnOpen: boolean [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ getOption(option: ChannelOption&lt;T&gt;): T</TD></TR><TR><TD ALIGN="LEFT" >+ setAllocator(allocator: ByteBufAllocator): KQueueDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAutoClose(autoClose: boolean): KQueueDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAutoRead(autoRead: boolean): KQueueDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setBroadcast(broadcast: boolean): KQueueDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setConnectTimeoutMillis(connectTimeoutMillis: int): KQueueDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setInterface(interfaceAddress: InetAddress): KQueueDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setLoopbackModeDisabled(loopbackModeDisabled: boolean): DatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMaxMessagesPerRead(maxMessagesPerRead: int): KQueueDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMaxMessagesPerWrite(maxMessagesPerWrite: int): KQueueDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMessageSizeEstimator(estimator: MessageSizeEstimator): KQueueDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setNetworkInterface(networkInterface: NetworkInterface): KQueueDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setOption(option: ChannelOption&lt;T&gt;, value: T): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ setRcvAllocTransportProvidesGuess(transportProvidesGuess: boolean): KQueueDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setReceiveBufferSize(receiveBufferSize: int): KQueueDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setRecvByteBufAllocator(allocator: RecvByteBufAllocator): KQueueDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setReuseAddress(reuseAddress: boolean): KQueueDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setReusePort(reusePort: boolean): KQueueDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setSendBufferSize(sendBufferSize: int): KQueueDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setTimeToLive(ttl: int): KQueueDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setTrafficClass(trafficClass: int): KQueueDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferHighWaterMark(writeBufferHighWaterMark: int): KQueueDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferLowWaterMark(writeBufferLowWaterMark: int): KQueueDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferWaterMark(writeBufferWaterMark: WriteBufferWaterMark): KQueueDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteSpinCount(writeSpinCount: int): KQueueDatagramChannelConfig</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];KQueueDatagramChannelUnsafe1650171987[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)KQueueDatagramChannelUnsafe</TD></TR><HR/><TR><TD ALIGN="LEFT" ># readReady(allocHandle: KQueueRecvByteAllocatorHandle)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];KQueueDomainDatagramChannel1098233563[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)KQueueDomainDatagramChannel</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   config: KQueueDomainDatagramChannelConfig [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   connected: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   local: DomainSocketAddress [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   remote: DomainSocketAddress [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ config(): KQueueDomainDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" ># doBind(localAddress: SocketAddress)</TD></TR><TR><TD ALIGN="LEFT" ># doClose()</TD></TR><TR><TD ALIGN="LEFT" ># doConnect(remoteAddress: SocketAddress, localAddress: SocketAddress): boolean</TD></TR><TR><TD ALIGN="LEFT" ># doDisconnect()</TD></TR><TR><TD ALIGN="LEFT" ># doWriteMessage(msg: Object): boolean</TD></TR><TR><TD ALIGN="LEFT" ># filterOutboundMessage(msg: Object): Object</TD></TR><TR><TD ALIGN="LEFT" >+ localAddress(): DomainSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># localAddress0(): DomainSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># newUnsafe(): AbstractKQueueUnsafe</TD></TR><TR><TD ALIGN="LEFT" >+ peerCredentials(): PeerCredentials</TD></TR><TR><TD ALIGN="LEFT" >+ remoteAddress(): DomainSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># remoteAddress0(): DomainSocketAddress</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];KQueueDomainDatagramChannelConfig1098233563[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)KQueueDomainDatagramChannelConfig</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   activeOnOpen: boolean [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ getOption(option: ChannelOption&lt;T&gt;): T</TD></TR><TR><TD ALIGN="LEFT" >+ setAllocator(allocator: ByteBufAllocator): KQueueDomainDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAutoClose(autoClose: boolean): KQueueDomainDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAutoRead(autoRead: boolean): KQueueDomainDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setConnectTimeoutMillis(connectTimeoutMillis: int): KQueueDomainDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMaxMessagesPerRead(maxMessagesPerRead: int): KQueueDomainDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMaxMessagesPerWrite(maxMessagesPerWrite: int): KQueueDomainDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMessageSizeEstimator(estimator: MessageSizeEstimator): KQueueDomainDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setOption(option: ChannelOption&lt;T&gt;, value: T): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ setRcvAllocTransportProvidesGuess(transportProvidesGuess: boolean): KQueueDomainDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setRecvByteBufAllocator(allocator: RecvByteBufAllocator): KQueueDomainDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setSendBufferSize(sendBufferSize: int): KQueueDomainDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferWaterMark(writeBufferWaterMark: WriteBufferWaterMark): KQueueDomainDatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteSpinCount(writeSpinCount: int): KQueueDomainDatagramChannelConfig</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];KQueueDomainDatagramChannelUnsafe355676719[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)KQueueDomainDatagramChannelUnsafe</TD></TR><HR/><TR><TD ALIGN="LEFT" ># readReady(allocHandle: KQueueRecvByteAllocatorHandle)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];KQueueDomainSocketChannel1098233563[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)KQueueDomainSocketChannel</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   config: KQueueDomainSocketChannelConfig [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   local: DomainSocketAddress [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   remote: DomainSocketAddress [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ config(): KQueueDomainSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" ># doBind(localAddress: SocketAddress)</TD></TR><TR><TD ALIGN="LEFT" ># doConnect(remoteAddress: SocketAddress, localAddress: SocketAddress): boolean</TD></TR><TR><TD ALIGN="LEFT" ># doWriteSingle(in: ChannelOutboundBuffer): int</TD></TR><TR><TD ALIGN="LEFT" ># filterOutboundMessage(msg: Object): Object</TD></TR><TR><TD ALIGN="LEFT" >+ localAddress(): DomainSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># localAddress0(): DomainSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># newUnsafe(): AbstractKQueueUnsafe</TD></TR><TR><TD ALIGN="LEFT" >+ peerCredentials(): PeerCredentials</TD></TR><TR><TD ALIGN="LEFT" >+ remoteAddress(): DomainSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># remoteAddress0(): DomainSocketAddress</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];KQueueDomainSocketChannelConfig1098233563[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)KQueueDomainSocketChannelConfig</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   allowHalfClosure: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   mode: DomainSocketReadMode [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ getOption(option: ChannelOption&lt;T&gt;): T</TD></TR><TR><TD ALIGN="LEFT" >+ setAllocator(allocator: ByteBufAllocator): KQueueDomainSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAllowHalfClosure(allowHalfClosure: boolean): KQueueDomainSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAutoClose(autoClose: boolean): KQueueDomainSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAutoRead(autoRead: boolean): KQueueDomainSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setConnectTimeoutMillis(connectTimeoutMillis: int): KQueueDomainSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMaxMessagesPerRead(maxMessagesPerRead: int): KQueueDomainSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMessageSizeEstimator(estimator: MessageSizeEstimator): KQueueDomainSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setOption(option: ChannelOption&lt;T&gt;, value: T): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ setRcvAllocTransportProvidesGuess(transportProvidesGuess: boolean): KQueueDomainSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setReadMode(mode: DomainSocketReadMode): KQueueDomainSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setReceiveBufferSize(receiveBufferSize: int): KQueueDomainSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setRecvByteBufAllocator(allocator: RecvByteBufAllocator): KQueueDomainSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setSendBufferSize(sendBufferSize: int): KQueueDomainSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferHighWaterMark(writeBufferHighWaterMark: int): KQueueDomainSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferLowWaterMark(writeBufferLowWaterMark: int): KQueueDomainSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferWaterMark(writeBufferWaterMark: WriteBufferWaterMark): KQueueDomainSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteSpinCount(writeSpinCount: int): KQueueDomainSocketChannelConfig</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];KQueueEventArray1098233563[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)KQueueEventArray</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   capacity: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   memory: ByteBuffer [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   memoryAddress: long [1]</TD></TR><TR><TD ALIGN="LEFT" >-   size: int [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >- calculateBufferCapacity(capacity: int): int</TD></TR><TR><TD ALIGN="LEFT" ># capacity(): int</TD></TR><TR><TD ALIGN="LEFT" ># clear()</TD></TR><TR><TD ALIGN="LEFT" ># data(index: int): long</TD></TR><TR><TD ALIGN="LEFT" ># evSet(ch: AbstractKQueueChannel, filter: short, flags: short, fflags: int)</TD></TR><TR><TD ALIGN="LEFT" >- evSet(keventAddress: long, ident: int, filter: short, flags: short, fflags: int)</TD></TR><TR><TD ALIGN="LEFT" ># fd(index: int): int</TD></TR><TR><TD ALIGN="LEFT" ># fflags(index: int): short</TD></TR><TR><TD ALIGN="LEFT" ># filter(index: int): short</TD></TR><TR><TD ALIGN="LEFT" ># flags(index: int): short</TD></TR><TR><TD ALIGN="LEFT" ># free()</TD></TR><TR><TD ALIGN="LEFT" >- getKEventOffset(index: int): int</TD></TR><TR><TD ALIGN="LEFT" >- getKEventOffsetAddress(index: int): long</TD></TR><TR><TD ALIGN="LEFT" >- getShort(index: int, offset: int): short</TD></TR><TR><TD ALIGN="LEFT" ># memoryAddress(): long</TD></TR><TR><TD ALIGN="LEFT" ># realloc(throwIfFail: boolean)</TD></TR><TR><TD ALIGN="LEFT" >- reallocIfNeeded()</TD></TR><TR><TD ALIGN="LEFT" ># size(): int</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];KQueueEventLoop1098233563[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)KQueueEventLoop</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   allowGrowing: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   changeList: KQueueEventArray [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   channels: IntObjectMap&lt;AbstractKQueueChannel&gt; [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   eventList: KQueueEventArray [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   ioRatio: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   iovArray: IovArray [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   kqueueFd: FileDescriptor [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   selectNowSupplier: IntSupplier [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   selectStrategy: SelectStrategy [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   wakenUp: int [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" ># add(ch: AbstractKQueueChannel)</TD></TR><TR><TD ALIGN="LEFT" ># cleanArray(): IovArray</TD></TR><TR><TD ALIGN="LEFT" ># cleanup()</TD></TR><TR><TD ALIGN="LEFT" >- closeAll()</TD></TR><TR><TD ALIGN="LEFT" ># evSet(ch: AbstractKQueueChannel, filter: short, flags: short, fflags: int)</TD></TR><TR><TD ALIGN="LEFT" >- handleLoopException(t: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >- kqueueWait(oldWakeup: boolean): int</TD></TR><TR><TD ALIGN="LEFT" >- kqueueWait(timeoutSec: int, timeoutNs: int): int</TD></TR><TR><TD ALIGN="LEFT" >- kqueueWaitNow(): int</TD></TR><TR><TD ALIGN="LEFT" >- newTaskQueue(queueFactory: EventLoopTaskQueueFactory): Queue&lt;Runnable&gt;</TD></TR><TR><TD ALIGN="LEFT" ># newTaskQueue(maxPendingTasks: int): Queue&lt;Runnable&gt;</TD></TR><TR><TD ALIGN="LEFT" >- newTaskQueue0(maxPendingTasks: int): Queue&lt;Runnable&gt;</TD></TR><TR><TD ALIGN="LEFT" >- processReady(ready: int)</TD></TR><TR><TD ALIGN="LEFT" >+ registeredChannels(): int</TD></TR><TR><TD ALIGN="LEFT" >+ registeredChannelsIterator(): Iterator&lt;Channel&gt;</TD></TR><TR><TD ALIGN="LEFT" ># remove(ch: AbstractKQueueChannel)</TD></TR><TR><TD ALIGN="LEFT" ># run()</TD></TR><TR><TD ALIGN="LEFT" ># wakeup(inEventLoop: boolean)</TD></TR><TR><TD ALIGN="LEFT" >- wakeup()</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];KQueueRecvByteAllocatorHandle1098233563[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)KQueueRecvByteAllocatorHandle</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   defaultMaybeMoreDataSupplier: UncheckedBooleanSupplier [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   numberBytesPending: long [1]</TD></TR><TR><TD ALIGN="LEFT" >-   overrideGuess: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   preferredDirectByteBufAllocator: PreferredDirectByteBufAllocator [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   readEOF: boolean [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ allocate(alloc: ByteBufAllocator): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ continueReading(maybeMoreDataSupplier: UncheckedBooleanSupplier): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ continueReading(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ guess(): int</TD></TR><TR><TD ALIGN="LEFT" >- guess0(): int</TD></TR><TR><TD ALIGN="LEFT" >+ lastBytesRead(bytes: int)</TD></TR><TR><TD ALIGN="LEFT" ># maybeMoreDataToRead(): boolean</TD></TR><TR><TD ALIGN="LEFT" ># numberBytesPending(numberBytesPending: long)</TD></TR><TR><TD ALIGN="LEFT" ># readEOF()</TD></TR><TR><TD ALIGN="LEFT" >+ reset(config: ChannelConfig)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];KQueueServerChannelConfig1098233563[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)KQueueServerChannelConfig</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   backlog: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   enableTcpFastOpen: boolean [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ getOption(option: ChannelOption&lt;T&gt;): T</TD></TR><TR><TD ALIGN="LEFT" >+ setAllocator(allocator: ByteBufAllocator): KQueueServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAutoRead(autoRead: boolean): KQueueServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setBacklog(backlog: int): KQueueServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setConnectTimeoutMillis(connectTimeoutMillis: int): KQueueServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMaxMessagesPerRead(maxMessagesPerRead: int): KQueueServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMessageSizeEstimator(estimator: MessageSizeEstimator): KQueueServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setOption(option: ChannelOption&lt;T&gt;, value: T): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ setPerformancePreferences(connectionTime: int, latency: int, bandwidth: int): KQueueServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setRcvAllocTransportProvidesGuess(transportProvidesGuess: boolean): KQueueServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setReceiveBufferSize(receiveBufferSize: int): KQueueServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setRecvByteBufAllocator(allocator: RecvByteBufAllocator): KQueueServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setReuseAddress(reuseAddress: boolean): KQueueServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setTcpFastOpen(enableTcpFastOpen: boolean): KQueueServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferHighWaterMark(writeBufferHighWaterMark: int): KQueueServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferLowWaterMark(writeBufferLowWaterMark: int): KQueueServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferWaterMark(writeBufferWaterMark: WriteBufferWaterMark): KQueueServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteSpinCount(writeSpinCount: int): KQueueServerChannelConfig</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];KQueueServerDomainSocketChannel1098233563[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)KQueueServerDomainSocketChannel</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   config: KQueueServerChannelConfig [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   local: DomainSocketAddress [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ config(): KQueueServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" ># doBind(localAddress: SocketAddress)</TD></TR><TR><TD ALIGN="LEFT" ># doClose()</TD></TR><TR><TD ALIGN="LEFT" >+ localAddress(): DomainSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># localAddress0(): DomainSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># newChildChannel(fd: int, addr: byte[], offset: int, len: int): Channel</TD></TR><TR><TD ALIGN="LEFT" >+ remoteAddress(): DomainSocketAddress</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];KQueueServerSocketChannel1098233563[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)KQueueServerSocketChannel</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   config: KQueueServerSocketChannelConfig [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ config(): KQueueServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" ># doBind(localAddress: SocketAddress)</TD></TR><TR><TD ALIGN="LEFT" ># isCompatible(loop: EventLoop): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ localAddress(): InetSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># newChildChannel(fd: int, address: byte[], offset: int, len: int): Channel</TD></TR><TR><TD ALIGN="LEFT" >+ remoteAddress(): InetSocketAddress</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];KQueueServerSocketUnsafe1324232305[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)KQueueServerSocketUnsafe</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   acceptedAddress: byte[] [0..*]</TD></TR><HR/><TR><TD ALIGN="LEFT" ># readReady(allocHandle: KQueueRecvByteAllocatorHandle)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];KQueueSocketChannel1098233563[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)KQueueSocketChannel</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   config: KQueueSocketChannelConfig [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ config(): KQueueSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" ># doConnect0(remoteAddress: SocketAddress, localAddress: SocketAddress): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ localAddress(): InetSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># newUnsafe(): AbstractKQueueUnsafe</TD></TR><TR><TD ALIGN="LEFT" >+ parent(): ServerSocketChannel</TD></TR><TR><TD ALIGN="LEFT" >+ remoteAddress(): InetSocketAddress</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];KQueueSocketChannelConfig1098233563[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)KQueueSocketChannelConfig</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   allowHalfClosure: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   tcpFastopen: boolean [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >- calculateMaxBytesPerGatheringWrite()</TD></TR><TR><TD ALIGN="LEFT" >+ getOption(option: ChannelOption&lt;T&gt;): T</TD></TR><TR><TD ALIGN="LEFT" >+ setAllocator(allocator: ByteBufAllocator): KQueueSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAllowHalfClosure(allowHalfClosure: boolean): KQueueSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAutoClose(autoClose: boolean): KQueueSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setAutoRead(autoRead: boolean): KQueueSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setConnectTimeoutMillis(connectTimeoutMillis: int): KQueueSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setKeepAlive(keepAlive: boolean): KQueueSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMaxMessagesPerRead(maxMessagesPerRead: int): KQueueSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setMessageSizeEstimator(estimator: MessageSizeEstimator): KQueueSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setOption(option: ChannelOption&lt;T&gt;, value: T): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ setPerformancePreferences(connectionTime: int, latency: int, bandwidth: int): KQueueSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setRcvAllocTransportProvidesGuess(transportProvidesGuess: boolean): KQueueSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setReceiveBufferSize(receiveBufferSize: int): KQueueSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setRecvByteBufAllocator(allocator: RecvByteBufAllocator): KQueueSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setReuseAddress(reuseAddress: boolean): KQueueSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setSendBufferSize(sendBufferSize: int): KQueueSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setSoLinger(soLinger: int): KQueueSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setTcpFastOpenConnect(fastOpenConnect: boolean): KQueueSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setTcpNoDelay(tcpNoDelay: boolean): KQueueSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setTrafficClass(trafficClass: int): KQueueSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferHighWaterMark(writeBufferHighWaterMark: int): KQueueSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferLowWaterMark(writeBufferLowWaterMark: int): KQueueSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteBufferWaterMark(writeBufferWaterMark: WriteBufferWaterMark): KQueueSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ setWriteSpinCount(writeSpinCount: int): KQueueSocketChannelConfig</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];KQueueStreamUnsafe1826463054[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)KQueueStreamUnsafe</TD></TR><HR/><TR><TD ALIGN="LEFT" >- handleReadException(pipeline: ChannelPipeline, byteBuf: ByteBuf, cause: Throwable, close: boolean, allocHandle: KQueueRecvByteAllocatorHandle)</TD></TR><TR><TD ALIGN="LEFT" ># prepareToClose(): Executor</TD></TR><TR><TD ALIGN="LEFT" ># readReady(allocHandle: KQueueRecvByteAllocatorHandle)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];LocalChannel381061612[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)LocalChannel</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   config: ChannelConfig [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   connectPromise: ChannelPromise [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   finishReadFuture: Future&lt;?&gt; [0..1]</TD></TR><TR><TD ALIGN="LEFT" >#   inboundBuffer: Queue&lt;Object&gt; [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   localAddress: LocalAddress [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   peer: LocalChannel [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   readInProgress: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   readTask: Runnable [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   remoteAddress: LocalAddress [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   shutdownHook: Runnable [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   state: State [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   writeInProgress: boolean [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ config(): ChannelConfig</TD></TR><TR><TD ALIGN="LEFT" ># doBeginRead()</TD></TR><TR><TD ALIGN="LEFT" ># doBind(localAddress: SocketAddress)</TD></TR><TR><TD ALIGN="LEFT" ># doClose()</TD></TR><TR><TD ALIGN="LEFT" ># doDeregister()</TD></TR><TR><TD ALIGN="LEFT" ># doDisconnect()</TD></TR><TR><TD ALIGN="LEFT" ># doRegister()</TD></TR><TR><TD ALIGN="LEFT" ># doWrite(in: ChannelOutboundBuffer)</TD></TR><TR><TD ALIGN="LEFT" >- finishPeerRead(peer: LocalChannel)</TD></TR><TR><TD ALIGN="LEFT" >- finishPeerRead0(peer: LocalChannel)</TD></TR><TR><TD ALIGN="LEFT" ># isCompatible(loop: EventLoop): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ localAddress(): LocalAddress</TD></TR><TR><TD ALIGN="LEFT" ># localAddress0(): SocketAddress</TD></TR><TR><TD ALIGN="LEFT" >+ metadata(): ChannelMetadata</TD></TR><TR><TD ALIGN="LEFT" ># newUnsafe(): AbstractUnsafe</TD></TR><TR><TD ALIGN="LEFT" >+ parent(): LocalServerChannel</TD></TR><TR><TD ALIGN="LEFT" >- readInbound()</TD></TR><TR><TD ALIGN="LEFT" >- releaseInboundBuffers()</TD></TR><TR><TD ALIGN="LEFT" >+ remoteAddress(): LocalAddress</TD></TR><TR><TD ALIGN="LEFT" ># remoteAddress0(): SocketAddress</TD></TR><TR><TD ALIGN="LEFT" >- runFinishPeerReadTask(peer: LocalChannel)</TD></TR><TR><TD ALIGN="LEFT" >- tryClose(isActive: boolean)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];LocalChannelRegistry381061612[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)LocalChannelRegistry</TD></TR><HR/><TR><TD ALIGN="LEFT" ># get(localAddress: SocketAddress): Channel</TD></TR><TR><TD ALIGN="LEFT" ># register(channel: Channel, oldLocalAddress: LocalAddress, localAddress: SocketAddress): LocalAddress</TD></TR><TR><TD ALIGN="LEFT" ># unregister(localAddress: LocalAddress)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];LocalServerChannel381061612[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)LocalServerChannel</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   acceptInProgress: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   config: ChannelConfig [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   inboundBuffer: Queue&lt;Object&gt; [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   localAddress: LocalAddress [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   shutdownHook: Runnable [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   state: int [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ config(): ChannelConfig</TD></TR><TR><TD ALIGN="LEFT" ># doBeginRead()</TD></TR><TR><TD ALIGN="LEFT" ># doBind(localAddress: SocketAddress)</TD></TR><TR><TD ALIGN="LEFT" ># doClose()</TD></TR><TR><TD ALIGN="LEFT" ># doDeregister()</TD></TR><TR><TD ALIGN="LEFT" ># doRegister()</TD></TR><TR><TD ALIGN="LEFT" ># isCompatible(loop: EventLoop): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ localAddress(): LocalAddress</TD></TR><TR><TD ALIGN="LEFT" ># localAddress0(): SocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># newLocalChannel(peer: LocalChannel): LocalChannel</TD></TR><TR><TD ALIGN="LEFT" >- readInbound()</TD></TR><TR><TD ALIGN="LEFT" >+ remoteAddress(): LocalAddress</TD></TR><TR><TD ALIGN="LEFT" ># serve(peer: LocalChannel): LocalChannel</TD></TR><TR><TD ALIGN="LEFT" >- serve0(child: LocalChannel)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];LocalUnsafe1502639110[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)LocalUnsafe</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ connect(remoteAddress: SocketAddress, localAddress: SocketAddress, promise: ChannelPromise)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];MaxMessageHandle1978987980[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)MaxMessageHandle</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   attemptedBytesRead: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   config: ChannelConfig [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   defaultMaybeMoreSupplier: UncheckedBooleanSupplier [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   lastBytesRead: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   maxMessagePerRead: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   respectMaybeMoreData: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   totalBytesRead: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   totalMessages: int [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ allocate(alloc: ByteBufAllocator): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ attemptedBytesRead(): int</TD></TR><TR><TD ALIGN="LEFT" >+ attemptedBytesRead(bytes: int)</TD></TR><TR><TD ALIGN="LEFT" >+ continueReading(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ continueReading(maybeMoreDataSupplier: UncheckedBooleanSupplier): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ incMessagesRead(amt: int)</TD></TR><TR><TD ALIGN="LEFT" >+ lastBytesRead(bytes: int)</TD></TR><TR><TD ALIGN="LEFT" >+ lastBytesRead(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readComplete()</TD></TR><TR><TD ALIGN="LEFT" >+ reset(config: ChannelConfig)</TD></TR><TR><TD ALIGN="LEFT" ># totalBytesRead(): int</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];MultithreadEventLoopGroup1443455697[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)MultithreadEventLoopGroup</TD></TR><HR/><TR><TD ALIGN="LEFT" ># newChild(executor: Executor, args: Object...): EventLoop</TD></TR><TR><TD ALIGN="LEFT" ># newDefaultThreadFactory(): ThreadFactory</TD></TR><TR><TD ALIGN="LEFT" >+ next(): EventLoop</TD></TR><TR><TD ALIGN="LEFT" >+ register(channel: Channel): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ register(promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ register(channel: Channel, promise: ChannelPromise): ChannelFuture</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];MyMessageProcessor1987616592[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)MyMessageProcessor</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   connected: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   maxMessagesPerWrite: int [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ processMessage(msg: Object): boolean</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];Native1098233563[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)Native</TD></TR><HR/><TR><TD ALIGN="LEFT" ># keventAddUserEvent(kqueueFd: int, ident: int): int</TD></TR><TR><TD ALIGN="LEFT" ># keventTriggerUserEvent(kqueueFd: int, ident: int): int</TD></TR><TR><TD ALIGN="LEFT" ># keventWait(kqueueFd: int, changeList: KQueueEventArray, eventList: KQueueEventArray, tvSec: int, tvNsec: int): int</TD></TR><TR><TD ALIGN="LEFT" >- keventWait(kqueueFd: int, changeListAddress: long, changeListLength: int, eventListAddress: long, eventListLength: int, tvSec: int, tvNsec: int): int</TD></TR><TR><TD ALIGN="LEFT" >- kqueueCreate(): int</TD></TR><TR><TD ALIGN="LEFT" >- loadNativeLibrary()</TD></TR><TR><TD ALIGN="LEFT" ># newKQueue(): FileDescriptor</TD></TR><TR><TD ALIGN="LEFT" ># offsetofKEventFFlags(): int</TD></TR><TR><TD ALIGN="LEFT" ># offsetofKEventFilter(): int</TD></TR><TR><TD ALIGN="LEFT" ># offsetofKEventFlags(): int</TD></TR><TR><TD ALIGN="LEFT" ># offsetofKEventIdent(): int</TD></TR><TR><TD ALIGN="LEFT" ># offsetofKeventData(): int</TD></TR><TR><TD ALIGN="LEFT" >- registerUnix(): int</TD></TR><TR><TD ALIGN="LEFT" ># sizeofKEvent(): int</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];NioByteUnsafe230911422[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)NioByteUnsafe</TD></TR><HR/><TR><TD ALIGN="LEFT" >- closeOnRead(pipeline: ChannelPipeline)</TD></TR><TR><TD ALIGN="LEFT" >- handleReadException(pipeline: ChannelPipeline, byteBuf: ByteBuf, cause: Throwable, close: boolean, allocHandle: Handle)</TD></TR><TR><TD ALIGN="LEFT" >+ read()</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];NioDatagramChannel1086947528[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)NioDatagramChannel</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   config: DatagramChannelConfig [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   memberships: Map&lt;InetAddress, List&lt;MembershipKey&gt;&gt; [0..*]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ block(multicastAddress: InetAddress, networkInterface: NetworkInterface, sourceToBlock: InetAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ block(multicastAddress: InetAddress, networkInterface: NetworkInterface, sourceToBlock: InetAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ block(multicastAddress: InetAddress, sourceToBlock: InetAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ block(multicastAddress: InetAddress, sourceToBlock: InetAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >- checkJavaVersion()</TD></TR><TR><TD ALIGN="LEFT" >- checkUnresolved(envelope: AddressedEnvelope&lt;?, ?&gt;)</TD></TR><TR><TD ALIGN="LEFT" ># clearReadPending0()</TD></TR><TR><TD ALIGN="LEFT" ># closeOnReadError(cause: Throwable): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ config(): DatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" ># continueOnWriteError(): boolean</TD></TR><TR><TD ALIGN="LEFT" ># continueReading(allocHandle: Handle): boolean</TD></TR><TR><TD ALIGN="LEFT" ># doBind(localAddress: SocketAddress)</TD></TR><TR><TD ALIGN="LEFT" >- doBind0(localAddress: SocketAddress)</TD></TR><TR><TD ALIGN="LEFT" ># doClose()</TD></TR><TR><TD ALIGN="LEFT" ># doConnect(remoteAddress: SocketAddress, localAddress: SocketAddress): boolean</TD></TR><TR><TD ALIGN="LEFT" ># doDisconnect()</TD></TR><TR><TD ALIGN="LEFT" ># doFinishConnect()</TD></TR><TR><TD ALIGN="LEFT" ># doReadMessages(buf: List&lt;Object&gt;): int</TD></TR><TR><TD ALIGN="LEFT" ># doWriteMessage(msg: Object, in: ChannelOutboundBuffer): boolean</TD></TR><TR><TD ALIGN="LEFT" ># filterOutboundMessage(msg: Object): Object</TD></TR><TR><TD ALIGN="LEFT" >- isSingleDirectBuffer(buf: ByteBuf): boolean</TD></TR><TR><TD ALIGN="LEFT" ># javaChannel(): DatagramChannel</TD></TR><TR><TD ALIGN="LEFT" >+ joinGroup(multicastAddress: InetAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ joinGroup(multicastAddress: InetAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ joinGroup(multicastAddress: InetSocketAddress, networkInterface: NetworkInterface): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ joinGroup(multicastAddress: InetSocketAddress, networkInterface: NetworkInterface, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ joinGroup(multicastAddress: InetAddress, networkInterface: NetworkInterface, source: InetAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ joinGroup(multicastAddress: InetAddress, networkInterface: NetworkInterface, source: InetAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ leaveGroup(multicastAddress: InetAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ leaveGroup(multicastAddress: InetAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ leaveGroup(multicastAddress: InetSocketAddress, networkInterface: NetworkInterface): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ leaveGroup(multicastAddress: InetSocketAddress, networkInterface: NetworkInterface, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ leaveGroup(multicastAddress: InetAddress, networkInterface: NetworkInterface, source: InetAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ leaveGroup(multicastAddress: InetAddress, networkInterface: NetworkInterface, source: InetAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ localAddress(): InetSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># localAddress0(): SocketAddress</TD></TR><TR><TD ALIGN="LEFT" >+ metadata(): ChannelMetadata</TD></TR><TR><TD ALIGN="LEFT" >- newSocket(provider: SelectorProvider): DatagramChannel</TD></TR><TR><TD ALIGN="LEFT" >- newSocket(provider: SelectorProvider, ipFamily: InternetProtocolFamily): DatagramChannel</TD></TR><TR><TD ALIGN="LEFT" >+ remoteAddress(): InetSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># remoteAddress0(): SocketAddress</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];NioEventLoop1712128213[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)NioEventLoop</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   cancelledKeys: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   ioRatio: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   needsToSelectAgain: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   nextWakeupNanos: AtomicLong [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   provider: SelectorProvider [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   selectNowSupplier: IntSupplier [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   selectStrategy: SelectStrategy [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   selectedKeys: SelectedSelectionKeySet [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   selector: Selector [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   unwrappedSelector: Selector [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" ># afterScheduledTaskSubmitted(deadlineNanos: long): boolean</TD></TR><TR><TD ALIGN="LEFT" ># beforeScheduledTaskSubmitted(deadlineNanos: long): boolean</TD></TR><TR><TD ALIGN="LEFT" ># cancel(key: SelectionKey)</TD></TR><TR><TD ALIGN="LEFT" ># cleanup()</TD></TR><TR><TD ALIGN="LEFT" >- closeAll()</TD></TR><TR><TD ALIGN="LEFT" >- handleLoopException(t: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >- invokeChannelUnregistered(task: NioTask&lt;SelectableChannel&gt;, k: SelectionKey, cause: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >- newTaskQueue(queueFactory: EventLoopTaskQueueFactory): Queue&lt;Runnable&gt;</TD></TR><TR><TD ALIGN="LEFT" ># newTaskQueue(maxPendingTasks: int): Queue&lt;Runnable&gt;</TD></TR><TR><TD ALIGN="LEFT" >- newTaskQueue0(maxPendingTasks: int): Queue&lt;Runnable&gt;</TD></TR><TR><TD ALIGN="LEFT" >- openSelector(): SelectorTuple</TD></TR><TR><TD ALIGN="LEFT" >- processSelectedKey(k: SelectionKey, ch: AbstractNioChannel)</TD></TR><TR><TD ALIGN="LEFT" >- processSelectedKey(k: SelectionKey, task: NioTask&lt;SelectableChannel&gt;)</TD></TR><TR><TD ALIGN="LEFT" >- processSelectedKeys()</TD></TR><TR><TD ALIGN="LEFT" >- processSelectedKeysOptimized()</TD></TR><TR><TD ALIGN="LEFT" >- processSelectedKeysPlain(selectedKeys: Set&lt;SelectionKey&gt;)</TD></TR><TR><TD ALIGN="LEFT" >+ rebuildSelector()</TD></TR><TR><TD ALIGN="LEFT" >- rebuildSelector0()</TD></TR><TR><TD ALIGN="LEFT" >+ register(ch: SelectableChannel, interestOps: int, task: NioTask&lt;?&gt;)</TD></TR><TR><TD ALIGN="LEFT" >- register0(ch: SelectableChannel, interestOps: int, task: NioTask&lt;?&gt;)</TD></TR><TR><TD ALIGN="LEFT" >+ registeredChannels(): int</TD></TR><TR><TD ALIGN="LEFT" >+ registeredChannelsIterator(): Iterator&lt;Channel&gt;</TD></TR><TR><TD ALIGN="LEFT" ># run()</TD></TR><TR><TD ALIGN="LEFT" >- select(deadlineNanos: long): int</TD></TR><TR><TD ALIGN="LEFT" >- selectAgain()</TD></TR><TR><TD ALIGN="LEFT" ># selectNow(): int</TD></TR><TR><TD ALIGN="LEFT" >+ selectorProvider(): SelectorProvider</TD></TR><TR><TD ALIGN="LEFT" >- unexpectedSelectorWakeup(selectCnt: int): boolean</TD></TR><TR><TD ALIGN="LEFT" ># unwrappedSelector(): Selector</TD></TR><TR><TD ALIGN="LEFT" ># wakeup(inEventLoop: boolean)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];NioMessageUnsafe1150822965[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)NioMessageUnsafe</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   readBuf: List&lt;Object&gt; [0..*]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ read()</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];NioSctpChannel1638608943[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)NioSctpChannel</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   config: SctpChannelConfig [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   notificationHandler: NotificationHandler&lt;?&gt; [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ allLocalAddresses(): Set&lt;InetSocketAddress&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ allRemoteAddresses(): Set&lt;InetSocketAddress&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ association(): Association</TD></TR><TR><TD ALIGN="LEFT" >+ bindAddress(localAddress: InetAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ bindAddress(localAddress: InetAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ config(): SctpChannelConfig</TD></TR><TR><TD ALIGN="LEFT" ># doBind(localAddress: SocketAddress)</TD></TR><TR><TD ALIGN="LEFT" ># doClose()</TD></TR><TR><TD ALIGN="LEFT" ># doConnect(remoteAddress: SocketAddress, localAddress: SocketAddress): boolean</TD></TR><TR><TD ALIGN="LEFT" ># doDisconnect()</TD></TR><TR><TD ALIGN="LEFT" ># doFinishConnect()</TD></TR><TR><TD ALIGN="LEFT" ># doReadMessages(buf: List&lt;Object&gt;): int</TD></TR><TR><TD ALIGN="LEFT" ># doWriteMessage(msg: Object, in: ChannelOutboundBuffer): boolean</TD></TR><TR><TD ALIGN="LEFT" ># filterOutboundMessage(msg: Object): Object</TD></TR><TR><TD ALIGN="LEFT" ># javaChannel(): SctpChannel</TD></TR><TR><TD ALIGN="LEFT" >+ localAddress(): InetSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># localAddress0(): SocketAddress</TD></TR><TR><TD ALIGN="LEFT" >+ metadata(): ChannelMetadata</TD></TR><TR><TD ALIGN="LEFT" >- newSctpChannel(): SctpChannel</TD></TR><TR><TD ALIGN="LEFT" >+ parent(): SctpServerChannel</TD></TR><TR><TD ALIGN="LEFT" >+ remoteAddress(): InetSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># remoteAddress0(): SocketAddress</TD></TR><TR><TD ALIGN="LEFT" >+ unbindAddress(localAddress: InetAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ unbindAddress(localAddress: InetAddress, promise: ChannelPromise): ChannelFuture</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];NioSctpServerChannel1638608943[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)NioSctpServerChannel</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   config: SctpServerChannelConfig [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ allLocalAddresses(): Set&lt;InetSocketAddress&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ bindAddress(localAddress: InetAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ bindAddress(localAddress: InetAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ config(): SctpServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" ># doBind(localAddress: SocketAddress)</TD></TR><TR><TD ALIGN="LEFT" ># doClose()</TD></TR><TR><TD ALIGN="LEFT" ># doConnect(remoteAddress: SocketAddress, localAddress: SocketAddress): boolean</TD></TR><TR><TD ALIGN="LEFT" ># doDisconnect()</TD></TR><TR><TD ALIGN="LEFT" ># doFinishConnect()</TD></TR><TR><TD ALIGN="LEFT" ># doReadMessages(buf: List&lt;Object&gt;): int</TD></TR><TR><TD ALIGN="LEFT" ># doWriteMessage(msg: Object, in: ChannelOutboundBuffer): boolean</TD></TR><TR><TD ALIGN="LEFT" ># filterOutboundMessage(msg: Object): Object</TD></TR><TR><TD ALIGN="LEFT" ># javaChannel(): SctpServerChannel</TD></TR><TR><TD ALIGN="LEFT" >+ localAddress(): InetSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># localAddress0(): SocketAddress</TD></TR><TR><TD ALIGN="LEFT" >+ metadata(): ChannelMetadata</TD></TR><TR><TD ALIGN="LEFT" >- newSocket(): SctpServerChannel</TD></TR><TR><TD ALIGN="LEFT" >+ remoteAddress(): InetSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># remoteAddress0(): SocketAddress</TD></TR><TR><TD ALIGN="LEFT" >+ unbindAddress(localAddress: InetAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ unbindAddress(localAddress: InetAddress, promise: ChannelPromise): ChannelFuture</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];NioServerSocketChannel1086947528[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)NioServerSocketChannel</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   config: ServerSocketChannelConfig [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" ># closeOnReadError(cause: Throwable): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ config(): ServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" ># doBind(localAddress: SocketAddress)</TD></TR><TR><TD ALIGN="LEFT" ># doClose()</TD></TR><TR><TD ALIGN="LEFT" ># doConnect(remoteAddress: SocketAddress, localAddress: SocketAddress): boolean</TD></TR><TR><TD ALIGN="LEFT" ># doDisconnect()</TD></TR><TR><TD ALIGN="LEFT" ># doFinishConnect()</TD></TR><TR><TD ALIGN="LEFT" ># doReadMessages(buf: List&lt;Object&gt;): int</TD></TR><TR><TD ALIGN="LEFT" ># doWriteMessage(msg: Object, in: ChannelOutboundBuffer): boolean</TD></TR><TR><TD ALIGN="LEFT" ># filterOutboundMessage(msg: Object): Object</TD></TR><TR><TD ALIGN="LEFT" ># javaChannel(): ServerSocketChannel</TD></TR><TR><TD ALIGN="LEFT" >+ localAddress(): InetSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># localAddress0(): SocketAddress</TD></TR><TR><TD ALIGN="LEFT" >+ metadata(): ChannelMetadata</TD></TR><TR><TD ALIGN="LEFT" >- newChannel(provider: SelectorProvider, family: InternetProtocolFamily): ServerSocketChannel</TD></TR><TR><TD ALIGN="LEFT" >+ remoteAddress(): InetSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># remoteAddress0(): SocketAddress</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];NioSocketChannel1086947528[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)NioSocketChannel</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   config: SocketChannelConfig [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >- adjustMaxBytesPerGatheringWrite(attempted: int, written: int, oldMaxBytesPerGatheringWrite: int)</TD></TR><TR><TD ALIGN="LEFT" >+ config(): SocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" ># doBind(localAddress: SocketAddress)</TD></TR><TR><TD ALIGN="LEFT" >- doBind0(localAddress: SocketAddress)</TD></TR><TR><TD ALIGN="LEFT" ># doClose()</TD></TR><TR><TD ALIGN="LEFT" ># doConnect(remoteAddress: SocketAddress, localAddress: SocketAddress): boolean</TD></TR><TR><TD ALIGN="LEFT" ># doDisconnect()</TD></TR><TR><TD ALIGN="LEFT" ># doFinishConnect()</TD></TR><TR><TD ALIGN="LEFT" ># doReadBytes(byteBuf: ByteBuf): int</TD></TR><TR><TD ALIGN="LEFT" ># doShutdownOutput()</TD></TR><TR><TD ALIGN="LEFT" ># doWrite(in: ChannelOutboundBuffer)</TD></TR><TR><TD ALIGN="LEFT" ># doWriteBytes(buf: ByteBuf): int</TD></TR><TR><TD ALIGN="LEFT" ># doWriteFileRegion(region: FileRegion): long</TD></TR><TR><TD ALIGN="LEFT" ># javaChannel(): SocketChannel</TD></TR><TR><TD ALIGN="LEFT" >+ localAddress(): InetSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># localAddress0(): SocketAddress</TD></TR><TR><TD ALIGN="LEFT" >- newChannel(provider: SelectorProvider, family: InternetProtocolFamily): SocketChannel</TD></TR><TR><TD ALIGN="LEFT" ># newUnsafe(): AbstractNioUnsafe</TD></TR><TR><TD ALIGN="LEFT" >+ parent(): ServerSocketChannel</TD></TR><TR><TD ALIGN="LEFT" >+ remoteAddress(): InetSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># remoteAddress0(): SocketAddress</TD></TR><TR><TD ALIGN="LEFT" >+ shutdown(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ shutdown(promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >- shutdownDone(shutdownOutputFuture: ChannelFuture, shutdownInputFuture: ChannelFuture, promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >+ shutdownInput(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ shutdownInput(promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >- shutdownInput0(promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >- shutdownInput0()</TD></TR><TR><TD ALIGN="LEFT" >+ shutdownOutput(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ shutdownOutput(promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >- shutdownOutputDone(shutdownOutputFuture: ChannelFuture, promise: ChannelPromise)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];NioUdtAcceptorChannel224852652[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)NioUdtAcceptorChannel</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   config: UdtServerChannelConfig [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ config(): UdtServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" ># doBind(localAddress: SocketAddress)</TD></TR><TR><TD ALIGN="LEFT" ># doClose()</TD></TR><TR><TD ALIGN="LEFT" ># doConnect(remoteAddress: SocketAddress, localAddress: SocketAddress): boolean</TD></TR><TR><TD ALIGN="LEFT" ># doDisconnect()</TD></TR><TR><TD ALIGN="LEFT" ># doFinishConnect()</TD></TR><TR><TD ALIGN="LEFT" ># doReadMessages(buf: List&lt;Object&gt;): int</TD></TR><TR><TD ALIGN="LEFT" ># doWriteMessage(msg: Object, in: ChannelOutboundBuffer): boolean</TD></TR><TR><TD ALIGN="LEFT" ># filterOutboundMessage(msg: Object): Object</TD></TR><TR><TD ALIGN="LEFT" ># javaChannel(): ServerSocketChannelUDT</TD></TR><TR><TD ALIGN="LEFT" >+ localAddress(): InetSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># localAddress0(): SocketAddress</TD></TR><TR><TD ALIGN="LEFT" >+ metadata(): ChannelMetadata</TD></TR><TR><TD ALIGN="LEFT" ># newConnectorChannel(channelUDT: SocketChannelUDT): UdtChannel</TD></TR><TR><TD ALIGN="LEFT" >+ remoteAddress(): InetSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># remoteAddress0(): SocketAddress</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];NioUdtByteConnectorChannel224852652[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)NioUdtByteConnectorChannel</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   config: UdtChannelConfig [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ config(): UdtChannelConfig</TD></TR><TR><TD ALIGN="LEFT" ># doBind(localAddress: SocketAddress)</TD></TR><TR><TD ALIGN="LEFT" ># doClose()</TD></TR><TR><TD ALIGN="LEFT" ># doConnect(remoteAddress: SocketAddress, localAddress: SocketAddress): boolean</TD></TR><TR><TD ALIGN="LEFT" ># doDisconnect()</TD></TR><TR><TD ALIGN="LEFT" ># doFinishConnect()</TD></TR><TR><TD ALIGN="LEFT" ># doReadBytes(byteBuf: ByteBuf): int</TD></TR><TR><TD ALIGN="LEFT" ># doWriteBytes(byteBuf: ByteBuf): int</TD></TR><TR><TD ALIGN="LEFT" ># doWriteFileRegion(region: FileRegion): long</TD></TR><TR><TD ALIGN="LEFT" ># javaChannel(): SocketChannelUDT</TD></TR><TR><TD ALIGN="LEFT" >+ localAddress(): InetSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># localAddress0(): SocketAddress</TD></TR><TR><TD ALIGN="LEFT" >- privilegedBind(socketChannel: SocketChannelUDT, localAddress: SocketAddress)</TD></TR><TR><TD ALIGN="LEFT" >+ remoteAddress(): InetSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># remoteAddress0(): SocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># shutdownInput(): ChannelFuture</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];NioUdtMessageConnectorChannel224852652[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)NioUdtMessageConnectorChannel</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   config: UdtChannelConfig [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ config(): UdtChannelConfig</TD></TR><TR><TD ALIGN="LEFT" ># doBind(localAddress: SocketAddress)</TD></TR><TR><TD ALIGN="LEFT" ># doClose()</TD></TR><TR><TD ALIGN="LEFT" ># doConnect(remoteAddress: SocketAddress, localAddress: SocketAddress): boolean</TD></TR><TR><TD ALIGN="LEFT" ># doDisconnect()</TD></TR><TR><TD ALIGN="LEFT" ># doFinishConnect()</TD></TR><TR><TD ALIGN="LEFT" ># doReadMessages(buf: List&lt;Object&gt;): int</TD></TR><TR><TD ALIGN="LEFT" ># doWriteMessage(msg: Object, in: ChannelOutboundBuffer): boolean</TD></TR><TR><TD ALIGN="LEFT" ># javaChannel(): SocketChannelUDT</TD></TR><TR><TD ALIGN="LEFT" >+ localAddress(): InetSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># localAddress0(): SocketAddress</TD></TR><TR><TD ALIGN="LEFT" >+ metadata(): ChannelMetadata</TD></TR><TR><TD ALIGN="LEFT" >- privilegedBind(socketChannel: SocketChannelUDT, localAddress: SocketAddress)</TD></TR><TR><TD ALIGN="LEFT" >+ remoteAddress(): InetSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># remoteAddress0(): SocketAddress</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];OioDatagramChannel1086946567[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)OioDatagramChannel</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   config: OioDatagramChannelConfig [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   socket: MulticastSocket [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   tmpPacket: DatagramPacket [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ block(multicastAddress: InetAddress, networkInterface: NetworkInterface, sourceToBlock: InetAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ block(multicastAddress: InetAddress, networkInterface: NetworkInterface, sourceToBlock: InetAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ block(multicastAddress: InetAddress, sourceToBlock: InetAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ block(multicastAddress: InetAddress, sourceToBlock: InetAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >- checkUnresolved(envelope: AddressedEnvelope&lt;?, ?&gt;)</TD></TR><TR><TD ALIGN="LEFT" >+ config(): DatagramChannelConfig</TD></TR><TR><TD ALIGN="LEFT" ># doBind(localAddress: SocketAddress)</TD></TR><TR><TD ALIGN="LEFT" ># doClose()</TD></TR><TR><TD ALIGN="LEFT" ># doConnect(remoteAddress: SocketAddress, localAddress: SocketAddress)</TD></TR><TR><TD ALIGN="LEFT" ># doDisconnect()</TD></TR><TR><TD ALIGN="LEFT" ># doReadMessages(buf: List&lt;Object&gt;): int</TD></TR><TR><TD ALIGN="LEFT" ># doWrite(in: ChannelOutboundBuffer)</TD></TR><TR><TD ALIGN="LEFT" >- ensureBound()</TD></TR><TR><TD ALIGN="LEFT" ># filterOutboundMessage(msg: Object): Object</TD></TR><TR><TD ALIGN="LEFT" >+ joinGroup(multicastAddress: InetAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ joinGroup(multicastAddress: InetAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ joinGroup(multicastAddress: InetSocketAddress, networkInterface: NetworkInterface): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ joinGroup(multicastAddress: InetSocketAddress, networkInterface: NetworkInterface, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ joinGroup(multicastAddress: InetAddress, networkInterface: NetworkInterface, source: InetAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ joinGroup(multicastAddress: InetAddress, networkInterface: NetworkInterface, source: InetAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ leaveGroup(multicastAddress: InetAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ leaveGroup(multicastAddress: InetAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ leaveGroup(multicastAddress: InetSocketAddress, networkInterface: NetworkInterface): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ leaveGroup(multicastAddress: InetSocketAddress, networkInterface: NetworkInterface, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ leaveGroup(multicastAddress: InetAddress, networkInterface: NetworkInterface, source: InetAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ leaveGroup(multicastAddress: InetAddress, networkInterface: NetworkInterface, source: InetAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ localAddress(): InetSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># localAddress0(): SocketAddress</TD></TR><TR><TD ALIGN="LEFT" >+ metadata(): ChannelMetadata</TD></TR><TR><TD ALIGN="LEFT" >- newSocket(): MulticastSocket</TD></TR><TR><TD ALIGN="LEFT" >+ remoteAddress(): InetSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># remoteAddress0(): SocketAddress</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];OioSctpChannel1638607982[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)OioSctpChannel</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   ch: SctpChannel [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   config: SctpChannelConfig [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   connectSelector: Selector [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   notificationHandler: NotificationHandler&lt;?&gt; [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   readSelector: Selector [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   writeSelector: Selector [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ allLocalAddresses(): Set&lt;InetSocketAddress&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ allRemoteAddresses(): Set&lt;InetSocketAddress&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ association(): Association</TD></TR><TR><TD ALIGN="LEFT" >+ bindAddress(localAddress: InetAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ bindAddress(localAddress: InetAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >- closeSelector(selectorName: String, selector: Selector)</TD></TR><TR><TD ALIGN="LEFT" >+ config(): SctpChannelConfig</TD></TR><TR><TD ALIGN="LEFT" ># doBind(localAddress: SocketAddress)</TD></TR><TR><TD ALIGN="LEFT" ># doClose()</TD></TR><TR><TD ALIGN="LEFT" ># doConnect(remoteAddress: SocketAddress, localAddress: SocketAddress)</TD></TR><TR><TD ALIGN="LEFT" ># doDisconnect()</TD></TR><TR><TD ALIGN="LEFT" ># doReadMessages(msgs: List&lt;Object&gt;): int</TD></TR><TR><TD ALIGN="LEFT" ># doWrite(in: ChannelOutboundBuffer)</TD></TR><TR><TD ALIGN="LEFT" ># filterOutboundMessage(msg: Object): Object</TD></TR><TR><TD ALIGN="LEFT" >+ localAddress(): InetSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># localAddress0(): SocketAddress</TD></TR><TR><TD ALIGN="LEFT" >+ metadata(): ChannelMetadata</TD></TR><TR><TD ALIGN="LEFT" >- openChannel(): SctpChannel</TD></TR><TR><TD ALIGN="LEFT" >+ parent(): SctpServerChannel</TD></TR><TR><TD ALIGN="LEFT" >+ remoteAddress(): InetSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># remoteAddress0(): SocketAddress</TD></TR><TR><TD ALIGN="LEFT" >+ unbindAddress(localAddress: InetAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ unbindAddress(localAddress: InetAddress, promise: ChannelPromise): ChannelFuture</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];OioSctpServerChannel1638607982[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)OioSctpServerChannel</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   config: SctpServerChannelConfig [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   sch: SctpServerChannel [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   selector: Selector [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ allLocalAddresses(): Set&lt;InetSocketAddress&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ bindAddress(localAddress: InetAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ bindAddress(localAddress: InetAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ config(): SctpServerChannelConfig</TD></TR><TR><TD ALIGN="LEFT" ># doBind(localAddress: SocketAddress)</TD></TR><TR><TD ALIGN="LEFT" ># doClose()</TD></TR><TR><TD ALIGN="LEFT" ># doConnect(remoteAddress: SocketAddress, localAddress: SocketAddress)</TD></TR><TR><TD ALIGN="LEFT" ># doDisconnect()</TD></TR><TR><TD ALIGN="LEFT" ># doReadMessages(buf: List&lt;Object&gt;): int</TD></TR><TR><TD ALIGN="LEFT" ># doWrite(in: ChannelOutboundBuffer)</TD></TR><TR><TD ALIGN="LEFT" ># filterOutboundMessage(msg: Object): Object</TD></TR><TR><TD ALIGN="LEFT" >+ localAddress(): InetSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># localAddress0(): SocketAddress</TD></TR><TR><TD ALIGN="LEFT" >+ metadata(): ChannelMetadata</TD></TR><TR><TD ALIGN="LEFT" >- newServerSocket(): SctpServerChannel</TD></TR><TR><TD ALIGN="LEFT" >+ remoteAddress(): InetSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># remoteAddress0(): SocketAddress</TD></TR><TR><TD ALIGN="LEFT" >+ unbindAddress(localAddress: InetAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ unbindAddress(localAddress: InetAddress, promise: ChannelPromise): ChannelFuture</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];OioServerSocketChannel1086946567[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)OioServerSocketChannel</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   config: OioServerSocketChannelConfig [0..1]</TD></TR><TR><TD ALIGN="LEFT" >#   socket: ServerSocket [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" ># clearReadPending0()</TD></TR><TR><TD ALIGN="LEFT" >+ config(): OioServerSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" ># doBind(localAddress: SocketAddress)</TD></TR><TR><TD ALIGN="LEFT" ># doClose()</TD></TR><TR><TD ALIGN="LEFT" ># doConnect(remoteAddress: SocketAddress, localAddress: SocketAddress)</TD></TR><TR><TD ALIGN="LEFT" ># doDisconnect()</TD></TR><TR><TD ALIGN="LEFT" ># doReadMessages(buf: List&lt;Object&gt;): int</TD></TR><TR><TD ALIGN="LEFT" ># doWrite(in: ChannelOutboundBuffer)</TD></TR><TR><TD ALIGN="LEFT" ># filterOutboundMessage(msg: Object): Object</TD></TR><TR><TD ALIGN="LEFT" >+ localAddress(): InetSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># localAddress0(): SocketAddress</TD></TR><TR><TD ALIGN="LEFT" >+ metadata(): ChannelMetadata</TD></TR><TR><TD ALIGN="LEFT" >- newServerSocket(): ServerSocket</TD></TR><TR><TD ALIGN="LEFT" >+ remoteAddress(): InetSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># remoteAddress0(): SocketAddress</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];OioSocketChannel1086946567[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)OioSocketChannel</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   config: OioSocketChannelConfig [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   socket: Socket [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" ># checkInputShutdown(): boolean</TD></TR><TR><TD ALIGN="LEFT" ># clearReadPending0()</TD></TR><TR><TD ALIGN="LEFT" >+ config(): OioSocketChannelConfig</TD></TR><TR><TD ALIGN="LEFT" ># doBind(localAddress: SocketAddress)</TD></TR><TR><TD ALIGN="LEFT" ># doClose()</TD></TR><TR><TD ALIGN="LEFT" ># doConnect(remoteAddress: SocketAddress, localAddress: SocketAddress)</TD></TR><TR><TD ALIGN="LEFT" ># doDisconnect()</TD></TR><TR><TD ALIGN="LEFT" ># doReadBytes(buf: ByteBuf): int</TD></TR><TR><TD ALIGN="LEFT" ># doShutdownOutput()</TD></TR><TR><TD ALIGN="LEFT" >+ localAddress(): InetSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># localAddress0(): SocketAddress</TD></TR><TR><TD ALIGN="LEFT" >+ parent(): ServerSocketChannel</TD></TR><TR><TD ALIGN="LEFT" >+ remoteAddress(): InetSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># remoteAddress0(): SocketAddress</TD></TR><TR><TD ALIGN="LEFT" >+ shutdown(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ shutdown(promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >- shutdownDone(shutdownOutputFuture: ChannelFuture, shutdownInputFuture: ChannelFuture, promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >+ shutdownInput(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ shutdownInput(promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >- shutdownInput0(promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >+ shutdownOutput(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ shutdownOutput(promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >- shutdownOutput0(promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >- shutdownOutput0()</TD></TR><TR><TD ALIGN="LEFT" >- shutdownOutputDone(shutdownOutputFuture: ChannelFuture, promise: ChannelPromise)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];PendingBytesTracker1443455697[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)PendingBytesTracker</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   estimatorHandle: Handle [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ decrementPendingOutboundBytes(bytes: long)</TD></TR><TR><TD ALIGN="LEFT" >+ incrementPendingOutboundBytes(bytes: long)</TD></TR><TR><TD ALIGN="LEFT" ># newTracker(channel: Channel): PendingBytesTracker</TD></TR><TR><TD ALIGN="LEFT" >+ size(msg: Object): int</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];PendingWriteQueue1443455697[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)PendingWriteQueue</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   bytes: long [1]</TD></TR><TR><TD ALIGN="LEFT" >-   executor: EventExecutor [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   head: PendingWrite [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   invoker: ChannelOutboundInvoker [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   size: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   tail: PendingWrite [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   tracker: PendingBytesTracker [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ add(msg: Object, promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >- assertEmpty()</TD></TR><TR><TD ALIGN="LEFT" >+ bytes(): long</TD></TR><TR><TD ALIGN="LEFT" >+ current(): Object</TD></TR><TR><TD ALIGN="LEFT" >- recycle(write: PendingWrite, update: boolean)</TD></TR><TR><TD ALIGN="LEFT" >+ remove(): ChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ removeAndFail(cause: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >+ removeAndFailAll(cause: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >+ removeAndWrite(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ removeAndWriteAll(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >- safeFail(promise: ChannelPromise, cause: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >+ size(): int</TD></TR><TR><TD ALIGN="LEFT" >- size(msg: Object): int</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];RxtxChannel1536500905[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)RxtxChannel</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   config: RxtxChannelConfig [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   deviceAddress: RxtxDeviceAddress [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   open: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   serialPort: SerialPort [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ config(): RxtxChannelConfig</TD></TR><TR><TD ALIGN="LEFT" ># doBind(localAddress: SocketAddress)</TD></TR><TR><TD ALIGN="LEFT" ># doClose()</TD></TR><TR><TD ALIGN="LEFT" ># doConnect(remoteAddress: SocketAddress, localAddress: SocketAddress)</TD></TR><TR><TD ALIGN="LEFT" ># doDisconnect()</TD></TR><TR><TD ALIGN="LEFT" ># doInit()</TD></TR><TR><TD ALIGN="LEFT" >+ localAddress(): RxtxDeviceAddress</TD></TR><TR><TD ALIGN="LEFT" ># localAddress0(): RxtxDeviceAddress</TD></TR><TR><TD ALIGN="LEFT" ># newUnsafe(): AbstractUnsafe</TD></TR><TR><TD ALIGN="LEFT" >+ remoteAddress(): RxtxDeviceAddress</TD></TR><TR><TD ALIGN="LEFT" ># remoteAddress0(): RxtxDeviceAddress</TD></TR><TR><TD ALIGN="LEFT" ># shutdownInput(): ChannelFuture</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];RxtxUnsafe1964255116[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)RxtxUnsafe</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ connect(remoteAddress: SocketAddress, localAddress: SocketAddress, promise: ChannelPromise)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];ServerChannelRecvByteBufAllocator1443455697[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)ServerChannelRecvByteBufAllocator</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ newHandle(): Handle</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];SingleThreadEventLoop1443455697[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)SingleThreadEventLoop</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   tailTasks: Queue&lt;Runnable&gt; [0..*]</TD></TR><HR/><TR><TD ALIGN="LEFT" ># afterRunningAllTasks()</TD></TR><TR><TD ALIGN="LEFT" >+ executeAfterEventLoopIteration(task: Runnable)</TD></TR><TR><TD ALIGN="LEFT" >+ next(): EventLoop</TD></TR><TR><TD ALIGN="LEFT" >+ parent(): EventLoopGroup</TD></TR><TR><TD ALIGN="LEFT" >+ pendingTasks(): int</TD></TR><TR><TD ALIGN="LEFT" >+ register(channel: Channel): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ register(promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ register(channel: Channel, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ registeredChannels(): int</TD></TR><TR><TD ALIGN="LEFT" >+ registeredChannelsIterator(): Iterator&lt;Channel&gt;</TD></TR><TR><TD ALIGN="LEFT" ># removeAfterEventLoopIterationTask(task: Runnable): boolean</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];Socket1536580327[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)Socket</TD></TR><HR/><TR><TD ALIGN="LEFT" >#   ipv6: boolean [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ accept(addr: byte[]): int</TD></TR><TR><TD ALIGN="LEFT" >- accept(fd: int, addr: byte[]): int</TD></TR><TR><TD ALIGN="LEFT" >+ bind(socketAddress: SocketAddress)</TD></TR><TR><TD ALIGN="LEFT" >- bind(fd: int, ipv6: boolean, address: byte[], scopeId: int, port: int): int</TD></TR><TR><TD ALIGN="LEFT" >- bindDomainSocket(fd: int, path: byte[]): int</TD></TR><TR><TD ALIGN="LEFT" >+ connect(socketAddress: SocketAddress): boolean</TD></TR><TR><TD ALIGN="LEFT" >- connect(fd: int, ipv6: boolean, address: byte[], scopeId: int, port: int): int</TD></TR><TR><TD ALIGN="LEFT" >- connectDomainSocket(fd: int, path: byte[]): int</TD></TR><TR><TD ALIGN="LEFT" >+ disconnect()</TD></TR><TR><TD ALIGN="LEFT" >- disconnect(fd: int, ipv6: boolean): int</TD></TR><TR><TD ALIGN="LEFT" >+ finishConnect(): boolean</TD></TR><TR><TD ALIGN="LEFT" >- finishConnect(fd: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getIntOpt(level: int, optname: int): int</TD></TR><TR><TD ALIGN="LEFT" >- getIntOpt(fd: int, level: int, optname: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getRawOpt(level: int, optname: int, out: ByteBuffer)</TD></TR><TR><TD ALIGN="LEFT" >- getRawOptAddress(fd: int, level: int, optname: int, outMemoryAddress: long, length: int)</TD></TR><TR><TD ALIGN="LEFT" >- getRawOptArray(fd: int, level: int, optname: int, out: byte[], offset: int, length: int)</TD></TR><TR><TD ALIGN="LEFT" >- getReceiveBufferSize(fd: int): int</TD></TR><TR><TD ALIGN="LEFT" >- getSendBufferSize(fd: int): int</TD></TR><TR><TD ALIGN="LEFT" >- getSoError(fd: int): int</TD></TR><TR><TD ALIGN="LEFT" >- getSoLinger(fd: int): int</TD></TR><TR><TD ALIGN="LEFT" >- getTrafficClass(fd: int, ipv6: boolean): int</TD></TR><TR><TD ALIGN="LEFT" >+ initialize()</TD></TR><TR><TD ALIGN="LEFT" >- isBroadcast(fd: int): int</TD></TR><TR><TD ALIGN="LEFT" >- isIPv6(fd: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >- isIPv6Preferred0(ipv4Preferred: boolean): boolean</TD></TR><TR><TD ALIGN="LEFT" >- isKeepAlive(fd: int): int</TD></TR><TR><TD ALIGN="LEFT" >- isReuseAddress(fd: int): int</TD></TR><TR><TD ALIGN="LEFT" >- isReusePort(fd: int): int</TD></TR><TR><TD ALIGN="LEFT" >- isTcpNoDelay(fd: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ listen(backlog: int)</TD></TR><TR><TD ALIGN="LEFT" >- listen(fd: int, backlog: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ localAddress(): InetSocketAddress</TD></TR><TR><TD ALIGN="LEFT" >- localAddress(fd: int): byte[]</TD></TR><TR><TD ALIGN="LEFT" >- msgFastopen(): int</TD></TR><TR><TD ALIGN="LEFT" >+ newSocketDgram(): Socket</TD></TR><TR><TD ALIGN="LEFT" ># newSocketDgram0(): int</TD></TR><TR><TD ALIGN="LEFT" ># newSocketDgram0(family: InternetProtocolFamily): int</TD></TR><TR><TD ALIGN="LEFT" ># newSocketDgram0(ipv6: boolean): int</TD></TR><TR><TD ALIGN="LEFT" >- newSocketDgramFd(ipv6: boolean): int</TD></TR><TR><TD ALIGN="LEFT" >+ newSocketDomain(): Socket</TD></TR><TR><TD ALIGN="LEFT" ># newSocketDomain0(): int</TD></TR><TR><TD ALIGN="LEFT" >+ newSocketDomainDgram(): Socket</TD></TR><TR><TD ALIGN="LEFT" ># newSocketDomainDgram0(): int</TD></TR><TR><TD ALIGN="LEFT" >- newSocketDomainDgramFd(): int</TD></TR><TR><TD ALIGN="LEFT" >- newSocketDomainFd(): int</TD></TR><TR><TD ALIGN="LEFT" >+ newSocketStream(): Socket</TD></TR><TR><TD ALIGN="LEFT" ># newSocketStream0(): int</TD></TR><TR><TD ALIGN="LEFT" ># newSocketStream0(protocol: InternetProtocolFamily): int</TD></TR><TR><TD ALIGN="LEFT" ># newSocketStream0(ipv6: boolean): int</TD></TR><TR><TD ALIGN="LEFT" >- newSocketStreamFd(ipv6: boolean): int</TD></TR><TR><TD ALIGN="LEFT" >+ recv(buf: ByteBuffer, pos: int, limit: int): int</TD></TR><TR><TD ALIGN="LEFT" >- recv(fd: int, buf: ByteBuffer, pos: int, limit: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ recvAddress(address: long, pos: int, limit: int): int</TD></TR><TR><TD ALIGN="LEFT" >- recvAddress(fd: int, address: long, pos: int, limit: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ recvFd(): int</TD></TR><TR><TD ALIGN="LEFT" >- recvFd(fd: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ recvFrom(buf: ByteBuffer, pos: int, limit: int): DatagramSocketAddress</TD></TR><TR><TD ALIGN="LEFT" >- recvFrom(fd: int, buf: ByteBuffer, pos: int, limit: int): DatagramSocketAddress</TD></TR><TR><TD ALIGN="LEFT" >+ recvFromAddress(memoryAddress: long, pos: int, limit: int): DatagramSocketAddress</TD></TR><TR><TD ALIGN="LEFT" >- recvFromAddress(fd: int, memoryAddress: long, pos: int, limit: int): DatagramSocketAddress</TD></TR><TR><TD ALIGN="LEFT" >+ recvFromAddressDomainSocket(memoryAddress: long, pos: int, limit: int): DomainDatagramSocketAddress</TD></TR><TR><TD ALIGN="LEFT" >- recvFromAddressDomainSocket(fd: int, memoryAddress: long, pos: int, limit: int): DomainDatagramSocketAddress</TD></TR><TR><TD ALIGN="LEFT" >+ recvFromDomainSocket(buf: ByteBuffer, pos: int, limit: int): DomainDatagramSocketAddress</TD></TR><TR><TD ALIGN="LEFT" >- recvFromDomainSocket(fd: int, buf: ByteBuffer, pos: int, limit: int): DomainDatagramSocketAddress</TD></TR><TR><TD ALIGN="LEFT" >+ remoteAddress(): InetSocketAddress</TD></TR><TR><TD ALIGN="LEFT" >- remoteAddress(fd: int): byte[]</TD></TR><TR><TD ALIGN="LEFT" >+ send(buf: ByteBuffer, pos: int, limit: int): int</TD></TR><TR><TD ALIGN="LEFT" >- send(fd: int, buf: ByteBuffer, pos: int, limit: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ sendAddress(address: long, pos: int, limit: int): int</TD></TR><TR><TD ALIGN="LEFT" >- sendAddress(fd: int, address: long, pos: int, limit: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ sendFd(fdToSend: int): int</TD></TR><TR><TD ALIGN="LEFT" >- sendFd(socketFd: int, fd: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ sendTo(buf: ByteBuffer, pos: int, limit: int, addr: InetAddress, port: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ sendTo(buf: ByteBuffer, pos: int, limit: int, addr: InetAddress, port: int, fastOpen: boolean): int</TD></TR><TR><TD ALIGN="LEFT" >- sendTo(fd: int, ipv6: boolean, buf: ByteBuffer, pos: int, limit: int, address: byte[], scopeId: int, port: int, flags: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ sendToAddress(memoryAddress: long, pos: int, limit: int, addr: InetAddress, port: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ sendToAddress(memoryAddress: long, pos: int, limit: int, addr: InetAddress, port: int, fastOpen: boolean): int</TD></TR><TR><TD ALIGN="LEFT" >- sendToAddress(fd: int, ipv6: boolean, memoryAddress: long, pos: int, limit: int, address: byte[], scopeId: int, port: int, flags: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ sendToAddressDomainSocket(memoryAddress: long, pos: int, limit: int, path: byte[]): int</TD></TR><TR><TD ALIGN="LEFT" >- sendToAddressDomainSocket(fd: int, memoryAddress: long, pos: int, limit: int, path: byte[]): int</TD></TR><TR><TD ALIGN="LEFT" >+ sendToAddresses(memoryAddress: long, length: int, addr: InetAddress, port: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ sendToAddresses(memoryAddress: long, length: int, addr: InetAddress, port: int, fastOpen: boolean): int</TD></TR><TR><TD ALIGN="LEFT" >- sendToAddresses(fd: int, ipv6: boolean, memoryAddress: long, length: int, address: byte[], scopeId: int, port: int, flags: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ sendToAddressesDomainSocket(memoryAddress: long, length: int, path: byte[]): int</TD></TR><TR><TD ALIGN="LEFT" >- sendToAddressesDomainSocket(fd: int, memoryAddress: long, length: int, path: byte[]): int</TD></TR><TR><TD ALIGN="LEFT" >+ sendToDomainSocket(buf: ByteBuffer, pos: int, limit: int, path: byte[]): int</TD></TR><TR><TD ALIGN="LEFT" >- sendToDomainSocket(fd: int, buf: ByteBuffer, pos: int, limit: int, path: byte[]): int</TD></TR><TR><TD ALIGN="LEFT" >+ shouldUseIpv6(family: InternetProtocolFamily): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ shutdown()</TD></TR><TR><TD ALIGN="LEFT" >+ shutdown(read: boolean, write: boolean)</TD></TR><TR><TD ALIGN="LEFT" >- shutdown(fd: int, read: boolean, write: boolean): int</TD></TR><TR><TD ALIGN="LEFT" >- useIpv6(address: InetAddress): boolean</TD></TR><TR><TD ALIGN="LEFT" ># useIpv6(socket: Socket, address: InetAddress): boolean</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];SpliceInChannelTask773602966[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)SpliceInChannelTask</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   ch: AbstractEpollStreamChannel [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ operationComplete(future: ChannelFuture)</TD></TR><TR><TD ALIGN="LEFT" >+ spliceIn(handle: Handle): boolean</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];SucceededChannelFuture1443455697[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)SucceededChannelFuture</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ cause(): Throwable</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];TailContext641825789[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)TailContext</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ channelActive(ctx: ChannelHandlerContext)</TD></TR><TR><TD ALIGN="LEFT" >+ channelInactive(ctx: ChannelHandlerContext)</TD></TR><TR><TD ALIGN="LEFT" >+ channelRead(ctx: ChannelHandlerContext, msg: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ channelReadComplete(ctx: ChannelHandlerContext)</TD></TR><TR><TD ALIGN="LEFT" >+ channelRegistered(ctx: ChannelHandlerContext)</TD></TR><TR><TD ALIGN="LEFT" >+ channelUnregistered(ctx: ChannelHandlerContext)</TD></TR><TR><TD ALIGN="LEFT" >+ channelWritabilityChanged(ctx: ChannelHandlerContext)</TD></TR><TR><TD ALIGN="LEFT" >+ exceptionCaught(ctx: ChannelHandlerContext, cause: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >+ handler(): ChannelHandler</TD></TR><TR><TD ALIGN="LEFT" >+ handlerAdded(ctx: ChannelHandlerContext)</TD></TR><TR><TD ALIGN="LEFT" >+ handlerRemoved(ctx: ChannelHandlerContext)</TD></TR><TR><TD ALIGN="LEFT" >+ userEventTriggered(ctx: ChannelHandlerContext, evt: Object)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];ThreadPerChannelEventLoop1443455697[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)ThreadPerChannelEventLoop</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   ch: Channel [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   parent: ThreadPerChannelEventLoopGroup [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" ># deregister()</TD></TR><TR><TD ALIGN="LEFT" >+ register(promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ register(channel: Channel, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ registeredChannels(): int</TD></TR><TR><TD ALIGN="LEFT" ># run()</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];ThreadPerChannelEventLoopGroup1443455697[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)ThreadPerChannelEventLoopGroup</TD></TR><HR/><TR><TD ALIGN="LEFT" >#   activeChildren: Set&lt;EventLoop&gt; [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   childArgs: Object[] [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   childTerminationListener: FutureListener&lt;Object&gt; [0..1]</TD></TR><TR><TD ALIGN="LEFT" >#   executor: Executor [0..1]</TD></TR><TR><TD ALIGN="LEFT" >#   idleChildren: Queue&lt;EventLoop&gt; [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   maxChannels: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   shuttingDown: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   terminationFuture: Promise&lt;?&gt; [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   tooManyChannels: ChannelException [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ awaitTermination(timeout: long, unit: TimeUnit): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ iterator(): Iterator&lt;EventExecutor&gt;</TD></TR><TR><TD ALIGN="LEFT" ># newChild(args: Object...): EventLoop</TD></TR><TR><TD ALIGN="LEFT" >+ next(): EventLoop</TD></TR><TR><TD ALIGN="LEFT" >- nextChild(): EventLoop</TD></TR><TR><TD ALIGN="LEFT" >+ register(channel: Channel): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ register(promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ register(channel: Channel, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ shutdown()</TD></TR><TR><TD ALIGN="LEFT" >+ shutdownGracefully(quietPeriod: long, timeout: long, unit: TimeUnit): Future&lt;?&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ terminationFuture(): Future&lt;?&gt;</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];UnixChannelUtil1536580327[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)UnixChannelUtil</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ computeRemoteAddr(remoteAddr: InetSocketAddress, osRemoteAddr: InetSocketAddress): InetSocketAddress</TD></TR><TR><TD ALIGN="LEFT" >+ isBufferCopyNeededForWrite(byteBuf: ByteBuf): boolean</TD></TR><TR><TD ALIGN="LEFT" ># isBufferCopyNeededForWrite(byteBuf: ByteBuf, iovMax: int): boolean</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];VoidChannelGroupFuture376545536[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)VoidChannelGroupFuture</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   group: ChannelGroup [0..*]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ addListener(listener: GenericFutureListener&lt;? extends Future&lt;? super Void&gt;&gt;): ChannelGroupFuture</TD></TR><TR><TD ALIGN="LEFT" >+ addListeners(listeners: GenericFutureListener&lt;? extends Future&lt;? super Void&gt;&gt;...): ChannelGroupFuture</TD></TR><TR><TD ALIGN="LEFT" >+ await(): ChannelGroupFuture</TD></TR><TR><TD ALIGN="LEFT" >+ await(timeout: long, unit: TimeUnit): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ await(timeoutMillis: long): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ awaitUninterruptibly(): ChannelGroupFuture</TD></TR><TR><TD ALIGN="LEFT" >+ awaitUninterruptibly(timeout: long, unit: TimeUnit): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ awaitUninterruptibly(timeoutMillis: long): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ cancel(mayInterruptIfRunning: boolean): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ cause(): ChannelGroupException</TD></TR><TR><TD ALIGN="LEFT" >+ find(channel: Channel): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ get(timeout: long, unit: TimeUnit): Void</TD></TR><TR><TD ALIGN="LEFT" >+ group(): ChannelGroup</TD></TR><TR><TD ALIGN="LEFT" >+ iterator(): Iterator&lt;ChannelFuture&gt;</TD></TR><TR><TD ALIGN="LEFT" >- reject(): RuntimeException</TD></TR><TR><TD ALIGN="LEFT" >+ removeListener(listener: GenericFutureListener&lt;? extends Future&lt;? super Void&gt;&gt;): ChannelGroupFuture</TD></TR><TR><TD ALIGN="LEFT" >+ removeListeners(listeners: GenericFutureListener&lt;? extends Future&lt;? super Void&gt;&gt;...): ChannelGroupFuture</TD></TR><TR><TD ALIGN="LEFT" >+ sync(): ChannelGroupFuture</TD></TR><TR><TD ALIGN="LEFT" >+ syncUninterruptibly(): ChannelGroupFuture</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];VoidChannelPromise1443455697[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)VoidChannelPromise</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   channel: Channel [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   fireExceptionListener: ChannelFutureListener [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ addListener(listener: GenericFutureListener&lt;? extends Future&lt;? super Void&gt;&gt;): VoidChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ addListeners(listeners: GenericFutureListener&lt;? extends Future&lt;? super Void&gt;&gt;...): VoidChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ await(): VoidChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ await(timeout: long, unit: TimeUnit): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ await(timeoutMillis: long): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ awaitUninterruptibly(): VoidChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ awaitUninterruptibly(timeout: long, unit: TimeUnit): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ awaitUninterruptibly(timeoutMillis: long): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ cancel(mayInterruptIfRunning: boolean): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ cause(): Throwable</TD></TR><TR><TD ALIGN="LEFT" >+ channel(): Channel</TD></TR><TR><TD ALIGN="LEFT" >- fail()</TD></TR><TR><TD ALIGN="LEFT" >- fireException0(cause: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >+ removeListener(listener: GenericFutureListener&lt;? extends Future&lt;? super Void&gt;&gt;): VoidChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ removeListeners(listeners: GenericFutureListener&lt;? extends Future&lt;? super Void&gt;&gt;...): VoidChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ setFailure(cause: Throwable): VoidChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ setSuccess(): VoidChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ setSuccess(result: Void): VoidChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ setUncancellable(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ sync(): VoidChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ syncUninterruptibly(): VoidChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ tryFailure(cause: Throwable): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ trySuccess(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ trySuccess(result: Void): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ unvoid(): ChannelPromise</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];} subgraph cluster_1771754946 {    	label=handler	labeljust=l	fillcolor="#d8d8d8"	style=filled      AbstractBinaryMemcacheMessage1138614258[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AbstractBinaryMemcacheMessage</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   cas: long [1]</TD></TR><TR><TD ALIGN="LEFT" >-   dataType: byte [1]</TD></TR><TR><TD ALIGN="LEFT" >-   extras: ByteBuf [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   extrasLength: byte [1]</TD></TR><TR><TD ALIGN="LEFT" >-   key: ByteBuf [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   keyLength: short [1]</TD></TR><TR><TD ALIGN="LEFT" >-   magic: byte [1]</TD></TR><TR><TD ALIGN="LEFT" >-   opaque: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   opcode: byte [1]</TD></TR><TR><TD ALIGN="LEFT" >-   totalBodyLength: int [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ cas(): long</TD></TR><TR><TD ALIGN="LEFT" ># copyMeta(dst: AbstractBinaryMemcacheMessage)</TD></TR><TR><TD ALIGN="LEFT" >+ dataType(): byte</TD></TR><TR><TD ALIGN="LEFT" ># deallocate()</TD></TR><TR><TD ALIGN="LEFT" >+ extras(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ extrasLength(): byte</TD></TR><TR><TD ALIGN="LEFT" >+ key(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ keyLength(): short</TD></TR><TR><TD ALIGN="LEFT" >+ magic(): byte</TD></TR><TR><TD ALIGN="LEFT" >+ opaque(): int</TD></TR><TR><TD ALIGN="LEFT" >+ opcode(): byte</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): BinaryMemcacheMessage</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): BinaryMemcacheMessage</TD></TR><TR><TD ALIGN="LEFT" >+ setCas(cas: long): BinaryMemcacheMessage</TD></TR><TR><TD ALIGN="LEFT" >+ setDataType(dataType: byte): BinaryMemcacheMessage</TD></TR><TR><TD ALIGN="LEFT" >+ setExtras(extras: ByteBuf): BinaryMemcacheMessage</TD></TR><TR><TD ALIGN="LEFT" ># setExtrasLength(extrasLength: byte): BinaryMemcacheMessage</TD></TR><TR><TD ALIGN="LEFT" >+ setKey(key: ByteBuf): BinaryMemcacheMessage</TD></TR><TR><TD ALIGN="LEFT" ># setKeyLength(keyLength: short): BinaryMemcacheMessage</TD></TR><TR><TD ALIGN="LEFT" >+ setMagic(magic: byte): BinaryMemcacheMessage</TD></TR><TR><TD ALIGN="LEFT" >+ setOpaque(opaque: int): BinaryMemcacheMessage</TD></TR><TR><TD ALIGN="LEFT" >+ setOpcode(opcode: byte): BinaryMemcacheMessage</TD></TR><TR><TD ALIGN="LEFT" >+ setTotalBodyLength(totalBodyLength: int): BinaryMemcacheMessage</TD></TR><TR><TD ALIGN="LEFT" >+ totalBodyLength(): int</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): BinaryMemcacheMessage</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): BinaryMemcacheMessage</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];AbstractDiskHttpData1443588886[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AbstractDiskHttpData</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   file: File [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   fileChannel: FileChannel [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   isRenamed: boolean [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ addContent(buffer: ByteBuf, last: boolean)</TD></TR><TR><TD ALIGN="LEFT" >+ delete()</TD></TR><TR><TD ALIGN="LEFT" ># deleteOnExit(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ getChunk(length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ getString(encoding: Charset): String</TD></TR><TR><TD ALIGN="LEFT" >- readFrom(src: File): byte[]</TD></TR><TR><TD ALIGN="LEFT" >+ renameTo(dest: File): boolean</TD></TR><TR><TD ALIGN="LEFT" >- tempFile(): File</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): HttpData</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): HttpData</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];AbstractDnsMessage777384665[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AbstractDnsMessage</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   additionals: Object [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   answers: Object [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   authorities: Object [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   id: short [1]</TD></TR><TR><TD ALIGN="LEFT" >-   leak: ResourceLeakTracker&lt;DnsMessage&gt; [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   opCode: DnsOpCode [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   questions: Object [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   recursionDesired: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   z: byte [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ addRecord(section: DnsSection, record: DnsRecord): DnsMessage</TD></TR><TR><TD ALIGN="LEFT" >- addRecord(section: int, record: DnsRecord)</TD></TR><TR><TD ALIGN="LEFT" >+ addRecord(section: DnsSection, index: int, record: DnsRecord): DnsMessage</TD></TR><TR><TD ALIGN="LEFT" >- addRecord(section: int, index: int, record: DnsRecord)</TD></TR><TR><TD ALIGN="LEFT" >- castRecord(record: Object): T</TD></TR><TR><TD ALIGN="LEFT" >- checkQuestion(section: int, record: DnsRecord): DnsRecord</TD></TR><TR><TD ALIGN="LEFT" >+ clear(section: DnsSection): DnsMessage</TD></TR><TR><TD ALIGN="LEFT" >+ clear(): DnsMessage</TD></TR><TR><TD ALIGN="LEFT" >- clear(section: int)</TD></TR><TR><TD ALIGN="LEFT" >+ count(section: DnsSection): int</TD></TR><TR><TD ALIGN="LEFT" >- count(section: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ count(): int</TD></TR><TR><TD ALIGN="LEFT" ># deallocate()</TD></TR><TR><TD ALIGN="LEFT" >+ id(): int</TD></TR><TR><TD ALIGN="LEFT" >- newRecordList(): ArrayList&lt;DnsRecord&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ opCode(): DnsOpCode</TD></TR><TR><TD ALIGN="LEFT" >+ recordAt(section: DnsSection): T</TD></TR><TR><TD ALIGN="LEFT" >- recordAt(section: int): T</TD></TR><TR><TD ALIGN="LEFT" >+ recordAt(section: DnsSection, index: int): T</TD></TR><TR><TD ALIGN="LEFT" >- recordAt(section: int, index: int): T</TD></TR><TR><TD ALIGN="LEFT" >+ removeRecord(section: DnsSection, index: int): T</TD></TR><TR><TD ALIGN="LEFT" >- removeRecord(section: int, index: int): T</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): DnsMessage</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): DnsMessage</TD></TR><TR><TD ALIGN="LEFT" >- sectionAt(section: int): Object</TD></TR><TR><TD ALIGN="LEFT" >- sectionOrdinal(section: DnsSection): int</TD></TR><TR><TD ALIGN="LEFT" >+ setId(id: int): DnsMessage</TD></TR><TR><TD ALIGN="LEFT" >+ setOpCode(opCode: DnsOpCode): DnsMessage</TD></TR><TR><TD ALIGN="LEFT" >+ setRecord(section: DnsSection, record: DnsRecord): DnsMessage</TD></TR><TR><TD ALIGN="LEFT" >+ setRecord(section: DnsSection, index: int, record: DnsRecord): T</TD></TR><TR><TD ALIGN="LEFT" >- setRecord(section: int, index: int, record: DnsRecord): T</TD></TR><TR><TD ALIGN="LEFT" >+ setRecursionDesired(recursionDesired: boolean): DnsMessage</TD></TR><TR><TD ALIGN="LEFT" >+ setZ(z: int): DnsMessage</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): DnsMessage</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): DnsMessage</TD></TR><TR><TD ALIGN="LEFT" >+ z(): int</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];AbstractDnsOptPseudoRrRecord777384665[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AbstractDnsOptPseudoRrRecord</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ extendedRcode(): int</TD></TR><TR><TD ALIGN="LEFT" >+ flags(): int</TD></TR><TR><TD ALIGN="LEFT" >- packIntoLong(val: int, val2: int): long</TD></TR><TR><TD ALIGN="LEFT" ># toStringBuilder(): StringBuilder</TD></TR><TR><TD ALIGN="LEFT" >+ version(): int</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];AbstractDnsRecord777384665[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AbstractDnsRecord</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   dnsClass: short [1]</TD></TR><TR><TD ALIGN="LEFT" >-   hashCode: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   name: String [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   timeToLive: long [1]</TD></TR><TR><TD ALIGN="LEFT" >-   type: DnsRecordType [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >- IDNtoASCII(name: String): String</TD></TR><TR><TD ALIGN="LEFT" >- appendTrailingDot(name: String): String</TD></TR><TR><TD ALIGN="LEFT" >+ dnsClass(): int</TD></TR><TR><TD ALIGN="LEFT" >+ name(): String</TD></TR><TR><TD ALIGN="LEFT" >+ timeToLive(): long</TD></TR><TR><TD ALIGN="LEFT" >+ type(): DnsRecordType</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];AbstractHttp2StreamChannel253769126[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AbstractHttp2StreamChannel</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   channelId: ChannelId [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   closePromise: ChannelPromise [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   config: Http2StreamChannelConfig [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   fireChannelWritabilityChangedTask: Runnable [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   firstFrameWritten: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   flowControlledBytes: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   inboundBuffer: Queue&lt;Object&gt; [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   outboundClosed: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   pipeline: ChannelPipeline [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   readCompletePending: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   readStatus: ReadStatus [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   registered: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   stream: DefaultHttp2FrameStream [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   totalPendingSize: long [1]</TD></TR><TR><TD ALIGN="LEFT" >-   unsafe: Http2ChannelUnsafe [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   unwritable: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   windowUpdateFrameWriteListener: ChannelFutureListener [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" ># addChannelToReadCompletePendingQueue()</TD></TR><TR><TD ALIGN="LEFT" >+ alloc(): ByteBufAllocator</TD></TR><TR><TD ALIGN="LEFT" >+ bind(localAddress: SocketAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ bind(localAddress: SocketAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ bytesBeforeUnwritable(): long</TD></TR><TR><TD ALIGN="LEFT" >+ bytesBeforeWritable(): long</TD></TR><TR><TD ALIGN="LEFT" >+ close(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ close(promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ closeFuture(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" ># closeOutbound()</TD></TR><TR><TD ALIGN="LEFT" >+ compareTo(o: Channel): int</TD></TR><TR><TD ALIGN="LEFT" >+ config(): ChannelConfig</TD></TR><TR><TD ALIGN="LEFT" >+ connect(remoteAddress: SocketAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ connect(remoteAddress: SocketAddress, localAddress: SocketAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ connect(remoteAddress: SocketAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ connect(remoteAddress: SocketAddress, localAddress: SocketAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >- decrementPendingOutboundBytes(size: long, invokeLater: boolean)</TD></TR><TR><TD ALIGN="LEFT" >+ deregister(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ deregister(promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ disconnect(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ disconnect(promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ eventLoop(): EventLoop</TD></TR><TR><TD ALIGN="LEFT" >- fireChannelWritabilityChanged(invokeLater: boolean)</TD></TR><TR><TD ALIGN="LEFT" ># fireChildRead(frame: Http2Frame)</TD></TR><TR><TD ALIGN="LEFT" ># fireChildReadComplete()</TD></TR><TR><TD ALIGN="LEFT" >+ flush(): Channel</TD></TR><TR><TD ALIGN="LEFT" ># flush0(ctx: ChannelHandlerContext)</TD></TR><TR><TD ALIGN="LEFT" >+ id(): ChannelId</TD></TR><TR><TD ALIGN="LEFT" >- incrementPendingOutboundBytes(size: long, invokeLater: boolean)</TD></TR><TR><TD ALIGN="LEFT" >+ localAddress(): SocketAddress</TD></TR><TR><TD ALIGN="LEFT" >- maybeAddChannelToReadCompletePendingQueue()</TD></TR><TR><TD ALIGN="LEFT" >+ metadata(): ChannelMetadata</TD></TR><TR><TD ALIGN="LEFT" >+ newFailedFuture(cause: Throwable): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ newProgressivePromise(): ChannelProgressivePromise</TD></TR><TR><TD ALIGN="LEFT" >+ newPromise(): ChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ newSucceededFuture(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ parent(): Channel</TD></TR><TR><TD ALIGN="LEFT" ># parentContext(): ChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" >+ pipeline(): ChannelPipeline</TD></TR><TR><TD ALIGN="LEFT" >+ read(): Channel</TD></TR><TR><TD ALIGN="LEFT" >+ remoteAddress(): SocketAddress</TD></TR><TR><TD ALIGN="LEFT" >+ stream(): Http2FrameStream</TD></TR><TR><TD ALIGN="LEFT" ># streamClosed()</TD></TR><TR><TD ALIGN="LEFT" ># trySetWritable()</TD></TR><TR><TD ALIGN="LEFT" >+ unsafe(): Unsafe</TD></TR><TR><TD ALIGN="LEFT" >+ voidPromise(): ChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >- windowUpdateFrameWriteComplete(future: ChannelFuture, streamChannel: Channel)</TD></TR><TR><TD ALIGN="LEFT" >+ write(msg: Object): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ write(msg: Object, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" ># write0(ctx: ChannelHandlerContext, msg: Object): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ writeAndFlush(msg: Object, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ writeAndFlush(msg: Object): ChannelFuture</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];AbstractHttp2StreamFrame253769126[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AbstractHttp2StreamFrame</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   stream: Http2FrameStream [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ stream(stream: Http2FrameStream): AbstractHttp2StreamFrame</TD></TR><TR><TD ALIGN="LEFT" >+ stream(): Http2FrameStream</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];AbstractHttpData1443588886[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AbstractHttpData</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   charset: Charset [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   completed: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >#   definedSize: long [1]</TD></TR><TR><TD ALIGN="LEFT" >-   maxSize: long [1]</TD></TR><TR><TD ALIGN="LEFT" >-   name: String [0..1]</TD></TR><TR><TD ALIGN="LEFT" >#   size: long [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ checkSize(newSize: long)</TD></TR><TR><TD ALIGN="LEFT" >+ content(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" ># deallocate()</TD></TR><TR><TD ALIGN="LEFT" >+ definedLength(): long</TD></TR><TR><TD ALIGN="LEFT" >+ length(): long</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): HttpData</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): HttpData</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): HttpData</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): HttpData</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];AbstractMemcacheObject1408039139[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AbstractMemcacheObject</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   decoderResult: DecoderResult [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ decoderResult(): DecoderResult</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];AbstractMemoryHttpData1443588886[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AbstractMemoryHttpData</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   byteBuf: ByteBuf [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   chunkPosition: int [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ addContent(buffer: ByteBuf, last: boolean)</TD></TR><TR><TD ALIGN="LEFT" >+ delete()</TD></TR><TR><TD ALIGN="LEFT" >+ getChunk(length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ getString(encoding: Charset): String</TD></TR><TR><TD ALIGN="LEFT" >+ renameTo(dest: File): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): HttpData</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): HttpData</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];AbstractMixedHttpData1443588886[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AbstractMixedHttpData&lt;D extends HttpData&gt;</TD></TR><HR/><TR><TD ALIGN="LEFT" >#   baseDir: String [0..1]</TD></TR><TR><TD ALIGN="LEFT" >#   deleteOnExit: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   limitSize: long [1]</TD></TR><TR><TD ALIGN="LEFT" >#   wrapped: D [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ addContent(buffer: ByteBuf, last: boolean)</TD></TR><TR><TD ALIGN="LEFT" >+ checkSize(newSize: long)</TD></TR><TR><TD ALIGN="LEFT" >+ compareTo(o: InterfaceHttpData): int</TD></TR><TR><TD ALIGN="LEFT" >+ content(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ copy(): D</TD></TR><TR><TD ALIGN="LEFT" ># deallocate()</TD></TR><TR><TD ALIGN="LEFT" >+ definedLength(): long</TD></TR><TR><TD ALIGN="LEFT" >+ delete()</TD></TR><TR><TD ALIGN="LEFT" >+ duplicate(): D</TD></TR><TR><TD ALIGN="LEFT" >+ getChunk(length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ getString(encoding: Charset): String</TD></TR><TR><TD ALIGN="LEFT" >+ length(): long</TD></TR><TR><TD ALIGN="LEFT" ># makeDiskData(): D</TD></TR><TR><TD ALIGN="LEFT" >+ renameTo(dest: File): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ replace(content: ByteBuf): D</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): D</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): D</TD></TR><TR><TD ALIGN="LEFT" >+ retainedDuplicate(): D</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): D</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): D</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];AbstractSocks4Message1549993747[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AbstractSocks4Message</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ version(): SocksVersion</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];AbstractSocks5Message1549993748[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AbstractSocks5Message</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ version(): SocksVersion</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];AbstractSocksMessage1032885625[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AbstractSocksMessage</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   decoderResult: DecoderResult [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ decoderResult(): DecoderResult</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];AbstractStringRedisMessage244996309[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AbstractStringRedisMessage</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   content: String [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ content(): String</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];AggregatedFullHttpMessage955985030[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AggregatedFullHttpMessage</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   content: ByteBuf [0..1]</TD></TR><TR><TD ALIGN="LEFT" >#   message: HttpMessage [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   trailingHeaders: HttpHeaders [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ content(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ copy(): FullHttpMessage</TD></TR><TR><TD ALIGN="LEFT" >+ decoderResult(): DecoderResult</TD></TR><TR><TD ALIGN="LEFT" >+ duplicate(): FullHttpMessage</TD></TR><TR><TD ALIGN="LEFT" >+ headers(): HttpHeaders</TD></TR><TR><TD ALIGN="LEFT" >+ protocolVersion(): HttpVersion</TD></TR><TR><TD ALIGN="LEFT" >+ refCnt(): int</TD></TR><TR><TD ALIGN="LEFT" >+ release(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ release(decrement: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): FullHttpMessage</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): FullHttpMessage</TD></TR><TR><TD ALIGN="LEFT" >+ retainedDuplicate(): FullHttpMessage</TD></TR><TR><TD ALIGN="LEFT" >+ setProtocolVersion(version: HttpVersion): FullHttpMessage</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): FullHttpMessage</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): FullHttpMessage</TD></TR><TR><TD ALIGN="LEFT" >+ trailingHeaders(): HttpHeaders</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];AggregatedFullHttpRequest955985030[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AggregatedFullHttpRequest</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ copy(): FullHttpRequest</TD></TR><TR><TD ALIGN="LEFT" >+ duplicate(): FullHttpRequest</TD></TR><TR><TD ALIGN="LEFT" >+ method(): HttpMethod</TD></TR><TR><TD ALIGN="LEFT" >+ replace(content: ByteBuf): FullHttpRequest</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): FullHttpRequest</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): FullHttpRequest</TD></TR><TR><TD ALIGN="LEFT" >+ retainedDuplicate(): FullHttpRequest</TD></TR><TR><TD ALIGN="LEFT" >+ setMethod(method: HttpMethod): FullHttpRequest</TD></TR><TR><TD ALIGN="LEFT" >+ setProtocolVersion(version: HttpVersion): FullHttpRequest</TD></TR><TR><TD ALIGN="LEFT" >+ setUri(uri: String): FullHttpRequest</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): FullHttpRequest</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): FullHttpRequest</TD></TR><TR><TD ALIGN="LEFT" >+ uri(): String</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];AggregatedFullHttpResponse955985030[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AggregatedFullHttpResponse</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ copy(): FullHttpResponse</TD></TR><TR><TD ALIGN="LEFT" >+ duplicate(): FullHttpResponse</TD></TR><TR><TD ALIGN="LEFT" >+ replace(content: ByteBuf): FullHttpResponse</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): FullHttpResponse</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): FullHttpResponse</TD></TR><TR><TD ALIGN="LEFT" >+ retainedDuplicate(): FullHttpResponse</TD></TR><TR><TD ALIGN="LEFT" >+ setProtocolVersion(version: HttpVersion): FullHttpResponse</TD></TR><TR><TD ALIGN="LEFT" >+ setStatus(status: HttpResponseStatus): FullHttpResponse</TD></TR><TR><TD ALIGN="LEFT" >+ status(): HttpResponseStatus</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): FullHttpResponse</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): FullHttpResponse</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];ArrayHeaderRedisMessage244996309[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)ArrayHeaderRedisMessage</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   length: long [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ length(): long</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];ArrayRedisMessage244996309[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)ArrayRedisMessage</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   children: List&lt;RedisMessage&gt; [0..*]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ children(): List&lt;RedisMessage&gt;</TD></TR><TR><TD ALIGN="LEFT" ># deallocate()</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): ArrayRedisMessage</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];BulkStringHeaderRedisMessage244996309[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)BulkStringHeaderRedisMessage</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   bulkStringLength: int [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ bulkStringLength(): int</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];ClosingChannelFutureListener53188018[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)ClosingChannelFutureListener</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   ctx: ChannelHandlerContext [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   promise: ChannelPromise [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ operationComplete(sentGoAwayFuture: ChannelFuture)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];ComposedLastHttpContent1670754088[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)ComposedLastHttpContent</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   result: DecoderResult [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   trailingHeaders: HttpHeaders [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ content(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ copy(): LastHttpContent</TD></TR><TR><TD ALIGN="LEFT" >+ decoderResult(): DecoderResult</TD></TR><TR><TD ALIGN="LEFT" >+ duplicate(): LastHttpContent</TD></TR><TR><TD ALIGN="LEFT" >+ refCnt(): int</TD></TR><TR><TD ALIGN="LEFT" >+ release(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ release(decrement: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ replace(content: ByteBuf): LastHttpContent</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): LastHttpContent</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): LastHttpContent</TD></TR><TR><TD ALIGN="LEFT" >+ retainedDuplicate(): LastHttpContent</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): LastHttpContent</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): LastHttpContent</TD></TR><TR><TD ALIGN="LEFT" >+ trailingHeaders(): HttpHeaders</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DatagramDnsQuery777384665[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DatagramDnsQuery</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   recipient: InetSocketAddress [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   sender: InetSocketAddress [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ addRecord(section: DnsSection, record: DnsRecord): DatagramDnsQuery</TD></TR><TR><TD ALIGN="LEFT" >+ addRecord(section: DnsSection, index: int, record: DnsRecord): DatagramDnsQuery</TD></TR><TR><TD ALIGN="LEFT" >+ clear(section: DnsSection): DatagramDnsQuery</TD></TR><TR><TD ALIGN="LEFT" >+ clear(): DatagramDnsQuery</TD></TR><TR><TD ALIGN="LEFT" >+ content(): DatagramDnsQuery</TD></TR><TR><TD ALIGN="LEFT" >+ recipient(): InetSocketAddress</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): DatagramDnsQuery</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): DatagramDnsQuery</TD></TR><TR><TD ALIGN="LEFT" >+ sender(): InetSocketAddress</TD></TR><TR><TD ALIGN="LEFT" >+ setId(id: int): DatagramDnsQuery</TD></TR><TR><TD ALIGN="LEFT" >+ setOpCode(opCode: DnsOpCode): DatagramDnsQuery</TD></TR><TR><TD ALIGN="LEFT" >+ setRecord(section: DnsSection, record: DnsRecord): DatagramDnsQuery</TD></TR><TR><TD ALIGN="LEFT" >+ setRecursionDesired(recursionDesired: boolean): DatagramDnsQuery</TD></TR><TR><TD ALIGN="LEFT" >+ setZ(z: int): DatagramDnsQuery</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): DatagramDnsQuery</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): DatagramDnsQuery</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DatagramDnsResponse777384665[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DatagramDnsResponse</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   recipient: InetSocketAddress [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   sender: InetSocketAddress [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ addRecord(section: DnsSection, record: DnsRecord): DatagramDnsResponse</TD></TR><TR><TD ALIGN="LEFT" >+ addRecord(section: DnsSection, index: int, record: DnsRecord): DatagramDnsResponse</TD></TR><TR><TD ALIGN="LEFT" >+ clear(section: DnsSection): DatagramDnsResponse</TD></TR><TR><TD ALIGN="LEFT" >+ clear(): DatagramDnsResponse</TD></TR><TR><TD ALIGN="LEFT" >+ content(): DatagramDnsResponse</TD></TR><TR><TD ALIGN="LEFT" >+ recipient(): InetSocketAddress</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): DatagramDnsResponse</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): DatagramDnsResponse</TD></TR><TR><TD ALIGN="LEFT" >+ sender(): InetSocketAddress</TD></TR><TR><TD ALIGN="LEFT" >+ setAuthoritativeAnswer(authoritativeAnswer: boolean): DatagramDnsResponse</TD></TR><TR><TD ALIGN="LEFT" >+ setCode(code: DnsResponseCode): DatagramDnsResponse</TD></TR><TR><TD ALIGN="LEFT" >+ setId(id: int): DatagramDnsResponse</TD></TR><TR><TD ALIGN="LEFT" >+ setOpCode(opCode: DnsOpCode): DatagramDnsResponse</TD></TR><TR><TD ALIGN="LEFT" >+ setRecord(section: DnsSection, record: DnsRecord): DatagramDnsResponse</TD></TR><TR><TD ALIGN="LEFT" >+ setRecursionAvailable(recursionAvailable: boolean): DatagramDnsResponse</TD></TR><TR><TD ALIGN="LEFT" >+ setRecursionDesired(recursionDesired: boolean): DatagramDnsResponse</TD></TR><TR><TD ALIGN="LEFT" >+ setTruncated(truncated: boolean): DatagramDnsResponse</TD></TR><TR><TD ALIGN="LEFT" >+ setZ(z: int): DatagramDnsResponse</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): DatagramDnsResponse</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): DatagramDnsResponse</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultBinaryMemcacheRequest1138614258[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultBinaryMemcacheRequest</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   reserved: short [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" ># copyMeta(dst: DefaultBinaryMemcacheRequest)</TD></TR><TR><TD ALIGN="LEFT" >+ reserved(): short</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): BinaryMemcacheRequest</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): BinaryMemcacheRequest</TD></TR><TR><TD ALIGN="LEFT" >+ setReserved(reserved: short): BinaryMemcacheRequest</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): BinaryMemcacheRequest</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): BinaryMemcacheRequest</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultBinaryMemcacheResponse1138614258[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultBinaryMemcacheResponse</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   status: short [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" ># copyMeta(dst: DefaultBinaryMemcacheResponse)</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): BinaryMemcacheResponse</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): BinaryMemcacheResponse</TD></TR><TR><TD ALIGN="LEFT" >+ setStatus(status: short): BinaryMemcacheResponse</TD></TR><TR><TD ALIGN="LEFT" >+ status(): short</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): BinaryMemcacheResponse</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): BinaryMemcacheResponse</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultBulkStringRedisContent244996309[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultBulkStringRedisContent</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ copy(): BulkStringRedisContent</TD></TR><TR><TD ALIGN="LEFT" >+ duplicate(): BulkStringRedisContent</TD></TR><TR><TD ALIGN="LEFT" >+ replace(content: ByteBuf): BulkStringRedisContent</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): BulkStringRedisContent</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): BulkStringRedisContent</TD></TR><TR><TD ALIGN="LEFT" >+ retainedDuplicate(): BulkStringRedisContent</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): BulkStringRedisContent</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): BulkStringRedisContent</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultDnsOptEcsRecord777384665[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultDnsOptEcsRecord</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   address: byte[] [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   srcPrefixLength: int [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ address(): byte[]</TD></TR><TR><TD ALIGN="LEFT" >+ scopePrefixLength(): int</TD></TR><TR><TD ALIGN="LEFT" >+ sourcePrefixLength(): int</TD></TR><TR><TD ALIGN="LEFT" >- verifyAddress(bytes: byte[]): byte[]</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultDnsPtrRecord777384665[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultDnsPtrRecord</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   hostname: String [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ hostname(): String</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultDnsQuery777384665[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultDnsQuery</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ addRecord(section: DnsSection, record: DnsRecord): DnsQuery</TD></TR><TR><TD ALIGN="LEFT" >+ addRecord(section: DnsSection, index: int, record: DnsRecord): DnsQuery</TD></TR><TR><TD ALIGN="LEFT" >+ clear(section: DnsSection): DnsQuery</TD></TR><TR><TD ALIGN="LEFT" >+ clear(): DnsQuery</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): DnsQuery</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): DnsQuery</TD></TR><TR><TD ALIGN="LEFT" >+ setId(id: int): DnsQuery</TD></TR><TR><TD ALIGN="LEFT" >+ setOpCode(opCode: DnsOpCode): DnsQuery</TD></TR><TR><TD ALIGN="LEFT" >+ setRecord(section: DnsSection, record: DnsRecord): DnsQuery</TD></TR><TR><TD ALIGN="LEFT" >+ setRecursionDesired(recursionDesired: boolean): DnsQuery</TD></TR><TR><TD ALIGN="LEFT" >+ setZ(z: int): DnsQuery</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): DnsQuery</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): DnsQuery</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultDnsQuestion777384665[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultDnsQuestion</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultDnsRawRecord777384665[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultDnsRawRecord</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   content: ByteBuf [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ content(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ copy(): DnsRawRecord</TD></TR><TR><TD ALIGN="LEFT" >+ duplicate(): DnsRawRecord</TD></TR><TR><TD ALIGN="LEFT" >+ refCnt(): int</TD></TR><TR><TD ALIGN="LEFT" >+ release(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ release(decrement: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ replace(content: ByteBuf): DnsRawRecord</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): DnsRawRecord</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): DnsRawRecord</TD></TR><TR><TD ALIGN="LEFT" >+ retainedDuplicate(): DnsRawRecord</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): DnsRawRecord</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): DnsRawRecord</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultDnsResponse777384665[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultDnsResponse</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   authoritativeAnswer: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   code: DnsResponseCode [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   recursionAvailable: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   truncated: boolean [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ addRecord(section: DnsSection, record: DnsRecord): DnsResponse</TD></TR><TR><TD ALIGN="LEFT" >+ addRecord(section: DnsSection, index: int, record: DnsRecord): DnsResponse</TD></TR><TR><TD ALIGN="LEFT" >+ clear(section: DnsSection): DnsResponse</TD></TR><TR><TD ALIGN="LEFT" >+ clear(): DnsResponse</TD></TR><TR><TD ALIGN="LEFT" >+ code(): DnsResponseCode</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): DnsResponse</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): DnsResponse</TD></TR><TR><TD ALIGN="LEFT" >+ setAuthoritativeAnswer(authoritativeAnswer: boolean): DnsResponse</TD></TR><TR><TD ALIGN="LEFT" >+ setCode(code: DnsResponseCode): DnsResponse</TD></TR><TR><TD ALIGN="LEFT" >+ setId(id: int): DnsResponse</TD></TR><TR><TD ALIGN="LEFT" >+ setOpCode(opCode: DnsOpCode): DnsResponse</TD></TR><TR><TD ALIGN="LEFT" >+ setRecord(section: DnsSection, record: DnsRecord): DnsResponse</TD></TR><TR><TD ALIGN="LEFT" >+ setRecursionAvailable(recursionAvailable: boolean): DnsResponse</TD></TR><TR><TD ALIGN="LEFT" >+ setRecursionDesired(recursionDesired: boolean): DnsResponse</TD></TR><TR><TD ALIGN="LEFT" >+ setTruncated(truncated: boolean): DnsResponse</TD></TR><TR><TD ALIGN="LEFT" >+ setZ(z: int): DnsResponse</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): DnsResponse</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): DnsResponse</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultFullBinaryMemcacheRequest1138614258[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultFullBinaryMemcacheRequest</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   content: ByteBuf [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ content(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ copy(): FullBinaryMemcacheRequest</TD></TR><TR><TD ALIGN="LEFT" ># deallocate()</TD></TR><TR><TD ALIGN="LEFT" >+ duplicate(): FullBinaryMemcacheRequest</TD></TR><TR><TD ALIGN="LEFT" >- newInstance(key: ByteBuf, extras: ByteBuf, content: ByteBuf): DefaultFullBinaryMemcacheRequest</TD></TR><TR><TD ALIGN="LEFT" >+ replace(content: ByteBuf): FullBinaryMemcacheRequest</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): FullBinaryMemcacheRequest</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): FullBinaryMemcacheRequest</TD></TR><TR><TD ALIGN="LEFT" >+ retainedDuplicate(): FullBinaryMemcacheRequest</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): FullBinaryMemcacheRequest</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): FullBinaryMemcacheRequest</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultFullBinaryMemcacheResponse1138614258[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultFullBinaryMemcacheResponse</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   content: ByteBuf [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ content(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ copy(): FullBinaryMemcacheResponse</TD></TR><TR><TD ALIGN="LEFT" ># deallocate()</TD></TR><TR><TD ALIGN="LEFT" >+ duplicate(): FullBinaryMemcacheResponse</TD></TR><TR><TD ALIGN="LEFT" >- newInstance(key: ByteBuf, extras: ByteBuf, content: ByteBuf): FullBinaryMemcacheResponse</TD></TR><TR><TD ALIGN="LEFT" >+ replace(content: ByteBuf): FullBinaryMemcacheResponse</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): FullBinaryMemcacheResponse</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): FullBinaryMemcacheResponse</TD></TR><TR><TD ALIGN="LEFT" >+ retainedDuplicate(): FullBinaryMemcacheResponse</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): FullBinaryMemcacheResponse</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): FullBinaryMemcacheResponse</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultFullHttpRequest1670754088[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultFullHttpRequest</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   content: ByteBuf [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   hash: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   trailingHeader: HttpHeaders [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ content(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ copy(): FullHttpRequest</TD></TR><TR><TD ALIGN="LEFT" >+ duplicate(): FullHttpRequest</TD></TR><TR><TD ALIGN="LEFT" >+ refCnt(): int</TD></TR><TR><TD ALIGN="LEFT" >+ release(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ release(decrement: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ replace(content: ByteBuf): FullHttpRequest</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): FullHttpRequest</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): FullHttpRequest</TD></TR><TR><TD ALIGN="LEFT" >+ retainedDuplicate(): FullHttpRequest</TD></TR><TR><TD ALIGN="LEFT" >+ setMethod(method: HttpMethod): FullHttpRequest</TD></TR><TR><TD ALIGN="LEFT" >+ setProtocolVersion(version: HttpVersion): FullHttpRequest</TD></TR><TR><TD ALIGN="LEFT" >+ setUri(uri: String): FullHttpRequest</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): FullHttpRequest</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): FullHttpRequest</TD></TR><TR><TD ALIGN="LEFT" >+ trailingHeaders(): HttpHeaders</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultFullHttpResponse1670754088[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultFullHttpResponse</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   content: ByteBuf [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   hash: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   trailingHeaders: HttpHeaders [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ content(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ copy(): FullHttpResponse</TD></TR><TR><TD ALIGN="LEFT" >+ duplicate(): FullHttpResponse</TD></TR><TR><TD ALIGN="LEFT" >+ refCnt(): int</TD></TR><TR><TD ALIGN="LEFT" >+ release(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ release(decrement: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ replace(content: ByteBuf): FullHttpResponse</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): FullHttpResponse</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): FullHttpResponse</TD></TR><TR><TD ALIGN="LEFT" >+ retainedDuplicate(): FullHttpResponse</TD></TR><TR><TD ALIGN="LEFT" >+ setProtocolVersion(version: HttpVersion): FullHttpResponse</TD></TR><TR><TD ALIGN="LEFT" >+ setStatus(status: HttpResponseStatus): FullHttpResponse</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): FullHttpResponse</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): FullHttpResponse</TD></TR><TR><TD ALIGN="LEFT" >+ trailingHeaders(): HttpHeaders</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultHttp2DataFrame253769126[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultHttp2DataFrame</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   content: ByteBuf [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   endStream: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   initialFlowControlledBytes: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   padding: int [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ content(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ copy(): DefaultHttp2DataFrame</TD></TR><TR><TD ALIGN="LEFT" >+ duplicate(): DefaultHttp2DataFrame</TD></TR><TR><TD ALIGN="LEFT" >+ initialFlowControlledBytes(): int</TD></TR><TR><TD ALIGN="LEFT" >+ name(): String</TD></TR><TR><TD ALIGN="LEFT" >+ padding(): int</TD></TR><TR><TD ALIGN="LEFT" >+ refCnt(): int</TD></TR><TR><TD ALIGN="LEFT" >+ release(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ release(decrement: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ replace(content: ByteBuf): DefaultHttp2DataFrame</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): DefaultHttp2DataFrame</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): DefaultHttp2DataFrame</TD></TR><TR><TD ALIGN="LEFT" >+ retainedDuplicate(): DefaultHttp2DataFrame</TD></TR><TR><TD ALIGN="LEFT" >+ stream(stream: Http2FrameStream): DefaultHttp2DataFrame</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): DefaultHttp2DataFrame</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): DefaultHttp2DataFrame</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultHttp2FrameStream921282753[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultHttp2FrameStream</TD></TR><HR/><TR><TD ALIGN="LEFT" >#   attachment: Channel [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   id: int [1]</TD></TR><TR><TD ALIGN="LEFT" >#   stateChanged: Http2FrameStreamEvent [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   stream: Http2Stream [0..1]</TD></TR><TR><TD ALIGN="LEFT" >#   writabilityChanged: Http2FrameStreamEvent [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ id(): int</TD></TR><TR><TD ALIGN="LEFT" ># setStreamAndProperty(streamKey: PropertyKey, stream: Http2Stream): DefaultHttp2FrameStream</TD></TR><TR><TD ALIGN="LEFT" >+ state(): State</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultHttp2GoAwayFrame253769126[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultHttp2GoAwayFrame</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   errorCode: long [1]</TD></TR><TR><TD ALIGN="LEFT" >-   extraStreamIds: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   lastStreamId: int [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ copy(): Http2GoAwayFrame</TD></TR><TR><TD ALIGN="LEFT" >+ duplicate(): Http2GoAwayFrame</TD></TR><TR><TD ALIGN="LEFT" >+ errorCode(): long</TD></TR><TR><TD ALIGN="LEFT" >+ extraStreamIds(): int</TD></TR><TR><TD ALIGN="LEFT" >+ lastStreamId(): int</TD></TR><TR><TD ALIGN="LEFT" >+ name(): String</TD></TR><TR><TD ALIGN="LEFT" >+ replace(content: ByteBuf): Http2GoAwayFrame</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): Http2GoAwayFrame</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): Http2GoAwayFrame</TD></TR><TR><TD ALIGN="LEFT" >+ retainedDuplicate(): Http2GoAwayFrame</TD></TR><TR><TD ALIGN="LEFT" >+ setExtraStreamIds(extraStreamIds: int): Http2GoAwayFrame</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): Http2GoAwayFrame</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): Http2GoAwayFrame</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultHttp2HeadersFrame253769126[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultHttp2HeadersFrame</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   endStream: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   headers: Http2Headers [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   padding: int [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ headers(): Http2Headers</TD></TR><TR><TD ALIGN="LEFT" >+ name(): String</TD></TR><TR><TD ALIGN="LEFT" >+ padding(): int</TD></TR><TR><TD ALIGN="LEFT" >+ stream(stream: Http2FrameStream): DefaultHttp2HeadersFrame</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultHttp2PingFrame253769126[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultHttp2PingFrame</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   ack: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   content: long [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ ack(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ content(): long</TD></TR><TR><TD ALIGN="LEFT" >+ name(): String</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultHttp2PriorityFrame253769126[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultHttp2PriorityFrame</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   exclusive: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   streamDependency: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   weight: short [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ exclusive(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ name(): String</TD></TR><TR><TD ALIGN="LEFT" >+ stream(stream: Http2FrameStream): DefaultHttp2PriorityFrame</TD></TR><TR><TD ALIGN="LEFT" >+ streamDependency(): int</TD></TR><TR><TD ALIGN="LEFT" >+ weight(): short</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultHttp2PushPromiseFrame253769126[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultHttp2PushPromiseFrame</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   http2Headers: Http2Headers [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   padding: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   promisedStreamId: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   pushStreamFrame: Http2FrameStream [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   streamFrame: Http2FrameStream [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ http2Headers(): Http2Headers</TD></TR><TR><TD ALIGN="LEFT" >+ name(): String</TD></TR><TR><TD ALIGN="LEFT" >+ padding(): int</TD></TR><TR><TD ALIGN="LEFT" >+ promisedStreamId(): int</TD></TR><TR><TD ALIGN="LEFT" >+ pushStream(stream: Http2FrameStream): Http2StreamFrame</TD></TR><TR><TD ALIGN="LEFT" >+ pushStream(): Http2FrameStream</TD></TR><TR><TD ALIGN="LEFT" >+ stream(stream: Http2FrameStream): Http2PushPromiseFrame</TD></TR><TR><TD ALIGN="LEFT" >+ stream(): Http2FrameStream</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultHttp2ResetFrame253769126[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultHttp2ResetFrame</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   errorCode: long [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ errorCode(): long</TD></TR><TR><TD ALIGN="LEFT" >+ name(): String</TD></TR><TR><TD ALIGN="LEFT" >+ stream(stream: Http2FrameStream): DefaultHttp2ResetFrame</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultHttp2SettingsAckFrame253769126[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultHttp2SettingsAckFrame</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ name(): String</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultHttp2SettingsFrame253769126[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultHttp2SettingsFrame</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   settings: Http2Settings [0..*]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ name(): String</TD></TR><TR><TD ALIGN="LEFT" >+ settings(): Http2Settings</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultHttp2UnknownFrame253769126[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultHttp2UnknownFrame</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   flags: Http2Flags [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   frameType: byte [1]</TD></TR><TR><TD ALIGN="LEFT" >-   stream: Http2FrameStream [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ copy(): DefaultHttp2UnknownFrame</TD></TR><TR><TD ALIGN="LEFT" >+ duplicate(): DefaultHttp2UnknownFrame</TD></TR><TR><TD ALIGN="LEFT" >+ flags(): Http2Flags</TD></TR><TR><TD ALIGN="LEFT" >+ frameType(): byte</TD></TR><TR><TD ALIGN="LEFT" >+ name(): String</TD></TR><TR><TD ALIGN="LEFT" >+ replace(content: ByteBuf): DefaultHttp2UnknownFrame</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): DefaultHttp2UnknownFrame</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): DefaultHttp2UnknownFrame</TD></TR><TR><TD ALIGN="LEFT" >+ retainedDuplicate(): DefaultHttp2UnknownFrame</TD></TR><TR><TD ALIGN="LEFT" >+ stream(): Http2FrameStream</TD></TR><TR><TD ALIGN="LEFT" >+ stream(stream: Http2FrameStream): DefaultHttp2UnknownFrame</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): DefaultHttp2UnknownFrame</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): DefaultHttp2UnknownFrame</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultHttp2WindowUpdateFrame253769126[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultHttp2WindowUpdateFrame</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   windowUpdateIncrement: int [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ name(): String</TD></TR><TR><TD ALIGN="LEFT" >+ stream(stream: Http2FrameStream): DefaultHttp2WindowUpdateFrame</TD></TR><TR><TD ALIGN="LEFT" >+ windowSizeIncrement(): int</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultHttpContent1670754088[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultHttpContent</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   content: ByteBuf [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ content(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ copy(): HttpContent</TD></TR><TR><TD ALIGN="LEFT" >+ duplicate(): HttpContent</TD></TR><TR><TD ALIGN="LEFT" >+ refCnt(): int</TD></TR><TR><TD ALIGN="LEFT" >+ release(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ release(decrement: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ replace(content: ByteBuf): HttpContent</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): HttpContent</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): HttpContent</TD></TR><TR><TD ALIGN="LEFT" >+ retainedDuplicate(): HttpContent</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): HttpContent</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): HttpContent</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultHttpMessage1670754088[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultHttpMessage</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   headers: HttpHeaders [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   version: HttpVersion [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ headers(): HttpHeaders</TD></TR><TR><TD ALIGN="LEFT" >+ protocolVersion(): HttpVersion</TD></TR><TR><TD ALIGN="LEFT" >+ setProtocolVersion(version: HttpVersion): HttpMessage</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultHttpObject1670754088[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultHttpObject</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   decoderResult: DecoderResult [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ decoderResult(): DecoderResult</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultHttpRequest1670754088[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultHttpRequest</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   method: HttpMethod [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   uri: String [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ method(): HttpMethod</TD></TR><TR><TD ALIGN="LEFT" >+ setMethod(method: HttpMethod): HttpRequest</TD></TR><TR><TD ALIGN="LEFT" >+ setProtocolVersion(version: HttpVersion): HttpRequest</TD></TR><TR><TD ALIGN="LEFT" >+ setUri(uri: String): HttpRequest</TD></TR><TR><TD ALIGN="LEFT" >+ uri(): String</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultHttpResponse1670754088[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultHttpResponse</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   status: HttpResponseStatus [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ setProtocolVersion(version: HttpVersion): HttpResponse</TD></TR><TR><TD ALIGN="LEFT" >+ setStatus(status: HttpResponseStatus): HttpResponse</TD></TR><TR><TD ALIGN="LEFT" >+ status(): HttpResponseStatus</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultLastBulkStringRedisContent244996309[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultLastBulkStringRedisContent</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ copy(): LastBulkStringRedisContent</TD></TR><TR><TD ALIGN="LEFT" >+ duplicate(): LastBulkStringRedisContent</TD></TR><TR><TD ALIGN="LEFT" >+ replace(content: ByteBuf): LastBulkStringRedisContent</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): LastBulkStringRedisContent</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): LastBulkStringRedisContent</TD></TR><TR><TD ALIGN="LEFT" >+ retainedDuplicate(): LastBulkStringRedisContent</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): LastBulkStringRedisContent</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): LastBulkStringRedisContent</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultLastHttpContent1670754088[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultLastHttpContent</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   trailingHeaders: HttpHeaders [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   validateHeaders: boolean [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >- appendHeaders(buf: StringBuilder)</TD></TR><TR><TD ALIGN="LEFT" >+ copy(): LastHttpContent</TD></TR><TR><TD ALIGN="LEFT" >+ duplicate(): LastHttpContent</TD></TR><TR><TD ALIGN="LEFT" >+ replace(content: ByteBuf): LastHttpContent</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): LastHttpContent</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): LastHttpContent</TD></TR><TR><TD ALIGN="LEFT" >+ retainedDuplicate(): LastHttpContent</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): LastHttpContent</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): LastHttpContent</TD></TR><TR><TD ALIGN="LEFT" >+ trailingHeaders(): HttpHeaders</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultLastMemcacheContent1408039139[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultLastMemcacheContent</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ copy(): LastMemcacheContent</TD></TR><TR><TD ALIGN="LEFT" >+ duplicate(): LastMemcacheContent</TD></TR><TR><TD ALIGN="LEFT" >+ replace(content: ByteBuf): LastMemcacheContent</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): LastMemcacheContent</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): LastMemcacheContent</TD></TR><TR><TD ALIGN="LEFT" >+ retainedDuplicate(): LastMemcacheContent</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): LastMemcacheContent</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): LastMemcacheContent</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultLastSmtpContent1670433114[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultLastSmtpContent</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ copy(): LastSmtpContent</TD></TR><TR><TD ALIGN="LEFT" >+ duplicate(): LastSmtpContent</TD></TR><TR><TD ALIGN="LEFT" >+ replace(content: ByteBuf): LastSmtpContent</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): DefaultLastSmtpContent</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): DefaultLastSmtpContent</TD></TR><TR><TD ALIGN="LEFT" >+ retainedDuplicate(): LastSmtpContent</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): DefaultLastSmtpContent</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): DefaultLastSmtpContent</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultLastStompContentSubframe243615231[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultLastStompContentSubframe</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ copy(): LastStompContentSubframe</TD></TR><TR><TD ALIGN="LEFT" >+ duplicate(): LastStompContentSubframe</TD></TR><TR><TD ALIGN="LEFT" >+ replace(content: ByteBuf): LastStompContentSubframe</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): DefaultLastStompContentSubframe</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): LastStompContentSubframe</TD></TR><TR><TD ALIGN="LEFT" >+ retainedDuplicate(): LastStompContentSubframe</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): LastStompContentSubframe</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): LastStompContentSubframe</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultMemcacheContent1408039139[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultMemcacheContent</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   content: ByteBuf [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ content(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ copy(): MemcacheContent</TD></TR><TR><TD ALIGN="LEFT" ># deallocate()</TD></TR><TR><TD ALIGN="LEFT" >+ duplicate(): MemcacheContent</TD></TR><TR><TD ALIGN="LEFT" >+ replace(content: ByteBuf): MemcacheContent</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): MemcacheContent</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): MemcacheContent</TD></TR><TR><TD ALIGN="LEFT" >+ retainedDuplicate(): MemcacheContent</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): MemcacheContent</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): MemcacheContent</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultOpenSslKeyMaterial1346866284[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultOpenSslKeyMaterial</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   chain: long [1]</TD></TR><TR><TD ALIGN="LEFT" >-   leak: ResourceLeakTracker&lt;DefaultOpenSslKeyMaterial&gt; [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   privateKey: long [1]</TD></TR><TR><TD ALIGN="LEFT" >-   x509CertificateChain: X509Certificate[] [0..*]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ certificateChain(): X509Certificate[]</TD></TR><TR><TD ALIGN="LEFT" >+ certificateChainAddress(): long</TD></TR><TR><TD ALIGN="LEFT" ># deallocate()</TD></TR><TR><TD ALIGN="LEFT" >+ privateKeyAddress(): long</TD></TR><TR><TD ALIGN="LEFT" >+ release(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ release(decrement: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): DefaultOpenSslKeyMaterial</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): DefaultOpenSslKeyMaterial</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): DefaultOpenSslKeyMaterial</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): DefaultOpenSslKeyMaterial</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultSmtpContent1670433114[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultSmtpContent</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ copy(): SmtpContent</TD></TR><TR><TD ALIGN="LEFT" >+ duplicate(): SmtpContent</TD></TR><TR><TD ALIGN="LEFT" >+ replace(content: ByteBuf): SmtpContent</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): SmtpContent</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): SmtpContent</TD></TR><TR><TD ALIGN="LEFT" >+ retainedDuplicate(): SmtpContent</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): SmtpContent</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): SmtpContent</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultSocks4CommandRequest1549993747[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultSocks4CommandRequest</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   dstAddr: String [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   dstPort: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   type: Socks4CommandType [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   userId: String [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ dstAddr(): String</TD></TR><TR><TD ALIGN="LEFT" >+ dstPort(): int</TD></TR><TR><TD ALIGN="LEFT" >+ type(): Socks4CommandType</TD></TR><TR><TD ALIGN="LEFT" >+ userId(): String</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultSocks4CommandResponse1549993747[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultSocks4CommandResponse</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   dstAddr: String [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   dstPort: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   status: Socks4CommandStatus [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ dstAddr(): String</TD></TR><TR><TD ALIGN="LEFT" >+ dstPort(): int</TD></TR><TR><TD ALIGN="LEFT" >+ status(): Socks4CommandStatus</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultSocks5CommandRequest1549993748[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultSocks5CommandRequest</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   dstAddr: String [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   dstAddrType: Socks5AddressType [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   dstPort: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   type: Socks5CommandType [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ dstAddr(): String</TD></TR><TR><TD ALIGN="LEFT" >+ dstAddrType(): Socks5AddressType</TD></TR><TR><TD ALIGN="LEFT" >+ dstPort(): int</TD></TR><TR><TD ALIGN="LEFT" >+ type(): Socks5CommandType</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultSocks5CommandResponse1549993748[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultSocks5CommandResponse</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   bndAddr: String [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   bndAddrType: Socks5AddressType [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   bndPort: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   status: Socks5CommandStatus [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ bndAddr(): String</TD></TR><TR><TD ALIGN="LEFT" >+ bndAddrType(): Socks5AddressType</TD></TR><TR><TD ALIGN="LEFT" >+ bndPort(): int</TD></TR><TR><TD ALIGN="LEFT" >+ status(): Socks5CommandStatus</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultSocks5InitialRequest1549993748[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultSocks5InitialRequest</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   authMethods: List&lt;Socks5AuthMethod&gt; [0..*]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ authMethods(): List&lt;Socks5AuthMethod&gt;</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultSocks5InitialResponse1549993748[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultSocks5InitialResponse</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   authMethod: Socks5AuthMethod [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ authMethod(): Socks5AuthMethod</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultSocks5PasswordAuthRequest1549993748[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultSocks5PasswordAuthRequest</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   password: String [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   username: String [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ password(): String</TD></TR><TR><TD ALIGN="LEFT" >+ username(): String</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultSocks5PasswordAuthResponse1549993748[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultSocks5PasswordAuthResponse</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   status: Socks5PasswordAuthStatus [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ status(): Socks5PasswordAuthStatus</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultSpdyDataFrame1670430718[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultSpdyDataFrame</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   data: ByteBuf [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ content(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ copy(): SpdyDataFrame</TD></TR><TR><TD ALIGN="LEFT" >+ duplicate(): SpdyDataFrame</TD></TR><TR><TD ALIGN="LEFT" >+ refCnt(): int</TD></TR><TR><TD ALIGN="LEFT" >+ release(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ release(decrement: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ replace(content: ByteBuf): SpdyDataFrame</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): SpdyDataFrame</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): SpdyDataFrame</TD></TR><TR><TD ALIGN="LEFT" >+ retainedDuplicate(): SpdyDataFrame</TD></TR><TR><TD ALIGN="LEFT" >+ setLast(last: boolean): SpdyDataFrame</TD></TR><TR><TD ALIGN="LEFT" >+ setStreamId(streamId: int): SpdyDataFrame</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): SpdyDataFrame</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): SpdyDataFrame</TD></TR><TR><TD ALIGN="LEFT" >- validate(data: ByteBuf): ByteBuf</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultSpdyGoAwayFrame1670430718[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultSpdyGoAwayFrame</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   lastGoodStreamId: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   status: SpdySessionStatus [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ lastGoodStreamId(): int</TD></TR><TR><TD ALIGN="LEFT" >+ setLastGoodStreamId(lastGoodStreamId: int): SpdyGoAwayFrame</TD></TR><TR><TD ALIGN="LEFT" >+ setStatus(status: SpdySessionStatus): SpdyGoAwayFrame</TD></TR><TR><TD ALIGN="LEFT" >+ status(): SpdySessionStatus</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultSpdyHeadersFrame1670430718[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultSpdyHeadersFrame</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   headers: SpdyHeaders [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   invalid: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   truncated: boolean [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" ># appendHeaders(buf: StringBuilder)</TD></TR><TR><TD ALIGN="LEFT" >+ headers(): SpdyHeaders</TD></TR><TR><TD ALIGN="LEFT" >+ setInvalid(): SpdyHeadersFrame</TD></TR><TR><TD ALIGN="LEFT" >+ setLast(last: boolean): SpdyHeadersFrame</TD></TR><TR><TD ALIGN="LEFT" >+ setStreamId(streamId: int): SpdyHeadersFrame</TD></TR><TR><TD ALIGN="LEFT" >+ setTruncated(): SpdyHeadersFrame</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultSpdyPingFrame1670430718[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultSpdyPingFrame</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   id: int [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ id(): int</TD></TR><TR><TD ALIGN="LEFT" >+ setId(id: int): SpdyPingFrame</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultSpdyRstStreamFrame1670430718[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultSpdyRstStreamFrame</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   status: SpdyStreamStatus [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ setLast(last: boolean): SpdyRstStreamFrame</TD></TR><TR><TD ALIGN="LEFT" >+ setStatus(status: SpdyStreamStatus): SpdyRstStreamFrame</TD></TR><TR><TD ALIGN="LEFT" >+ setStreamId(streamId: int): SpdyRstStreamFrame</TD></TR><TR><TD ALIGN="LEFT" >+ status(): SpdyStreamStatus</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultSpdySettingsFrame1670430718[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultSpdySettingsFrame</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   clear: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   settingsMap: Map&lt;Integer, Setting&gt; [0..*]</TD></TR><HR/><TR><TD ALIGN="LEFT" >- appendSettings(buf: StringBuilder)</TD></TR><TR><TD ALIGN="LEFT" >+ clearPreviouslyPersistedSettings(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ getValue(id: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ ids(): Set&lt;Integer&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ isPersistValue(id: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ isPersisted(id: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ isSet(id: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ removeValue(id: int): SpdySettingsFrame</TD></TR><TR><TD ALIGN="LEFT" >+ setClearPreviouslyPersistedSettings(clear: boolean): SpdySettingsFrame</TD></TR><TR><TD ALIGN="LEFT" >+ setPersistValue(id: int, persistValue: boolean): SpdySettingsFrame</TD></TR><TR><TD ALIGN="LEFT" >+ setPersisted(id: int, persisted: boolean): SpdySettingsFrame</TD></TR><TR><TD ALIGN="LEFT" >+ setValue(id: int, value: int): SpdySettingsFrame</TD></TR><TR><TD ALIGN="LEFT" >+ setValue(id: int, value: int, persistValue: boolean, persisted: boolean): SpdySettingsFrame</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultSpdyStreamFrame1670430718[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultSpdyStreamFrame</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   last: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   streamId: int [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ setLast(last: boolean): SpdyStreamFrame</TD></TR><TR><TD ALIGN="LEFT" >+ setStreamId(streamId: int): SpdyStreamFrame</TD></TR><TR><TD ALIGN="LEFT" >+ streamId(): int</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultSpdySynReplyFrame1670430718[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultSpdySynReplyFrame</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ setInvalid(): SpdySynReplyFrame</TD></TR><TR><TD ALIGN="LEFT" >+ setLast(last: boolean): SpdySynReplyFrame</TD></TR><TR><TD ALIGN="LEFT" >+ setStreamId(streamId: int): SpdySynReplyFrame</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultSpdySynStreamFrame1670430718[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultSpdySynStreamFrame</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   associatedStreamId: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   priority: byte [1]</TD></TR><TR><TD ALIGN="LEFT" >-   unidirectional: boolean [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ associatedStreamId(): int</TD></TR><TR><TD ALIGN="LEFT" >+ priority(): byte</TD></TR><TR><TD ALIGN="LEFT" >+ setAssociatedStreamId(associatedStreamId: int): SpdySynStreamFrame</TD></TR><TR><TD ALIGN="LEFT" >+ setInvalid(): SpdySynStreamFrame</TD></TR><TR><TD ALIGN="LEFT" >+ setLast(last: boolean): SpdySynStreamFrame</TD></TR><TR><TD ALIGN="LEFT" >+ setPriority(priority: byte): SpdySynStreamFrame</TD></TR><TR><TD ALIGN="LEFT" >+ setStreamId(streamId: int): SpdySynStreamFrame</TD></TR><TR><TD ALIGN="LEFT" >+ setUnidirectional(unidirectional: boolean): SpdySynStreamFrame</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultSpdyWindowUpdateFrame1670430718[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultSpdyWindowUpdateFrame</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   deltaWindowSize: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   streamId: int [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ deltaWindowSize(): int</TD></TR><TR><TD ALIGN="LEFT" >+ setDeltaWindowSize(deltaWindowSize: int): SpdyWindowUpdateFrame</TD></TR><TR><TD ALIGN="LEFT" >+ setStreamId(streamId: int): SpdyWindowUpdateFrame</TD></TR><TR><TD ALIGN="LEFT" >+ streamId(): int</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultStompContentSubframe243615231[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultStompContentSubframe</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   decoderResult: DecoderResult [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ copy(): StompContentSubframe</TD></TR><TR><TD ALIGN="LEFT" >+ decoderResult(): DecoderResult</TD></TR><TR><TD ALIGN="LEFT" >+ duplicate(): StompContentSubframe</TD></TR><TR><TD ALIGN="LEFT" >+ replace(content: ByteBuf): StompContentSubframe</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): StompContentSubframe</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): StompContentSubframe</TD></TR><TR><TD ALIGN="LEFT" >+ retainedDuplicate(): StompContentSubframe</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): StompContentSubframe</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): StompContentSubframe</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultStompFrame243615231[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultStompFrame</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   content: ByteBuf [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ content(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ copy(): StompFrame</TD></TR><TR><TD ALIGN="LEFT" >+ duplicate(): StompFrame</TD></TR><TR><TD ALIGN="LEFT" >+ refCnt(): int</TD></TR><TR><TD ALIGN="LEFT" >+ release(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ release(decrement: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ replace(content: ByteBuf): StompFrame</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): StompFrame</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): StompFrame</TD></TR><TR><TD ALIGN="LEFT" >+ retainedDuplicate(): StompFrame</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): StompFrame</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): StompFrame</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultStompHeadersSubframe243615231[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultStompHeadersSubframe</TD></TR><HR/><TR><TD ALIGN="LEFT" >#   command: StompCommand [0..1]</TD></TR><TR><TD ALIGN="LEFT" >#   decoderResult: DecoderResult [0..1]</TD></TR><TR><TD ALIGN="LEFT" >#   headers: DefaultStompHeaders [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ command(): StompCommand</TD></TR><TR><TD ALIGN="LEFT" >+ decoderResult(): DecoderResult</TD></TR><TR><TD ALIGN="LEFT" >+ headers(): StompHeaders</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DiskAttribute1443588886[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DiskAttribute</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   baseDir: String [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   deleteOnExit: boolean [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ addContent(buffer: ByteBuf, last: boolean)</TD></TR><TR><TD ALIGN="LEFT" >+ compareTo(o: InterfaceHttpData): int</TD></TR><TR><TD ALIGN="LEFT" >+ compareTo(o: Attribute): int</TD></TR><TR><TD ALIGN="LEFT" >+ copy(): Attribute</TD></TR><TR><TD ALIGN="LEFT" ># deleteOnExit(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ duplicate(): Attribute</TD></TR><TR><TD ALIGN="LEFT" >+ replace(content: ByteBuf): Attribute</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): Attribute</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): Attribute</TD></TR><TR><TD ALIGN="LEFT" >+ retainedDuplicate(): Attribute</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): Attribute</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): Attribute</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DiskFileUpload1443588886[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DiskFileUpload</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   baseDir: String [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   contentTransferEncoding: String [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   contentType: String [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   deleteOnExit: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   filename: String [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ compareTo(o: InterfaceHttpData): int</TD></TR><TR><TD ALIGN="LEFT" >+ compareTo(o: FileUpload): int</TD></TR><TR><TD ALIGN="LEFT" >+ copy(): FileUpload</TD></TR><TR><TD ALIGN="LEFT" ># deleteOnExit(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ duplicate(): FileUpload</TD></TR><TR><TD ALIGN="LEFT" >+ replace(content: ByteBuf): FileUpload</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): FileUpload</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): FileUpload</TD></TR><TR><TD ALIGN="LEFT" >+ retainedDuplicate(): FileUpload</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): FileUpload</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): FileUpload</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];FlowControlledBase2036790335[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)FlowControlledBase</TD></TR><HR/><TR><TD ALIGN="LEFT" >#   endOfStream: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >#   padding: int [1]</TD></TR><TR><TD ALIGN="LEFT" >#   promise: ChannelPromise [0..1]</TD></TR><TR><TD ALIGN="LEFT" >#   stream: Http2Stream [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ operationComplete(future: ChannelFuture)</TD></TR><TR><TD ALIGN="LEFT" >+ writeComplete()</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];FullBulkStringRedisMessage244996309[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)FullBulkStringRedisMessage</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ copy(): FullBulkStringRedisMessage</TD></TR><TR><TD ALIGN="LEFT" >+ duplicate(): FullBulkStringRedisMessage</TD></TR><TR><TD ALIGN="LEFT" >+ replace(content: ByteBuf): FullBulkStringRedisMessage</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): FullBulkStringRedisMessage</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): FullBulkStringRedisMessage</TD></TR><TR><TD ALIGN="LEFT" >+ retainedDuplicate(): FullBulkStringRedisMessage</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): FullBulkStringRedisMessage</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): FullBulkStringRedisMessage</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];HAProxyMessage393479877[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)HAProxyMessage</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   command: HAProxyCommand [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   destinationAddress: String [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   destinationPort: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   leak: ResourceLeakTracker&lt;HAProxyMessage&gt; [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   protocolVersion: HAProxyProtocolVersion [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   proxiedProtocol: HAProxyProxiedProtocol [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   sourceAddress: String [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   sourcePort: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   tlvs: List&lt;HAProxyTLV&gt; [0..*]</TD></TR><HR/><TR><TD ALIGN="LEFT" >- checkAddress(address: String, addrFamily: AddressFamily)</TD></TR><TR><TD ALIGN="LEFT" >- checkPort(port: int, addrFamily: AddressFamily)</TD></TR><TR><TD ALIGN="LEFT" >+ command(): HAProxyCommand</TD></TR><TR><TD ALIGN="LEFT" ># deallocate()</TD></TR><TR><TD ALIGN="LEFT" ># decodeHeader(header: ByteBuf): HAProxyMessage</TD></TR><TR><TD ALIGN="LEFT" ># decodeHeader(header: String): HAProxyMessage</TD></TR><TR><TD ALIGN="LEFT" >+ destinationAddress(): String</TD></TR><TR><TD ALIGN="LEFT" >+ destinationPort(): int</TD></TR><TR><TD ALIGN="LEFT" >- ipBytesToString(header: ByteBuf, addressLen: int): String</TD></TR><TR><TD ALIGN="LEFT" >- portStringToInt(value: String): int</TD></TR><TR><TD ALIGN="LEFT" >+ protocolVersion(): HAProxyProtocolVersion</TD></TR><TR><TD ALIGN="LEFT" >+ proxiedProtocol(): HAProxyProxiedProtocol</TD></TR><TR><TD ALIGN="LEFT" >- readNextTLV(header: ByteBuf, nestingLevel: int): HAProxyTLV</TD></TR><TR><TD ALIGN="LEFT" >- readTlvs(header: ByteBuf): List&lt;HAProxyTLV&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ release(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ release(decrement: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): HAProxyMessage</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): HAProxyMessage</TD></TR><TR><TD ALIGN="LEFT" >+ sourceAddress(): String</TD></TR><TR><TD ALIGN="LEFT" >+ sourcePort(): int</TD></TR><TR><TD ALIGN="LEFT" ># tlvNumBytes(): int</TD></TR><TR><TD ALIGN="LEFT" >+ tlvs(): List&lt;HAProxyTLV&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): HAProxyMessage</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): HAProxyMessage</TD></TR><TR><TD ALIGN="LEFT" >- tryRecord()</TD></TR><TR><TD ALIGN="LEFT" >- unknownMsg(version: HAProxyProtocolVersion, command: HAProxyCommand): HAProxyMessage</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];Http2ChannelUnsafe1425394481[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)Http2ChannelUnsafe</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   closeInitiated: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   readEOS: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   recvHandle: Handle [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   unsafeVoidPromise: VoidChannelPromise [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   writeDoneAndNoFlush: boolean [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ beginRead()</TD></TR><TR><TD ALIGN="LEFT" >+ bind(localAddress: SocketAddress, promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >+ close(promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >+ closeForcibly()</TD></TR><TR><TD ALIGN="LEFT" >+ connect(remoteAddress: SocketAddress, localAddress: SocketAddress, promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >+ deregister(promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >+ disconnect(promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" ># doBeginRead()</TD></TR><TR><TD ALIGN="LEFT" ># doRead0(frame: Http2Frame, allocHandle: Handle)</TD></TR><TR><TD ALIGN="LEFT" >- fireChannelInactiveAndDeregister(promise: ChannelPromise, fireChannelInactive: boolean)</TD></TR><TR><TD ALIGN="LEFT" >- firstWriteComplete(future: ChannelFuture, promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >+ flush()</TD></TR><TR><TD ALIGN="LEFT" >- invokeLater(task: Runnable)</TD></TR><TR><TD ALIGN="LEFT" >+ localAddress(): SocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># notifyReadComplete(allocHandle: Handle, forceReadComplete: boolean)</TD></TR><TR><TD ALIGN="LEFT" >+ outboundBuffer(): ChannelOutboundBuffer</TD></TR><TR><TD ALIGN="LEFT" >- pollQueuedMessage(): Object</TD></TR><TR><TD ALIGN="LEFT" ># readEOS()</TD></TR><TR><TD ALIGN="LEFT" >+ recvBufAllocHandle(): Handle</TD></TR><TR><TD ALIGN="LEFT" >+ register(eventLoop: EventLoop, promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >+ remoteAddress(): SocketAddress</TD></TR><TR><TD ALIGN="LEFT" >- safeSetSuccess(promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >- updateLocalWindowIfNeeded()</TD></TR><TR><TD ALIGN="LEFT" >- validateStreamFrame(frame: Http2StreamFrame): Http2StreamFrame</TD></TR><TR><TD ALIGN="LEFT" >+ voidPromise(): ChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >- wrapStreamClosedError(cause: Throwable): Throwable</TD></TR><TR><TD ALIGN="LEFT" >+ write(msg: Object, promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >- writeComplete(future: ChannelFuture, promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >- writeHttp2StreamFrame(frame: Http2StreamFrame, promise: ChannelPromise)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];Http2CodecUtil253769126[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)Http2CodecUtil</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ calculateMaxHeaderListSizeGoAway(maxHeaderListSize: long): long</TD></TR><TR><TD ALIGN="LEFT" >+ connectionPrefaceBuf(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ getEmbeddedHttp2Exception(cause: Throwable): Http2Exception</TD></TR><TR><TD ALIGN="LEFT" >+ headerListSizeExceeded(streamId: int, maxHeaderListSize: long, onDecode: boolean)</TD></TR><TR><TD ALIGN="LEFT" >+ headerListSizeExceeded(maxHeaderListSize: long)</TD></TR><TR><TD ALIGN="LEFT" >+ isMaxFrameSizeValid(maxFrameSize: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ isOutboundStream(server: boolean, streamId: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ isStreamIdValid(streamId: int): boolean</TD></TR><TR><TD ALIGN="LEFT" ># isStreamIdValid(streamId: int, server: boolean): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ readUnsignedInt(buf: ByteBuf): int</TD></TR><TR><TD ALIGN="LEFT" >+ streamableBytes(state: StreamState): int</TD></TR><TR><TD ALIGN="LEFT" >+ toByteBuf(ctx: ChannelHandlerContext, cause: Throwable): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ verifyPadding(padding: int)</TD></TR><TR><TD ALIGN="LEFT" >+ writeFrameHeader(out: ByteBuf, payloadLength: int, type: byte, flags: Http2Flags, streamId: int)</TD></TR><TR><TD ALIGN="LEFT" ># writeFrameHeaderInternal(out: ByteBuf, payloadLength: int, type: byte, flags: Http2Flags, streamId: int)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];Http2Exception253769126[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)Http2Exception</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   error: Http2Error [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   shutdownHint: ShutdownHint [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ closedStreamError(error: Http2Error, fmt: String, args: Object...): Http2Exception</TD></TR><TR><TD ALIGN="LEFT" >+ connectionError(error: Http2Error, fmt: String, args: Object...): Http2Exception</TD></TR><TR><TD ALIGN="LEFT" >+ connectionError(error: Http2Error, cause: Throwable, fmt: String, args: Object...): Http2Exception</TD></TR><TR><TD ALIGN="LEFT" >+ error(): Http2Error</TD></TR><TR><TD ALIGN="LEFT" >- formatErrorMessage(fmt: String, args: Object[]): String</TD></TR><TR><TD ALIGN="LEFT" >+ headerListSizeError(id: int, error: Http2Error, onDecode: boolean, fmt: String, args: Object...): Http2Exception</TD></TR><TR><TD ALIGN="LEFT" >+ isStreamError(e: Http2Exception): boolean</TD></TR><TR><TD ALIGN="LEFT" ># newStatic(error: Http2Error, message: String, shutdownHint: ShutdownHint, clazz: Class&lt;?&gt;, method: String): Http2Exception</TD></TR><TR><TD ALIGN="LEFT" >+ shutdownHint(): ShutdownHint</TD></TR><TR><TD ALIGN="LEFT" >+ streamError(id: int, error: Http2Error, fmt: String, args: Object...): Http2Exception</TD></TR><TR><TD ALIGN="LEFT" >+ streamError(id: int, error: Http2Error, cause: Throwable, fmt: String, args: Object...): Http2Exception</TD></TR><TR><TD ALIGN="LEFT" >+ streamId(e: Http2Exception): int</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];Http2StreamChannelId253769126[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)Http2StreamChannelId</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   id: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   parentId: ChannelId [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ asLongText(): String</TD></TR><TR><TD ALIGN="LEFT" >+ asShortText(): String</TD></TR><TR><TD ALIGN="LEFT" >+ compareTo(o: ChannelId): int</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];IntegerRedisMessage244996309[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)IntegerRedisMessage</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   value: long [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ value(): long</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];InternalAttribute1443588886[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)InternalAttribute</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   charset: Charset [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   size: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   value: List&lt;ByteBuf&gt; [0..*]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ addValue(value: String)</TD></TR><TR><TD ALIGN="LEFT" >+ addValue(value: String, rank: int)</TD></TR><TR><TD ALIGN="LEFT" >+ compareTo(o: InterfaceHttpData): int</TD></TR><TR><TD ALIGN="LEFT" >+ compareTo(o: InternalAttribute): int</TD></TR><TR><TD ALIGN="LEFT" ># deallocate()</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): InterfaceHttpData</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): InterfaceHttpData</TD></TR><TR><TD ALIGN="LEFT" >+ size(): int</TD></TR><TR><TD ALIGN="LEFT" >+ toByteBuf(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): InterfaceHttpData</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): InterfaceHttpData</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];IoTransport1612654261[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)IoTransport</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   datagramChannel: ChannelFactory&lt;DatagramChannel&gt; [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   eventLoop: EventLoop [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   socketChannel: ChannelFactory&lt;SocketChannel&gt; [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ create(eventLoop: EventLoop, socketChannel: ChannelFactory&lt;SocketChannel&gt;, datagramChannel: ChannelFactory&lt;DatagramChannel&gt;): IoTransport</TD></TR><TR><TD ALIGN="LEFT" >+ datagramChannel(): ChannelFactory&lt;DatagramChannel&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ eventLoop(): EventLoop</TD></TR><TR><TD ALIGN="LEFT" >+ socketChannel(): ChannelFactory&lt;SocketChannel&gt;</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];LazyChannelPromise1645235732[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)LazyChannelPromise</TD></TR><HR/><TR><TD ALIGN="LEFT" ># executor(): EventExecutor</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];MemoryAttribute1443588886[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)MemoryAttribute</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ addContent(buffer: ByteBuf, last: boolean)</TD></TR><TR><TD ALIGN="LEFT" >+ compareTo(other: InterfaceHttpData): int</TD></TR><TR><TD ALIGN="LEFT" >+ compareTo(o: Attribute): int</TD></TR><TR><TD ALIGN="LEFT" >+ copy(): Attribute</TD></TR><TR><TD ALIGN="LEFT" >+ duplicate(): Attribute</TD></TR><TR><TD ALIGN="LEFT" >+ replace(content: ByteBuf): Attribute</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): Attribute</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): Attribute</TD></TR><TR><TD ALIGN="LEFT" >+ retainedDuplicate(): Attribute</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): Attribute</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): Attribute</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];MemoryFileUpload1443588886[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)MemoryFileUpload</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   contentTransferEncoding: String [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   contentType: String [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   filename: String [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ compareTo(o: InterfaceHttpData): int</TD></TR><TR><TD ALIGN="LEFT" >+ compareTo(o: FileUpload): int</TD></TR><TR><TD ALIGN="LEFT" >+ copy(): FileUpload</TD></TR><TR><TD ALIGN="LEFT" >+ duplicate(): FileUpload</TD></TR><TR><TD ALIGN="LEFT" >+ replace(content: ByteBuf): FileUpload</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): FileUpload</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): FileUpload</TD></TR><TR><TD ALIGN="LEFT" >+ retainedDuplicate(): FileUpload</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): FileUpload</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): FileUpload</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];MixedAttribute1443588886[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)MixedAttribute</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ copy(): Attribute</TD></TR><TR><TD ALIGN="LEFT" >+ duplicate(): Attribute</TD></TR><TR><TD ALIGN="LEFT" ># makeDiskData(): Attribute</TD></TR><TR><TD ALIGN="LEFT" >- makeInitialAttributeFromValue(name: String, value: String, limitSize: long, charset: Charset, baseDir: String, deleteOnExit: boolean): Attribute</TD></TR><TR><TD ALIGN="LEFT" >+ replace(content: ByteBuf): Attribute</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): Attribute</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): Attribute</TD></TR><TR><TD ALIGN="LEFT" >+ retainedDuplicate(): Attribute</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): Attribute</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): Attribute</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];MixedFileUpload1443588886[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)MixedFileUpload</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ copy(): FileUpload</TD></TR><TR><TD ALIGN="LEFT" >+ duplicate(): FileUpload</TD></TR><TR><TD ALIGN="LEFT" ># makeDiskData(): FileUpload</TD></TR><TR><TD ALIGN="LEFT" >+ replace(content: ByteBuf): FileUpload</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): FileUpload</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): FileUpload</TD></TR><TR><TD ALIGN="LEFT" >+ retainedDuplicate(): FileUpload</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): FileUpload</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): FileUpload</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];MqttPublishMessage1670608012[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)MqttPublishMessage</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ content(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ copy(): MqttPublishMessage</TD></TR><TR><TD ALIGN="LEFT" >+ duplicate(): MqttPublishMessage</TD></TR><TR><TD ALIGN="LEFT" >+ payload(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ refCnt(): int</TD></TR><TR><TD ALIGN="LEFT" >+ release(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ release(decrement: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ replace(content: ByteBuf): MqttPublishMessage</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): MqttPublishMessage</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): MqttPublishMessage</TD></TR><TR><TD ALIGN="LEFT" >+ retainedDuplicate(): MqttPublishMessage</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): MqttPublishMessage</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): MqttPublishMessage</TD></TR><TR><TD ALIGN="LEFT" >+ variableHeader(): MqttPublishVariableHeader</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];OpenSslPrivateKey1346866284[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)OpenSslPrivateKey</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   privateKeyAddress: long [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" ># deallocate()</TD></TR><TR><TD ALIGN="LEFT" >+ destroy()</TD></TR><TR><TD ALIGN="LEFT" ># newKeyMaterial(certificateChain: long, chain: X509Certificate[]): OpenSslKeyMaterial</TD></TR><TR><TD ALIGN="LEFT" >- privateKeyAddress(): long</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): OpenSslPrivateKey</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): OpenSslPrivateKey</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): OpenSslPrivateKey</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): OpenSslPrivateKey</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];OpenSslPrivateKeyMaterial1439296796[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)OpenSslPrivateKeyMaterial</TD></TR><HR/><TR><TD ALIGN="LEFT" >#   certificateChain: long [1]</TD></TR><TR><TD ALIGN="LEFT" >-   x509CertificateChain: X509Certificate[] [0..*]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ certificateChain(): X509Certificate[]</TD></TR><TR><TD ALIGN="LEFT" >+ certificateChainAddress(): long</TD></TR><TR><TD ALIGN="LEFT" ># deallocate()</TD></TR><TR><TD ALIGN="LEFT" >+ privateKeyAddress(): long</TD></TR><TR><TD ALIGN="LEFT" >- releaseChain()</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): OpenSslKeyMaterial</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): OpenSslKeyMaterial</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): OpenSslKeyMaterial</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): OpenSslKeyMaterial</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];PemPrivateKey1346866284[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)PemPrivateKey</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   content: ByteBuf [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ content(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ copy(): PemPrivateKey</TD></TR><TR><TD ALIGN="LEFT" ># deallocate()</TD></TR><TR><TD ALIGN="LEFT" >+ destroy()</TD></TR><TR><TD ALIGN="LEFT" >+ duplicate(): PemPrivateKey</TD></TR><TR><TD ALIGN="LEFT" >+ replace(content: ByteBuf): PemPrivateKey</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): PemPrivateKey</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): PemPrivateKey</TD></TR><TR><TD ALIGN="LEFT" >+ retainedDuplicate(): PemPrivateKey</TD></TR><TR><TD ALIGN="LEFT" ># toPEM(allocator: ByteBufAllocator, useDirect: boolean, key: PrivateKey): PemEncoded</TD></TR><TR><TD ALIGN="LEFT" ># toPEM(allocator: ByteBufAllocator, useDirect: boolean, bytes: byte[]): PemEncoded</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): PemPrivateKey</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): PemPrivateKey</TD></TR><TR><TD ALIGN="LEFT" >+ valueOf(key: byte[]): PemPrivateKey</TD></TR><TR><TD ALIGN="LEFT" >+ valueOf(key: ByteBuf): PemPrivateKey</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];PemValue1346866284[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)PemValue</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   content: ByteBuf [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   sensitive: boolean [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ content(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ copy(): PemValue</TD></TR><TR><TD ALIGN="LEFT" ># deallocate()</TD></TR><TR><TD ALIGN="LEFT" >+ duplicate(): PemValue</TD></TR><TR><TD ALIGN="LEFT" >+ replace(content: ByteBuf): PemValue</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): PemValue</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): PemValue</TD></TR><TR><TD ALIGN="LEFT" >+ retainedDuplicate(): PemValue</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): PemValue</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): PemValue</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];PemX509Certificate1346866284[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)PemX509Certificate</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   content: ByteBuf [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >- append(allocator: ByteBufAllocator, useDirect: boolean, encoded: PemEncoded, count: int, pem: ByteBuf): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >- append(allocator: ByteBufAllocator, useDirect: boolean, cert: X509Certificate, count: int, pem: ByteBuf): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ checkValidity()</TD></TR><TR><TD ALIGN="LEFT" >+ checkValidity(date: Date)</TD></TR><TR><TD ALIGN="LEFT" >+ content(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ copy(): PemX509Certificate</TD></TR><TR><TD ALIGN="LEFT" >+ duplicate(): PemX509Certificate</TD></TR><TR><TD ALIGN="LEFT" >+ getExtensionValue(oid: String): byte[]</TD></TR><TR><TD ALIGN="LEFT" >- newBuffer(allocator: ByteBufAllocator, useDirect: boolean, initialCapacity: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ refCnt(): int</TD></TR><TR><TD ALIGN="LEFT" >+ release(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ release(decrement: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ replace(content: ByteBuf): PemX509Certificate</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): PemX509Certificate</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): PemX509Certificate</TD></TR><TR><TD ALIGN="LEFT" >+ retainedDuplicate(): PemX509Certificate</TD></TR><TR><TD ALIGN="LEFT" ># toPEM(allocator: ByteBufAllocator, useDirect: boolean, chain: X509Certificate...): PemEncoded</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): PemX509Certificate</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): PemX509Certificate</TD></TR><TR><TD ALIGN="LEFT" >+ valueOf(key: byte[]): PemX509Certificate</TD></TR><TR><TD ALIGN="LEFT" >+ valueOf(key: ByteBuf): PemX509Certificate</TD></TR><TR><TD ALIGN="LEFT" >+ verify(key: PublicKey)</TD></TR><TR><TD ALIGN="LEFT" >+ verify(key: PublicKey, sigProvider: String)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];ReferenceCountedOpenSslContext1346866284[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)ReferenceCountedOpenSslContext</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   apn: OpenSslApplicationProtocolNegotiator [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   bioNonApplicationBufferSize: int [1]</TD></TR><TR><TD ALIGN="LEFT" >#   clientAuth: ClientAuth [0..1]</TD></TR><TR><TD ALIGN="LEFT" >#   ctx: long [1]</TD></TR><TR><TD ALIGN="LEFT" >#   ctxLock: ReadWriteLock [0..1]</TD></TR><TR><TD ALIGN="LEFT" >#   enableOcsp: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >#   engineMap: OpenSslEngineMap [0..1]</TD></TR><TR><TD ALIGN="LEFT" >#   keyCertChain: Certificate[] [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   leak: ResourceLeakTracker&lt;ReferenceCountedOpenSslContext&gt; [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   mode: int [1]</TD></TR><TR><TD ALIGN="LEFT" >#   protocols: String[] [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   refCnt: AbstractReferenceCounted [0..1]</TD></TR><TR><TD ALIGN="LEFT" >#   tlsFalseStart: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   unmodifiableCiphers: List&lt;String&gt; [0..*]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ applicationProtocolNegotiator(): ApplicationProtocolNegotiator</TD></TR><TR><TD ALIGN="LEFT" ># certificates(chain: byte[][]): X509Certificate[]</TD></TR><TR><TD ALIGN="LEFT" ># chooseTrustManager(managers: TrustManager[]): X509TrustManager</TD></TR><TR><TD ALIGN="LEFT" ># chooseX509KeyManager(kms: KeyManager[]): X509KeyManager</TD></TR><TR><TD ALIGN="LEFT" >+ cipherSuites(): List&lt;String&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ context(): long</TD></TR><TR><TD ALIGN="LEFT" >- destroy()</TD></TR><TR><TD ALIGN="LEFT" ># freeBio(bio: long)</TD></TR><TR><TD ALIGN="LEFT" >- newBIO(buffer: ByteBuf): long</TD></TR><TR><TD ALIGN="LEFT" >+ newEngine(alloc: ByteBufAllocator, peerHost: String, peerPort: int): SSLEngine</TD></TR><TR><TD ALIGN="LEFT" >+ newEngine(alloc: ByteBufAllocator): SSLEngine</TD></TR><TR><TD ALIGN="LEFT" ># newEngine0(alloc: ByteBufAllocator, peerHost: String, peerPort: int, jdkCompatibilityMode: boolean): SSLEngine</TD></TR><TR><TD ALIGN="LEFT" ># newHandler(alloc: ByteBufAllocator, startTls: boolean): SslHandler</TD></TR><TR><TD ALIGN="LEFT" ># newHandler(alloc: ByteBufAllocator, peerHost: String, peerPort: int, startTls: boolean): SslHandler</TD></TR><TR><TD ALIGN="LEFT" ># newHandler(alloc: ByteBufAllocator, startTls: boolean, executor: Executor): SslHandler</TD></TR><TR><TD ALIGN="LEFT" ># newHandler(alloc: ByteBufAllocator, peerHost: String, peerPort: int, startTls: boolean, executor: Executor): SslHandler</TD></TR><TR><TD ALIGN="LEFT" >- opensslSelectorFailureBehavior(behavior: SelectorFailureBehavior): int</TD></TR><TR><TD ALIGN="LEFT" ># providerFor(factory: KeyManagerFactory, password: String): OpenSslKeyMaterialProvider</TD></TR><TR><TD ALIGN="LEFT" >+ refCnt(): int</TD></TR><TR><TD ALIGN="LEFT" >+ release(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ release(decrement: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): ReferenceCounted</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): ReferenceCounted</TD></TR><TR><TD ALIGN="LEFT" >- retrieveEngine(engineMap: OpenSslEngineMap, ssl: long): ReferenceCountedOpenSslEngine</TD></TR><TR><TD ALIGN="LEFT" >+ sessionContext(): OpenSslSessionContext</TD></TR><TR><TD ALIGN="LEFT" >+ sslCtxPointer(): long</TD></TR><TR><TD ALIGN="LEFT" >+ stats(): OpenSslSessionStats</TD></TR><TR><TD ALIGN="LEFT" ># toBIO(allocator: ByteBufAllocator, key: PrivateKey): long</TD></TR><TR><TD ALIGN="LEFT" ># toBIO(allocator: ByteBufAllocator, certChain: X509Certificate...): long</TD></TR><TR><TD ALIGN="LEFT" ># toBIO(allocator: ByteBufAllocator, pem: PemEncoded): long</TD></TR><TR><TD ALIGN="LEFT" ># toNegotiator(config: ApplicationProtocolConfig): OpenSslApplicationProtocolNegotiator</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): ReferenceCounted</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): ReferenceCounted</TD></TR><TR><TD ALIGN="LEFT" ># useExtendedTrustManager(trustManager: X509TrustManager): boolean</TD></TR><TR><TD ALIGN="LEFT" >- verifyResult(result: byte[]): byte[]</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];ReferenceCountedOpenSslEngine1346866284[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)ReferenceCountedOpenSslEngine</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   algorithmConstraints: Object [0..1]</TD></TR><TR><TD ALIGN="LEFT" >#   alloc: ByteBufAllocator [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   apn: OpenSslApplicationProtocolNegotiator [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   applicationProtocol: String [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   clientAuth: ClientAuth [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   clientMode: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   destroyed: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   enableOcsp: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   endPointIdentificationAlgorithm: String [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   engineMap: OpenSslEngineMap [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   explicitlyEnabledProtocols: String[] [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   handshakeState: HandshakeState [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   isInboundDone: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >#   jdkCompatibilityMode: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   lastAccessed: long [1]</TD></TR><TR><TD ALIGN="LEFT" >-   leak: ResourceLeakTracker&lt;ReferenceCountedOpenSslEngine&gt; [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   matchers: Collection&lt;?&gt; [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   maxWrapBufferSize: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   maxWrapOverhead: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   needTask: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   networkBIO: long [1]</TD></TR><TR><TD ALIGN="LEFT" >-   outboundClosed: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   parentContext: ReferenceCountedOpenSslContext [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   pendingException: Throwable [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   receivedShutdown: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   refCnt: AbstractReferenceCounted [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   session: OpenSslSession [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   sessionSet: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   singleDstBuffer: ByteBuffer[] [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   singleSrcBuffer: ByteBuffer[] [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   sniHostNames: List&lt;String&gt; [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   ssl: long [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" ># authMethods(): String[]</TD></TR><TR><TD ALIGN="LEFT" >+ beginHandshake()</TD></TR><TR><TD ALIGN="LEFT" ># bioSetFd(fd: int)</TD></TR><TR><TD ALIGN="LEFT" >- bufferAddress(b: ByteBuffer): long</TD></TR><TR><TD ALIGN="LEFT" ># calculateMaxLengthForWrap(plaintextLength: int, numComponents: int): int</TD></TR><TR><TD ALIGN="LEFT" >- calculateMaxWrapOverhead()</TD></TR><TR><TD ALIGN="LEFT" >- checkEngineClosed()</TD></TR><TR><TD ALIGN="LEFT" ># checkSniHostnameMatch(hostname: byte[]): boolean</TD></TR><TR><TD ALIGN="LEFT" >- closeAll()</TD></TR><TR><TD ALIGN="LEFT" >+ closeInbound()</TD></TR><TR><TD ALIGN="LEFT" >+ closeOutbound()</TD></TR><TR><TD ALIGN="LEFT" >- doSSLShutdown(): boolean</TD></TR><TR><TD ALIGN="LEFT" >- getHandshakeStatus(pending: int): HandshakeStatus</TD></TR><TR><TD ALIGN="LEFT" >- handleUnwrapException(bytesConsumed: int, bytesProduced: int, e: SSLException): SSLEngineResult</TD></TR><TR><TD ALIGN="LEFT" >- handshake(): HandshakeStatus</TD></TR><TR><TD ALIGN="LEFT" >- handshakeException(): HandshakeStatus</TD></TR><TR><TD ALIGN="LEFT" ># initHandshakeException(cause: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >- isBytesAvailableEnoughForWrap(bytesAvailable: int, plaintextLength: int, numComponents: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >- isEmpty(arr: Object[]): boolean</TD></TR><TR><TD ALIGN="LEFT" >- isEmpty(cert: byte[]): boolean</TD></TR><TR><TD ALIGN="LEFT" >- isEndPointVerificationEnabled(endPointIdentificationAlgorithm: String): boolean</TD></TR><TR><TD ALIGN="LEFT" >- isProtocolEnabled(opts: int, disableMask: int, protocolString: String): boolean</TD></TR><TR><TD ALIGN="LEFT" ># masterKey(): SecretKeySpec</TD></TR><TR><TD ALIGN="LEFT" ># maxEncryptedPacketLength(): int</TD></TR><TR><TD ALIGN="LEFT" ># maxEncryptedPacketLength0(): int</TD></TR><TR><TD ALIGN="LEFT" ># maxWrapOverhead(): int</TD></TR><TR><TD ALIGN="LEFT" >- mayFinishHandshake(hs: HandshakeStatus, bytesConsumed: int, bytesProduced: int): HandshakeStatus</TD></TR><TR><TD ALIGN="LEFT" >- mayFinishHandshake(status: HandshakeStatus): HandshakeStatus</TD></TR><TR><TD ALIGN="LEFT" >- needPendingStatus(): boolean</TD></TR><TR><TD ALIGN="LEFT" >- needWrapAgain(stackError: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >- newResult(hs: HandshakeStatus, bytesConsumed: int, bytesProduced: int): SSLEngineResult</TD></TR><TR><TD ALIGN="LEFT" >- newResult(status: Status, hs: HandshakeStatus, bytesConsumed: int, bytesProduced: int): SSLEngineResult</TD></TR><TR><TD ALIGN="LEFT" >- newResultMayFinishHandshake(hs: HandshakeStatus, bytesConsumed: int, bytesProduced: int): SSLEngineResult</TD></TR><TR><TD ALIGN="LEFT" >- newResultMayFinishHandshake(status: Status, hs: HandshakeStatus, bytesConsumed: int, bytesProduced: int): SSLEngineResult</TD></TR><TR><TD ALIGN="LEFT" >- pendingStatus(pendingStatus: int): HandshakeStatus</TD></TR><TR><TD ALIGN="LEFT" >- readPlaintextData(dst: ByteBuffer): int</TD></TR><TR><TD ALIGN="LEFT" >+ refCnt(): int</TD></TR><TR><TD ALIGN="LEFT" >- rejectRemoteInitiatedRenegotiation()</TD></TR><TR><TD ALIGN="LEFT" >+ release(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ release(decrement: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >- resetSingleDstBuffer()</TD></TR><TR><TD ALIGN="LEFT" >- resetSingleSrcBuffer()</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): ReferenceCounted</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): ReferenceCounted</TD></TR><TR><TD ALIGN="LEFT" >- runAndResetNeedTask(task: Runnable)</TD></TR><TR><TD ALIGN="LEFT" >- selectApplicationProtocol()</TD></TR><TR><TD ALIGN="LEFT" >- selectApplicationProtocol(protocols: List&lt;String&gt;, behavior: SelectedListenerFailureBehavior, applicationProtocol: String): String</TD></TR><TR><TD ALIGN="LEFT" ># setKeyMaterial(keyMaterial: OpenSslKeyMaterial): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ shutdown()</TD></TR><TR><TD ALIGN="LEFT" >- shutdownWithError(operations: String, sslError: int): SSLException</TD></TR><TR><TD ALIGN="LEFT" >- shutdownWithError(operation: String, sslError: int, error: int): SSLException</TD></TR><TR><TD ALIGN="LEFT" >- singleDstBuffer(src: ByteBuffer): ByteBuffer[]</TD></TR><TR><TD ALIGN="LEFT" >- singleSrcBuffer(src: ByteBuffer): ByteBuffer[]</TD></TR><TR><TD ALIGN="LEFT" ># sslPending(): int</TD></TR><TR><TD ALIGN="LEFT" >- sslPending0(): int</TD></TR><TR><TD ALIGN="LEFT" >+ sslPointer(): long</TD></TR><TR><TD ALIGN="LEFT" >- sslReadErrorResult(error: int, stackError: int, bytesConsumed: int, bytesProduced: int): SSLEngineResult</TD></TR><TR><TD ALIGN="LEFT" >- toJavaCipherSuite(openSslCipherSuite: String): String</TD></TR><TR><TD ALIGN="LEFT" >- toJavaCipherSuitePrefix(protocolVersion: String): String</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): ReferenceCounted</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): ReferenceCounted</TD></TR><TR><TD ALIGN="LEFT" >+ unwrap(srcs: ByteBuffer[], srcsOffset: int, srcsLength: int, dsts: ByteBuffer[], dstsOffset: int, dstsLength: int): SSLEngineResult</TD></TR><TR><TD ALIGN="LEFT" >+ unwrap(srcs: ByteBuffer[], dsts: ByteBuffer[]): SSLEngineResult</TD></TR><TR><TD ALIGN="LEFT" >+ unwrap(src: ByteBuffer, dsts: ByteBuffer[], offset: int, length: int): SSLEngineResult</TD></TR><TR><TD ALIGN="LEFT" >+ unwrap(src: ByteBuffer, dst: ByteBuffer): SSLEngineResult</TD></TR><TR><TD ALIGN="LEFT" >+ unwrap(src: ByteBuffer, dsts: ByteBuffer[]): SSLEngineResult</TD></TR><TR><TD ALIGN="LEFT" >+ wrap(srcs: ByteBuffer[], offset: int, length: int, dst: ByteBuffer): SSLEngineResult</TD></TR><TR><TD ALIGN="LEFT" >+ wrap(src: ByteBuffer, dst: ByteBuffer): SSLEngineResult</TD></TR><TR><TD ALIGN="LEFT" >- writeEncryptedData(src: ByteBuffer, len: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >- writePlaintextData(src: ByteBuffer, len: int): int</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];ReplayingDecoderByteBuf1568242786[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)ReplayingDecoderByteBuf</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   buffer: ByteBuf [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   swapped: SwappedByteBuf [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   terminated: boolean [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ alloc(): ByteBufAllocator</TD></TR><TR><TD ALIGN="LEFT" >+ array(): byte[]</TD></TR><TR><TD ALIGN="LEFT" >+ arrayOffset(): int</TD></TR><TR><TD ALIGN="LEFT" >+ asReadOnly(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ bytesBefore(value: byte): int</TD></TR><TR><TD ALIGN="LEFT" >+ bytesBefore(length: int, value: byte): int</TD></TR><TR><TD ALIGN="LEFT" >+ bytesBefore(index: int, length: int, value: byte): int</TD></TR><TR><TD ALIGN="LEFT" >+ capacity(): int</TD></TR><TR><TD ALIGN="LEFT" >+ capacity(newCapacity: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >- checkIndex(index: int, length: int)</TD></TR><TR><TD ALIGN="LEFT" >- checkReadableBytes(readableBytes: int)</TD></TR><TR><TD ALIGN="LEFT" >+ clear(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ compareTo(buffer: ByteBuf): int</TD></TR><TR><TD ALIGN="LEFT" >+ copy(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ copy(index: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ discardReadBytes(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ discardSomeReadBytes(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ duplicate(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ ensureWritable(writableBytes: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ ensureWritable(minWritableBytes: int, force: boolean): int</TD></TR><TR><TD ALIGN="LEFT" >+ forEachByte(processor: ByteProcessor): int</TD></TR><TR><TD ALIGN="LEFT" >+ forEachByte(index: int, length: int, processor: ByteProcessor): int</TD></TR><TR><TD ALIGN="LEFT" >+ forEachByteDesc(processor: ByteProcessor): int</TD></TR><TR><TD ALIGN="LEFT" >+ forEachByteDesc(index: int, length: int, processor: ByteProcessor): int</TD></TR><TR><TD ALIGN="LEFT" >+ getBoolean(index: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ getByte(index: int): byte</TD></TR><TR><TD ALIGN="LEFT" >+ getBytes(index: int, dst: byte[], dstIndex: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ getBytes(index: int, dst: byte[]): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ getBytes(index: int, dst: ByteBuffer): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ getBytes(index: int, dst: ByteBuf, dstIndex: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ getBytes(index: int, dst: ByteBuf, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ getBytes(index: int, dst: ByteBuf): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ getBytes(index: int, out: GatheringByteChannel, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getBytes(index: int, out: FileChannel, position: long, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getBytes(index: int, out: OutputStream, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ getChar(index: int): char</TD></TR><TR><TD ALIGN="LEFT" >+ getCharSequence(index: int, length: int, charset: Charset): CharSequence</TD></TR><TR><TD ALIGN="LEFT" >+ getDouble(index: int): double</TD></TR><TR><TD ALIGN="LEFT" >+ getFloat(index: int): float</TD></TR><TR><TD ALIGN="LEFT" >+ getInt(index: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getIntLE(index: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getLong(index: int): long</TD></TR><TR><TD ALIGN="LEFT" >+ getLongLE(index: int): long</TD></TR><TR><TD ALIGN="LEFT" >+ getMedium(index: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getMediumLE(index: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getShort(index: int): short</TD></TR><TR><TD ALIGN="LEFT" >+ getShortLE(index: int): short</TD></TR><TR><TD ALIGN="LEFT" >+ getUnsignedByte(index: int): short</TD></TR><TR><TD ALIGN="LEFT" >+ getUnsignedInt(index: int): long</TD></TR><TR><TD ALIGN="LEFT" >+ getUnsignedIntLE(index: int): long</TD></TR><TR><TD ALIGN="LEFT" >+ getUnsignedMedium(index: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getUnsignedMediumLE(index: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getUnsignedShort(index: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getUnsignedShortLE(index: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ indexOf(fromIndex: int, toIndex: int, value: byte): int</TD></TR><TR><TD ALIGN="LEFT" >+ internalNioBuffer(index: int, length: int): ByteBuffer</TD></TR><TR><TD ALIGN="LEFT" >+ isReadable(size: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ isWritable(size: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ markReaderIndex(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ markWriterIndex(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ maxCapacity(): int</TD></TR><TR><TD ALIGN="LEFT" >+ maxWritableBytes(): int</TD></TR><TR><TD ALIGN="LEFT" >+ memoryAddress(): long</TD></TR><TR><TD ALIGN="LEFT" >+ nioBuffer(): ByteBuffer</TD></TR><TR><TD ALIGN="LEFT" >+ nioBuffer(index: int, length: int): ByteBuffer</TD></TR><TR><TD ALIGN="LEFT" >+ nioBufferCount(): int</TD></TR><TR><TD ALIGN="LEFT" >+ nioBuffers(): ByteBuffer[]</TD></TR><TR><TD ALIGN="LEFT" >+ nioBuffers(index: int, length: int): ByteBuffer[]</TD></TR><TR><TD ALIGN="LEFT" >+ order(): ByteOrder</TD></TR><TR><TD ALIGN="LEFT" >+ order(endianness: ByteOrder): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readBoolean(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ readByte(): byte</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(dst: byte[], dstIndex: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(dst: byte[]): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(dst: ByteBuffer): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(dst: ByteBuf, dstIndex: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(dst: ByteBuf, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(dst: ByteBuf): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(out: GatheringByteChannel, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(out: FileChannel, position: long, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(out: OutputStream, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readChar(): char</TD></TR><TR><TD ALIGN="LEFT" >+ readCharSequence(length: int, charset: Charset): CharSequence</TD></TR><TR><TD ALIGN="LEFT" >+ readDouble(): double</TD></TR><TR><TD ALIGN="LEFT" >+ readFloat(): float</TD></TR><TR><TD ALIGN="LEFT" >+ readInt(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readIntLE(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readLong(): long</TD></TR><TR><TD ALIGN="LEFT" >+ readLongLE(): long</TD></TR><TR><TD ALIGN="LEFT" >+ readMedium(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readMediumLE(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readRetainedSlice(length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readShort(): short</TD></TR><TR><TD ALIGN="LEFT" >+ readShortLE(): short</TD></TR><TR><TD ALIGN="LEFT" >+ readSlice(length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readUnsignedByte(): short</TD></TR><TR><TD ALIGN="LEFT" >+ readUnsignedInt(): long</TD></TR><TR><TD ALIGN="LEFT" >+ readUnsignedIntLE(): long</TD></TR><TR><TD ALIGN="LEFT" >+ readUnsignedMedium(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readUnsignedMediumLE(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readUnsignedShort(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readUnsignedShortLE(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readableBytes(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readerIndex(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readerIndex(readerIndex: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ refCnt(): int</TD></TR><TR><TD ALIGN="LEFT" >- reject(): UnsupportedOperationException</TD></TR><TR><TD ALIGN="LEFT" >+ release(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ release(decrement: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ resetReaderIndex(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ resetWriterIndex(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ retainedDuplicate(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ retainedSlice(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ retainedSlice(index: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setBoolean(index: int, value: boolean): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setByte(index: int, value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setBytes(index: int, src: byte[], srcIndex: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setBytes(index: int, src: byte[]): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setBytes(index: int, src: ByteBuffer): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setBytes(index: int, src: ByteBuf, srcIndex: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setBytes(index: int, src: ByteBuf, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setBytes(index: int, src: ByteBuf): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setBytes(index: int, in: InputStream, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ setBytes(index: int, in: ScatteringByteChannel, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ setBytes(index: int, in: FileChannel, position: long, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ setChar(index: int, value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setCharSequence(index: int, sequence: CharSequence, charset: Charset): int</TD></TR><TR><TD ALIGN="LEFT" >+ setDouble(index: int, value: double): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setFloat(index: int, value: float): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setIndex(readerIndex: int, writerIndex: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setInt(index: int, value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setIntLE(index: int, value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setLong(index: int, value: long): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setLongLE(index: int, value: long): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setMedium(index: int, value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setMediumLE(index: int, value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setShort(index: int, value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setShortLE(index: int, value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setZero(index: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ skipBytes(length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ slice(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ slice(index: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" ># terminate()</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ unwrap(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writableBytes(): int</TD></TR><TR><TD ALIGN="LEFT" >+ writeBoolean(value: boolean): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeByte(value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeBytes(src: byte[], srcIndex: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeBytes(src: byte[]): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeBytes(src: ByteBuffer): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeBytes(src: ByteBuf, srcIndex: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeBytes(src: ByteBuf, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeBytes(src: ByteBuf): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeBytes(in: InputStream, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ writeBytes(in: ScatteringByteChannel, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ writeBytes(in: FileChannel, position: long, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ writeChar(value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeCharSequence(sequence: CharSequence, charset: Charset): int</TD></TR><TR><TD ALIGN="LEFT" >+ writeDouble(value: double): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeFloat(value: float): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeInt(value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeIntLE(value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeLong(value: long): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeLongLE(value: long): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeMedium(value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeMediumLE(value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeShort(value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeShortLE(value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeZero(length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writerIndex(): int</TD></TR><TR><TD ALIGN="LEFT" >+ writerIndex(writerIndex: int): ByteBuf</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];ResultCallbackListener357515797[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)ResultCallbackListener</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   engine: ReferenceCountedOpenSslEngine [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   resultCallback: ResultCallback&lt;byte[]&gt; [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   ssl: long [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ operationComplete(future: Future&lt;byte[]&gt;)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];SimpleChannelPromiseAggregator102533602[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)SimpleChannelPromiseAggregator</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   aggregateFailure: Throwable [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   doneAllocating: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   doneCount: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   expectedCount: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   promise: ChannelPromise [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >- allPromisesDone(): boolean</TD></TR><TR><TD ALIGN="LEFT" >- allowFailure(): boolean</TD></TR><TR><TD ALIGN="LEFT" >- awaitingPromises(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ doneAllocatingPromises(): ChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ newPromise(): ChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ setFailure(cause: Throwable): ChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >- setPromise(): ChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ setSuccess(result: Void): ChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ tryFailure(cause: Throwable): boolean</TD></TR><TR><TD ALIGN="LEFT" >- tryPromise(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ trySuccess(result: Void): boolean</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];State403338467[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)State</TD></TR><HR/><TR><TD ALIGN="LEFT" >#   activeCountForTree: int [1]</TD></TR><TR><TD ALIGN="LEFT" >#   children: IntObjectMap&lt;State&gt; [0..*]</TD></TR><TR><TD ALIGN="LEFT" >#   dependencyTreeDepth: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   flags: byte [1]</TD></TR><TR><TD ALIGN="LEFT" >#   parent: State [0..1]</TD></TR><TR><TD ALIGN="LEFT" >#   pseudoTime: long [1]</TD></TR><TR><TD ALIGN="LEFT" >-   pseudoTimeQueue: PriorityQueue&lt;State&gt; [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   pseudoTimeQueueIndex: int [1]</TD></TR><TR><TD ALIGN="LEFT" >#   pseudoTimeToWrite: long [1]</TD></TR><TR><TD ALIGN="LEFT" >-   stateOnlyQueueIndex: int [1]</TD></TR><TR><TD ALIGN="LEFT" >#   stream: Http2Stream [0..1]</TD></TR><TR><TD ALIGN="LEFT" >#   streamId: int [1]</TD></TR><TR><TD ALIGN="LEFT" >#   streamableBytes: int [1]</TD></TR><TR><TD ALIGN="LEFT" >#   totalQueuedWeights: long [1]</TD></TR><TR><TD ALIGN="LEFT" >#   weight: short [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" ># activeCountChangeForTree(increment: int)</TD></TR><TR><TD ALIGN="LEFT" ># close()</TD></TR><TR><TD ALIGN="LEFT" >- initChildren()</TD></TR><TR><TD ALIGN="LEFT" >- initChildrenIfEmpty()</TD></TR><TR><TD ALIGN="LEFT" ># isDescendantOf(state: State): boolean</TD></TR><TR><TD ALIGN="LEFT" ># offerAndInitializePseudoTime(state: State)</TD></TR><TR><TD ALIGN="LEFT" ># offerPseudoTimeQueue(state: State)</TD></TR><TR><TD ALIGN="LEFT" ># peekPseudoTimeQueue(): State</TD></TR><TR><TD ALIGN="LEFT" ># pollPseudoTimeQueue(): State</TD></TR><TR><TD ALIGN="LEFT" >+ priorityQueueIndex(queue: DefaultPriorityQueue&lt;?&gt;): int</TD></TR><TR><TD ALIGN="LEFT" >+ priorityQueueIndex(queue: DefaultPriorityQueue&lt;?&gt;, i: int)</TD></TR><TR><TD ALIGN="LEFT" >- removeAllChildrenExcept(stateToRetain: State): IntObjectMap&lt;State&gt;</TD></TR><TR><TD ALIGN="LEFT" ># removeChild(child: State)</TD></TR><TR><TD ALIGN="LEFT" ># removePseudoTimeQueue(state: State)</TD></TR><TR><TD ALIGN="LEFT" ># takeChild(child: State, exclusive: boolean, events: List&lt;ParentChangedEvent&gt;)</TD></TR><TR><TD ALIGN="LEFT" ># takeChild(childItr: Iterator&lt;PrimitiveEntry&lt;State&gt;&gt;, child: State, exclusive: boolean, events: List&lt;ParentChangedEvent&gt;)</TD></TR><TR><TD ALIGN="LEFT" >- unsetActive()</TD></TR><TR><TD ALIGN="LEFT" ># unsetDistributing()</TD></TR><TR><TD ALIGN="LEFT" ># updatePseudoTime(parentState: State, nsent: int, totalQueuedWeights: long)</TD></TR><TR><TD ALIGN="LEFT" ># updateStreamableBytes(newStreamableBytes: int, isActive: boolean)</TD></TR><TR><TD ALIGN="LEFT" ># wasStreamReservedOrActivated(): boolean</TD></TR><TR><TD ALIGN="LEFT" ># write(numBytes: int, writer: Writer)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];UpgradeEvent934345935[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)UpgradeEvent</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   protocol: CharSequence [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   upgradeRequest: FullHttpRequest [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ protocol(): CharSequence</TD></TR><TR><TD ALIGN="LEFT" >+ refCnt(): int</TD></TR><TR><TD ALIGN="LEFT" >+ release(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ release(decrement: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): UpgradeEvent</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): UpgradeEvent</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): UpgradeEvent</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): UpgradeEvent</TD></TR><TR><TD ALIGN="LEFT" >+ upgradeRequest(): FullHttpRequest</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];WrappedFullHttpRequest1792398099[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)WrappedFullHttpRequest</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   content: HttpContent [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ content(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ copy(): FullHttpRequest</TD></TR><TR><TD ALIGN="LEFT" >+ duplicate(): FullHttpRequest</TD></TR><TR><TD ALIGN="LEFT" >+ refCnt(): int</TD></TR><TR><TD ALIGN="LEFT" >+ release(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ release(decrement: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ replace(content: ByteBuf): FullHttpRequest</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): FullHttpRequest</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): FullHttpRequest</TD></TR><TR><TD ALIGN="LEFT" >+ retainedDuplicate(): FullHttpRequest</TD></TR><TR><TD ALIGN="LEFT" >+ setMethod(method: HttpMethod): FullHttpRequest</TD></TR><TR><TD ALIGN="LEFT" >+ setProtocolVersion(version: HttpVersion): FullHttpRequest</TD></TR><TR><TD ALIGN="LEFT" >+ setUri(uri: String): FullHttpRequest</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): FullHttpRequest</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): FullHttpRequest</TD></TR><TR><TD ALIGN="LEFT" >+ trailingHeaders(): HttpHeaders</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];WrappedHttpRequest1792398099[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)WrappedHttpRequest</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   request: HttpRequest [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ decoderResult(): DecoderResult</TD></TR><TR><TD ALIGN="LEFT" >+ headers(): HttpHeaders</TD></TR><TR><TD ALIGN="LEFT" >+ method(): HttpMethod</TD></TR><TR><TD ALIGN="LEFT" >+ protocolVersion(): HttpVersion</TD></TR><TR><TD ALIGN="LEFT" >+ setMethod(method: HttpMethod): HttpRequest</TD></TR><TR><TD ALIGN="LEFT" >+ setProtocolVersion(version: HttpVersion): HttpRequest</TD></TR><TR><TD ALIGN="LEFT" >+ setUri(uri: String): HttpRequest</TD></TR><TR><TD ALIGN="LEFT" >+ uri(): String</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];WriteTimeoutTask1457442365[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)WriteTimeoutTask</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   ctx: ChannelHandlerContext [0..1]</TD></TR><TR><TD ALIGN="LEFT" >#   next: WriteTimeoutTask [0..1]</TD></TR><TR><TD ALIGN="LEFT" >#   prev: WriteTimeoutTask [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   promise: ChannelPromise [0..1]</TD></TR><TR><TD ALIGN="LEFT" >#   scheduledFuture: Future&lt;?&gt; [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ operationComplete(future: ChannelFuture)</TD></TR><TR><TD ALIGN="LEFT" >+ run()</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];} subgraph cluster_2128886152 {    	label=microbench	labeljust=l	fillcolor="#d8d8d8"	style=filled      DelegateHarnessExecutor576951599[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DelegateHarnessExecutor</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   logger: InternalLogger [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ awaitTermination(timeout: long, unit: TimeUnit): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ execute(command: Runnable)</TD></TR><TR><TD ALIGN="LEFT" >+ executor(service: EventLoop)</TD></TR><TR><TD ALIGN="LEFT" >+ inEventLoop(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ inEventLoop(thread: Thread): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ newProgressivePromise(): ProgressivePromise&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ newPromise(): Promise&lt;V&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ shutdown()</TD></TR><TR><TD ALIGN="LEFT" >+ shutdownGracefully(quietPeriod: long, timeout: long, unit: TimeUnit): Future&lt;?&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ terminationFuture(): Future&lt;?&gt;</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];EmbeddedChannelHandlerContext1967908011[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)EmbeddedChannelHandlerContext</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   alloc: ByteBufAllocator [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   channel: Channel [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   eventLoop: EventLoop [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   handler: ChannelHandler [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   localAddress: SocketAddress [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ alloc(): ByteBufAllocator</TD></TR><TR><TD ALIGN="LEFT" >+ attr(key: AttributeKey&lt;T&gt;): Attribute&lt;T&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ bind(localAddress: SocketAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ bind(localAddress: SocketAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ channel(): Channel</TD></TR><TR><TD ALIGN="LEFT" >+ close(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ close(promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ connect(remoteAddress: SocketAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ connect(remoteAddress: SocketAddress, localAddress: SocketAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ connect(remoteAddress: SocketAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ connect(remoteAddress: SocketAddress, localAddress: SocketAddress, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ deregister(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ deregister(promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ disconnect(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ disconnect(promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ executor(): EventExecutor</TD></TR><TR><TD ALIGN="LEFT" >+ fireChannelActive(): ChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" >+ fireChannelInactive(): ChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" >+ fireChannelRead(msg: Object): ChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" >+ fireChannelReadComplete(): ChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" >+ fireChannelRegistered(): ChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" >+ fireChannelUnregistered(): ChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" >+ fireChannelWritabilityChanged(): ChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" >+ fireExceptionCaught(cause: Throwable): ChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" >+ fireUserEventTriggered(event: Object): ChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" >+ flush(): ChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" ># handleException(t: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >+ handler(): ChannelHandler</TD></TR><TR><TD ALIGN="LEFT" >+ hasAttr(key: AttributeKey&lt;T&gt;): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ name(): String</TD></TR><TR><TD ALIGN="LEFT" >+ newFailedFuture(cause: Throwable): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ newProgressivePromise(): ChannelProgressivePromise</TD></TR><TR><TD ALIGN="LEFT" >+ newPromise(): ChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ newSucceededFuture(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ pipeline(): ChannelPipeline</TD></TR><TR><TD ALIGN="LEFT" >+ read(): ChannelHandlerContext</TD></TR><TR><TD ALIGN="LEFT" >+ voidPromise(): ChannelPromise</TD></TR><TR><TD ALIGN="LEFT" >+ write(msg: Object): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ write(msg: Object, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ writeAndFlush(msg: Object, promise: ChannelPromise): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ writeAndFlush(msg: Object): ChannelFuture</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];} subgraph cluster_387363938 {    	label=bootstrap	labeljust=l	fillcolor="#d8d8d8"	style=filled      AbstractBootstrap952734618[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AbstractBootstrap&lt;B extends AbstractBootstrap&lt;B, C&gt;, C extends Channel&gt;</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   attrs: Map&lt;AttributeKey&lt;?&gt;, Object&gt; [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   channelFactory: ChannelFactory&lt;? extends C&gt; [0..1]</TD></TR><TR><TD ALIGN="LEFT" >#   group: EventLoopGroup [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   handler: ChannelHandler [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   localAddress: SocketAddress [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   options: Map&lt;ChannelOption&lt;?&gt;, Object&gt; [0..*]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ attr(key: AttributeKey&lt;T&gt;, value: T): B</TD></TR><TR><TD ALIGN="LEFT" ># attrs(): Map&lt;AttributeKey&lt;?&gt;, Object&gt;</TD></TR><TR><TD ALIGN="LEFT" ># attrs0(): Map&lt;AttributeKey&lt;?&gt;, Object&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ bind(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ bind(inetPort: int): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ bind(inetHost: String, inetPort: int): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ bind(inetHost: InetAddress, inetPort: int): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ bind(localAddress: SocketAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ channel(channelClass: Class&lt;? extends C&gt;): B</TD></TR><TR><TD ALIGN="LEFT" >+ channelFactory(channelFactory: ChannelFactory&lt;? extends C&gt;): B</TD></TR><TR><TD ALIGN="LEFT" ># channelFactory(): ChannelFactory&lt;? extends C&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ clone(): B</TD></TR><TR><TD ALIGN="LEFT" >+ config(): AbstractBootstrapConfig&lt;B, C&gt;</TD></TR><TR><TD ALIGN="LEFT" ># copiedMap(map: Map&lt;K, V&gt;): Map&lt;K, V&gt;</TD></TR><TR><TD ALIGN="LEFT" >- doBind(localAddress: SocketAddress): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >- doBind0(regFuture: ChannelFuture, channel: Channel, localAddress: SocketAddress, promise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" >+ group(group: EventLoopGroup): B</TD></TR><TR><TD ALIGN="LEFT" >+ group(): EventLoopGroup</TD></TR><TR><TD ALIGN="LEFT" >+ handler(handler: ChannelHandler): B</TD></TR><TR><TD ALIGN="LEFT" ># handler(): ChannelHandler</TD></TR><TR><TD ALIGN="LEFT" ># init(channel: Channel)</TD></TR><TR><TD ALIGN="LEFT" ># initAndRegister(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >+ localAddress(localAddress: SocketAddress): B</TD></TR><TR><TD ALIGN="LEFT" >+ localAddress(inetPort: int): B</TD></TR><TR><TD ALIGN="LEFT" >+ localAddress(inetHost: String, inetPort: int): B</TD></TR><TR><TD ALIGN="LEFT" >+ localAddress(inetHost: InetAddress, inetPort: int): B</TD></TR><TR><TD ALIGN="LEFT" ># localAddress(): SocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># newAttributesArray(): Entry&lt;AttributeKey&lt;?&gt;, Object&gt;[]</TD></TR><TR><TD ALIGN="LEFT" ># newAttributesArray(attributes: Map&lt;AttributeKey&lt;?&gt;, Object&gt;): Entry&lt;AttributeKey&lt;?&gt;, Object&gt;[]</TD></TR><TR><TD ALIGN="LEFT" ># newOptionsArray(): Entry&lt;ChannelOption&lt;?&gt;, Object&gt;[]</TD></TR><TR><TD ALIGN="LEFT" ># newOptionsArray(options: Map&lt;ChannelOption&lt;?&gt;, Object&gt;): Entry&lt;ChannelOption&lt;?&gt;, Object&gt;[]</TD></TR><TR><TD ALIGN="LEFT" >+ option(option: ChannelOption&lt;T&gt;, value: T): B</TD></TR><TR><TD ALIGN="LEFT" ># options(): Map&lt;ChannelOption&lt;?&gt;, Object&gt;</TD></TR><TR><TD ALIGN="LEFT" ># options0(): Map&lt;ChannelOption&lt;?&gt;, Object&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ register(): ChannelFuture</TD></TR><TR><TD ALIGN="LEFT" >- self(): B</TD></TR><TR><TD ALIGN="LEFT" >+ validate(): B</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];FailedChannel952734618[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)FailedChannel</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   config: ChannelConfig [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ config(): ChannelConfig</TD></TR><TR><TD ALIGN="LEFT" ># doBeginRead()</TD></TR><TR><TD ALIGN="LEFT" ># doBind(localAddress: SocketAddress)</TD></TR><TR><TD ALIGN="LEFT" ># doClose()</TD></TR><TR><TD ALIGN="LEFT" ># doDisconnect()</TD></TR><TR><TD ALIGN="LEFT" ># doWrite(in: ChannelOutboundBuffer)</TD></TR><TR><TD ALIGN="LEFT" ># isCompatible(loop: EventLoop): boolean</TD></TR><TR><TD ALIGN="LEFT" ># localAddress0(): SocketAddress</TD></TR><TR><TD ALIGN="LEFT" >+ metadata(): ChannelMetadata</TD></TR><TR><TD ALIGN="LEFT" ># newUnsafe(): AbstractUnsafe</TD></TR><TR><TD ALIGN="LEFT" ># remoteAddress0(): SocketAddress</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];FailedChannelUnsafe738876050[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)FailedChannelUnsafe</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ connect(remoteAddress: SocketAddress, localAddress: SocketAddress, promise: ChannelPromise)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];ServerBootstrap952734618[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)ServerBootstrap</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   childAttrs: Map&lt;AttributeKey&lt;?&gt;, Object&gt; [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   childGroup: EventLoopGroup [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   childHandler: ChannelHandler [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   childOptions: Map&lt;ChannelOption&lt;?&gt;, Object&gt; [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   config: ServerBootstrapConfig [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ childAttr(childKey: AttributeKey&lt;T&gt;, value: T): ServerBootstrap</TD></TR><TR><TD ALIGN="LEFT" ># childAttrs(): Map&lt;AttributeKey&lt;?&gt;, Object&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ childGroup(): EventLoopGroup</TD></TR><TR><TD ALIGN="LEFT" >+ childHandler(childHandler: ChannelHandler): ServerBootstrap</TD></TR><TR><TD ALIGN="LEFT" ># childHandler(): ChannelHandler</TD></TR><TR><TD ALIGN="LEFT" >+ childOption(childOption: ChannelOption&lt;T&gt;, value: T): ServerBootstrap</TD></TR><TR><TD ALIGN="LEFT" ># childOptions(): Map&lt;ChannelOption&lt;?&gt;, Object&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ clone(): ServerBootstrap</TD></TR><TR><TD ALIGN="LEFT" >+ config(): ServerBootstrapConfig</TD></TR><TR><TD ALIGN="LEFT" >+ group(group: EventLoopGroup): ServerBootstrap</TD></TR><TR><TD ALIGN="LEFT" >+ group(parentGroup: EventLoopGroup, childGroup: EventLoopGroup): ServerBootstrap</TD></TR><TR><TD ALIGN="LEFT" ># init(channel: Channel)</TD></TR><TR><TD ALIGN="LEFT" >+ validate(): ServerBootstrap</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];ServerBootstrapAcceptor1475416073[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)ServerBootstrapAcceptor</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   childAttrs: Entry&lt;AttributeKey&lt;?&gt;, Object&gt;[] [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   childGroup: EventLoopGroup [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   childHandler: ChannelHandler [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   childOptions: Entry&lt;ChannelOption&lt;?&gt;, Object&gt;[] [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   enableAutoReadTask: Runnable [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ channelRead(ctx: ChannelHandlerContext, msg: Object)</TD></TR><TR><TD ALIGN="LEFT" >+ exceptionCaught(ctx: ChannelHandlerContext, cause: Throwable)</TD></TR><TR><TD ALIGN="LEFT" >- forceClose(child: Channel, t: Throwable)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];} subgraph cluster_507438174 {    	label=example	labeljust=l	fillcolor="#d8d8d8"	style=filled      Http2Server943683351[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)Http2Server</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   group: EventLoopGroup [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >- configureTLS(): SslContext</TD></TR><TR><TD ALIGN="LEFT" >+ start(): ChannelFuture</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];HttpServer943683351[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)HttpServer</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   group: EventLoopGroup [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ start(): ChannelFuture</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];} subgraph cluster_566773650 {    	label=resolver	labeljust=l	fillcolor="#d8d8d8"	style=filled      AbstractAddressResolver723558746[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AbstractAddressResolver&lt;T extends SocketAddress&gt;</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   executor: EventExecutor [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   matcher: TypeParameterMatcher [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ close()</TD></TR><TR><TD ALIGN="LEFT" ># doIsResolved(address: T): boolean</TD></TR><TR><TD ALIGN="LEFT" ># doResolve(unresolvedAddress: T, promise: Promise&lt;T&gt;)</TD></TR><TR><TD ALIGN="LEFT" ># doResolveAll(unresolvedAddress: T, promise: Promise&lt;List&lt;T&gt;&gt;)</TD></TR><TR><TD ALIGN="LEFT" ># executor(): EventExecutor</TD></TR><TR><TD ALIGN="LEFT" >+ isResolved(address: SocketAddress): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ isSupported(address: SocketAddress): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ resolve(address: SocketAddress): Future&lt;T&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ resolve(address: SocketAddress, promise: Promise&lt;T&gt;): Future&lt;T&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ resolveAll(address: SocketAddress): Future&lt;List&lt;T&gt;&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ resolveAll(address: SocketAddress, promise: Promise&lt;List&lt;T&gt;&gt;): Future&lt;List&lt;T&gt;&gt;</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];AddressResolverGroup723558746[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AddressResolverGroup&lt;T extends SocketAddress&gt;</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   executorTerminationListeners: Map&lt;EventExecutor, GenericFutureListener&lt;Future&lt;Object&gt;&gt;&gt; [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   resolvers: Map&lt;EventExecutor, AddressResolver&lt;T&gt;&gt; [0..*]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ close()</TD></TR><TR><TD ALIGN="LEFT" >+ getResolver(executor: EventExecutor): AddressResolver&lt;T&gt;</TD></TR><TR><TD ALIGN="LEFT" ># newResolver(executor: EventExecutor): AddressResolver&lt;T&gt;</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];AddressedEnvelopeAdapter1898111489[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AddressedEnvelopeAdapter</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   recipient: InetSocketAddress [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   response: DnsResponse [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   sender: InetSocketAddress [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ content(): DnsResponse</TD></TR><TR><TD ALIGN="LEFT" >+ recipient(): InetSocketAddress</TD></TR><TR><TD ALIGN="LEFT" >+ refCnt(): int</TD></TR><TR><TD ALIGN="LEFT" >+ release(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ release(decrement: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): AddressedEnvelope&lt;DnsResponse, InetSocketAddress&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): AddressedEnvelope&lt;DnsResponse, InetSocketAddress&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ sender(): InetSocketAddress</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): AddressedEnvelope&lt;DnsResponse, InetSocketAddress&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): AddressedEnvelope&lt;DnsResponse, InetSocketAddress&gt;</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DnsNameResolverBuilder2096288405[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DnsNameResolverBuilder</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   authoritativeDnsServerCache: AuthoritativeDnsServerCache [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   channelFactory: ChannelFactory&lt;? extends DatagramChannel&gt; [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   cnameCache: DnsCnameCache [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   completeOncePreferredResolved: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   decodeIdn: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   dnsQueryLifecycleObserverFactory: DnsQueryLifecycleObserverFactory [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   dnsServerAddressStreamProvider: DnsServerAddressStreamProvider [0..1]</TD></TR><TR><TD ALIGN="LEFT" >#   eventLoop: EventLoop [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   hostsFileEntriesResolver: HostsFileEntriesResolver [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   localAddress: SocketAddress [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   maxNumConsolidation: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   maxPayloadSize: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   maxQueriesPerResolve: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   maxTtl: Integer [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   minTtl: Integer [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   ndots: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   negativeTtl: Integer [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   optResourceEnabled: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   queryTimeoutMillis: long [1]</TD></TR><TR><TD ALIGN="LEFT" >-   recursionDesired: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   resolveCache: DnsCache [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   resolvedAddressTypes: ResolvedAddressTypes [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   searchDomains: String[] [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   socketChannelFactory: ChannelFactory&lt;? extends SocketChannel&gt; [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   traceEnabled: boolean [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ authoritativeDnsServerCache(authoritativeDnsServerCache: DnsCache): DnsNameResolverBuilder</TD></TR><TR><TD ALIGN="LEFT" >+ authoritativeDnsServerCache(authoritativeDnsServerCache: AuthoritativeDnsServerCache): DnsNameResolverBuilder</TD></TR><TR><TD ALIGN="LEFT" >+ build(): DnsNameResolver</TD></TR><TR><TD ALIGN="LEFT" ># channelFactory(): ChannelFactory&lt;? extends DatagramChannel&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ channelFactory(channelFactory: ChannelFactory&lt;? extends DatagramChannel&gt;): DnsNameResolverBuilder</TD></TR><TR><TD ALIGN="LEFT" >+ channelType(channelType: Class&lt;? extends DatagramChannel&gt;): DnsNameResolverBuilder</TD></TR><TR><TD ALIGN="LEFT" >+ cnameCache(cnameCache: DnsCnameCache): DnsNameResolverBuilder</TD></TR><TR><TD ALIGN="LEFT" >+ completeOncePreferredResolved(completeOncePreferredResolved: boolean): DnsNameResolverBuilder</TD></TR><TR><TD ALIGN="LEFT" >+ computeResolvedAddressTypes(internetProtocolFamilies: InternetProtocolFamily...): ResolvedAddressTypes</TD></TR><TR><TD ALIGN="LEFT" >+ consolidateCacheSize(maxNumConsolidation: int): DnsNameResolverBuilder</TD></TR><TR><TD ALIGN="LEFT" >+ copy(): DnsNameResolverBuilder</TD></TR><TR><TD ALIGN="LEFT" >+ decodeIdn(decodeIdn: boolean): DnsNameResolverBuilder</TD></TR><TR><TD ALIGN="LEFT" >+ dnsQueryLifecycleObserverFactory(lifecycleObserverFactory: DnsQueryLifecycleObserverFactory): DnsNameResolverBuilder</TD></TR><TR><TD ALIGN="LEFT" >+ eventLoop(eventLoop: EventLoop): DnsNameResolverBuilder</TD></TR><TR><TD ALIGN="LEFT" >+ hostsFileEntriesResolver(hostsFileEntriesResolver: HostsFileEntriesResolver): DnsNameResolverBuilder</TD></TR><TR><TD ALIGN="LEFT" >+ localAddress(localAddress: SocketAddress): DnsNameResolverBuilder</TD></TR><TR><TD ALIGN="LEFT" >+ maxPayloadSize(maxPayloadSize: int): DnsNameResolverBuilder</TD></TR><TR><TD ALIGN="LEFT" >+ maxQueriesPerResolve(maxQueriesPerResolve: int): DnsNameResolverBuilder</TD></TR><TR><TD ALIGN="LEFT" ># nameServerProvider(): DnsServerAddressStreamProvider</TD></TR><TR><TD ALIGN="LEFT" >+ nameServerProvider(dnsServerAddressStreamProvider: DnsServerAddressStreamProvider): DnsNameResolverBuilder</TD></TR><TR><TD ALIGN="LEFT" >+ ndots(ndots: int): DnsNameResolverBuilder</TD></TR><TR><TD ALIGN="LEFT" >+ negativeTtl(negativeTtl: int): DnsNameResolverBuilder</TD></TR><TR><TD ALIGN="LEFT" >- newAuthoritativeDnsServerCache(): AuthoritativeDnsServerCache</TD></TR><TR><TD ALIGN="LEFT" >- newCache(): DnsCache</TD></TR><TR><TD ALIGN="LEFT" >- newCnameCache(): DnsCnameCache</TD></TR><TR><TD ALIGN="LEFT" >+ optResourceEnabled(optResourceEnabled: boolean): DnsNameResolverBuilder</TD></TR><TR><TD ALIGN="LEFT" >+ queryTimeoutMillis(queryTimeoutMillis: long): DnsNameResolverBuilder</TD></TR><TR><TD ALIGN="LEFT" >+ recursionDesired(recursionDesired: boolean): DnsNameResolverBuilder</TD></TR><TR><TD ALIGN="LEFT" >+ resolveCache(resolveCache: DnsCache): DnsNameResolverBuilder</TD></TR><TR><TD ALIGN="LEFT" >+ resolvedAddressTypes(resolvedAddressTypes: ResolvedAddressTypes): DnsNameResolverBuilder</TD></TR><TR><TD ALIGN="LEFT" >+ searchDomains(searchDomains: Iterable&lt;String&gt;): DnsNameResolverBuilder</TD></TR><TR><TD ALIGN="LEFT" >+ socketChannelFactory(channelFactory: ChannelFactory&lt;? extends SocketChannel&gt;): DnsNameResolverBuilder</TD></TR><TR><TD ALIGN="LEFT" >+ socketChannelType(channelType: Class&lt;? extends SocketChannel&gt;): DnsNameResolverBuilder</TD></TR><TR><TD ALIGN="LEFT" >+ traceEnabled(traceEnabled: boolean): DnsNameResolverBuilder</TD></TR><TR><TD ALIGN="LEFT" >+ ttl(minTtl: int, maxTtl: int): DnsNameResolverBuilder</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DnsQueryContext2096288405[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DnsQueryContext</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   additionals: DnsRecord[] [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   id: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   nameServerAddr: InetSocketAddress [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   optResource: DnsRecord [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   parent: DnsNameResolver [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   promise: Promise&lt;AddressedEnvelope&lt;DnsResponse, InetSocketAddress&gt;&gt; [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   question: DnsQuestion [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   recursionDesired: boolean [1]</TD></TR><TR><TD ALIGN="LEFT" >-   timeoutFuture: Future&lt;?&gt; [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" ># channel(): Channel</TD></TR><TR><TD ALIGN="LEFT" >- failQuery(query: DnsQuery, cause: Throwable, writePromise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" ># finish(envelope: AddressedEnvelope&lt;? extends DnsResponse, InetSocketAddress&gt;)</TD></TR><TR><TD ALIGN="LEFT" >- hasOptRecord(additionals: DnsRecord[]): boolean</TD></TR><TR><TD ALIGN="LEFT" ># nameServerAddr(): InetSocketAddress</TD></TR><TR><TD ALIGN="LEFT" ># newQuery(id: int): DnsQuery</TD></TR><TR><TD ALIGN="LEFT" >- onQueryWriteCompletion(writeFuture: ChannelFuture)</TD></TR><TR><TD ALIGN="LEFT" >+ operationComplete(future: Future&lt;AddressedEnvelope&lt;DnsResponse, InetSocketAddress&gt;&gt;)</TD></TR><TR><TD ALIGN="LEFT" ># parent(): DnsNameResolver</TD></TR><TR><TD ALIGN="LEFT" ># protocol(): String</TD></TR><TR><TD ALIGN="LEFT" ># query(flush: boolean, writePromise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" ># question(): DnsQuestion</TD></TR><TR><TD ALIGN="LEFT" >- sendQuery(query: DnsQuery, flush: boolean, writePromise: ChannelPromise)</TD></TR><TR><TD ALIGN="LEFT" ># tryFailure(message: String, cause: Throwable, timeout: boolean): boolean</TD></TR><TR><TD ALIGN="LEFT" >- trySuccess(envelope: AddressedEnvelope&lt;? extends DnsResponse, InetSocketAddress&gt;): boolean</TD></TR><TR><TD ALIGN="LEFT" >- writeQuery(query: DnsQuery, flush: boolean, writePromise: ChannelPromise)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];InflightNameResolver2096288405[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)InflightNameResolver&lt;T&gt;</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   delegate: NameResolver&lt;T&gt; [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   executor: EventExecutor [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   resolveAllsInProgress: ConcurrentMap&lt;String, Promise&lt;List&lt;T&gt;&gt;&gt; [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   resolvesInProgress: ConcurrentMap&lt;String, Promise&lt;T&gt;&gt; [0..*]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ close()</TD></TR><TR><TD ALIGN="LEFT" >+ resolve(inetHost: String): Future&lt;T&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ resolve(inetHost: String, promise: Promise&lt;T&gt;): Promise&lt;T&gt;</TD></TR><TR><TD ALIGN="LEFT" >- resolve(resolveMap: ConcurrentMap&lt;String, Promise&lt;U&gt;&gt;, inetHost: String, promise: Promise&lt;U&gt;, resolveAll: boolean): Promise&lt;U&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ resolveAll(inetHost: String): Future&lt;List&lt;T&gt;&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ resolveAll(inetHost: String, promise: Promise&lt;List&lt;T&gt;&gt;): Promise&lt;List&lt;T&gt;&gt;</TD></TR><TR><TD ALIGN="LEFT" >- transferResult(src: Future&lt;T&gt;, dst: Promise&lt;T&gt;)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];SimpleNameResolver723558746[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)SimpleNameResolver&lt;T&gt;</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   executor: EventExecutor [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ close()</TD></TR><TR><TD ALIGN="LEFT" ># doResolve(inetHost: String, promise: Promise&lt;T&gt;)</TD></TR><TR><TD ALIGN="LEFT" ># doResolveAll(inetHost: String, promise: Promise&lt;List&lt;T&gt;&gt;)</TD></TR><TR><TD ALIGN="LEFT" ># executor(): EventExecutor</TD></TR><TR><TD ALIGN="LEFT" >+ resolve(inetHost: String): Future&lt;T&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ resolve(inetHost: String, promise: Promise&lt;T&gt;): Future&lt;T&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ resolveAll(inetHost: String): Future&lt;List&lt;T&gt;&gt;</TD></TR><TR><TD ALIGN="LEFT" >+ resolveAll(inetHost: String, promise: Promise&lt;List&lt;T&gt;&gt;): Future&lt;List&lt;T&gt;&gt;</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];} subgraph cluster_897684172 {    	label=buffer	labeljust=l	fillcolor="#d8d8d8"	style=filled      AbstractDerivedByteBuf617234796[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AbstractDerivedByteBuf</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ internalNioBuffer(index: int, length: int): ByteBuffer</TD></TR><TR><TD ALIGN="LEFT" >+ nioBuffer(index: int, length: int): ByteBuffer</TD></TR><TR><TD ALIGN="LEFT" >+ refCnt(): int</TD></TR><TR><TD ALIGN="LEFT" ># refCnt0(): int</TD></TR><TR><TD ALIGN="LEFT" >+ release(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ release(decrement: int): boolean</TD></TR><TR><TD ALIGN="LEFT" ># release0(): boolean</TD></TR><TR><TD ALIGN="LEFT" ># release0(decrement: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" ># retain0(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" ># retain0(increment: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" ># touch0(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" ># touch0(hint: Object): ByteBuf</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];AbstractReferenceCountedByteBuf617234796[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)AbstractReferenceCountedByteBuf</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   refCnt: int [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" ># deallocate()</TD></TR><TR><TD ALIGN="LEFT" >- handleRelease(result: boolean): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ refCnt(): int</TD></TR><TR><TD ALIGN="LEFT" >+ release(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ release(decrement: int): boolean</TD></TR><TR><TD ALIGN="LEFT" ># resetRefCnt()</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): ByteBuf</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];ByteBuf617234796[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)ByteBuf</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ alloc(): ByteBufAllocator</TD></TR><TR><TD ALIGN="LEFT" >+ array(): byte[]</TD></TR><TR><TD ALIGN="LEFT" >+ arrayOffset(): int</TD></TR><TR><TD ALIGN="LEFT" >+ asByteBuf(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ asReadOnly(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ bytesBefore(value: byte): int</TD></TR><TR><TD ALIGN="LEFT" >+ bytesBefore(length: int, value: byte): int</TD></TR><TR><TD ALIGN="LEFT" >+ bytesBefore(index: int, length: int, value: byte): int</TD></TR><TR><TD ALIGN="LEFT" >+ capacity(): int</TD></TR><TR><TD ALIGN="LEFT" >+ capacity(newCapacity: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ clear(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ compareTo(buffer: ByteBuf): int</TD></TR><TR><TD ALIGN="LEFT" >+ copy(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ copy(index: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ discardReadBytes(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ discardSomeReadBytes(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ duplicate(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ ensureWritable(minWritableBytes: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ ensureWritable(minWritableBytes: int, force: boolean): int</TD></TR><TR><TD ALIGN="LEFT" >+ forEachByte(processor: ByteProcessor): int</TD></TR><TR><TD ALIGN="LEFT" >+ forEachByte(index: int, length: int, processor: ByteProcessor): int</TD></TR><TR><TD ALIGN="LEFT" >+ forEachByteDesc(processor: ByteProcessor): int</TD></TR><TR><TD ALIGN="LEFT" >+ forEachByteDesc(index: int, length: int, processor: ByteProcessor): int</TD></TR><TR><TD ALIGN="LEFT" >+ getBoolean(index: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ getByte(index: int): byte</TD></TR><TR><TD ALIGN="LEFT" >+ getBytes(index: int, dst: ByteBuf): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ getBytes(index: int, dst: ByteBuf, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ getBytes(index: int, dst: ByteBuf, dstIndex: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ getBytes(index: int, dst: byte[]): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ getBytes(index: int, dst: byte[], dstIndex: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ getBytes(index: int, dst: ByteBuffer): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ getBytes(index: int, out: OutputStream, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ getBytes(index: int, out: GatheringByteChannel, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getBytes(index: int, out: FileChannel, position: long, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getChar(index: int): char</TD></TR><TR><TD ALIGN="LEFT" >+ getCharSequence(index: int, length: int, charset: Charset): CharSequence</TD></TR><TR><TD ALIGN="LEFT" >+ getDouble(index: int): double</TD></TR><TR><TD ALIGN="LEFT" >+ getDoubleLE(index: int): double</TD></TR><TR><TD ALIGN="LEFT" >+ getFloat(index: int): float</TD></TR><TR><TD ALIGN="LEFT" >+ getFloatLE(index: int): float</TD></TR><TR><TD ALIGN="LEFT" >+ getInt(index: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getIntLE(index: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getLong(index: int): long</TD></TR><TR><TD ALIGN="LEFT" >+ getLongLE(index: int): long</TD></TR><TR><TD ALIGN="LEFT" >+ getMedium(index: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getMediumLE(index: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getShort(index: int): short</TD></TR><TR><TD ALIGN="LEFT" >+ getShortLE(index: int): short</TD></TR><TR><TD ALIGN="LEFT" >+ getUnsignedByte(index: int): short</TD></TR><TR><TD ALIGN="LEFT" >+ getUnsignedInt(index: int): long</TD></TR><TR><TD ALIGN="LEFT" >+ getUnsignedIntLE(index: int): long</TD></TR><TR><TD ALIGN="LEFT" >+ getUnsignedMedium(index: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getUnsignedMediumLE(index: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getUnsignedShort(index: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getUnsignedShortLE(index: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ indexOf(fromIndex: int, toIndex: int, value: byte): int</TD></TR><TR><TD ALIGN="LEFT" >+ internalNioBuffer(index: int, length: int): ByteBuffer</TD></TR><TR><TD ALIGN="LEFT" >+ isReadable(size: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ isWritable(size: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ markReaderIndex(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ markWriterIndex(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ maxCapacity(): int</TD></TR><TR><TD ALIGN="LEFT" >+ maxFastWritableBytes(): int</TD></TR><TR><TD ALIGN="LEFT" >+ maxWritableBytes(): int</TD></TR><TR><TD ALIGN="LEFT" >+ memoryAddress(): long</TD></TR><TR><TD ALIGN="LEFT" >+ nioBuffer(): ByteBuffer</TD></TR><TR><TD ALIGN="LEFT" >+ nioBuffer(index: int, length: int): ByteBuffer</TD></TR><TR><TD ALIGN="LEFT" >+ nioBufferCount(): int</TD></TR><TR><TD ALIGN="LEFT" >+ nioBuffers(): ByteBuffer[]</TD></TR><TR><TD ALIGN="LEFT" >+ nioBuffers(index: int, length: int): ByteBuffer[]</TD></TR><TR><TD ALIGN="LEFT" >+ order(): ByteOrder</TD></TR><TR><TD ALIGN="LEFT" >+ order(endianness: ByteOrder): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readBoolean(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ readByte(): byte</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(dst: ByteBuf): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(dst: ByteBuf, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(dst: ByteBuf, dstIndex: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(dst: byte[]): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(dst: byte[], dstIndex: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(dst: ByteBuffer): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(out: OutputStream, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(out: GatheringByteChannel, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(out: FileChannel, position: long, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ readChar(): char</TD></TR><TR><TD ALIGN="LEFT" >+ readCharSequence(length: int, charset: Charset): CharSequence</TD></TR><TR><TD ALIGN="LEFT" >+ readDouble(): double</TD></TR><TR><TD ALIGN="LEFT" >+ readDoubleLE(): double</TD></TR><TR><TD ALIGN="LEFT" >+ readFloat(): float</TD></TR><TR><TD ALIGN="LEFT" >+ readFloatLE(): float</TD></TR><TR><TD ALIGN="LEFT" >+ readInt(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readIntLE(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readLong(): long</TD></TR><TR><TD ALIGN="LEFT" >+ readLongLE(): long</TD></TR><TR><TD ALIGN="LEFT" >+ readMedium(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readMediumLE(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readRetainedSlice(length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readShort(): short</TD></TR><TR><TD ALIGN="LEFT" >+ readShortLE(): short</TD></TR><TR><TD ALIGN="LEFT" >+ readSlice(length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readUnsignedByte(): short</TD></TR><TR><TD ALIGN="LEFT" >+ readUnsignedInt(): long</TD></TR><TR><TD ALIGN="LEFT" >+ readUnsignedIntLE(): long</TD></TR><TR><TD ALIGN="LEFT" >+ readUnsignedMedium(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readUnsignedMediumLE(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readUnsignedShort(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readUnsignedShortLE(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readableBytes(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readerIndex(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readerIndex(readerIndex: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ resetReaderIndex(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ resetWriterIndex(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ retainedDuplicate(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ retainedSlice(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ retainedSlice(index: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setBoolean(index: int, value: boolean): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setByte(index: int, value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setBytes(index: int, src: ByteBuf): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setBytes(index: int, src: ByteBuf, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setBytes(index: int, src: ByteBuf, srcIndex: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setBytes(index: int, src: byte[]): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setBytes(index: int, src: byte[], srcIndex: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setBytes(index: int, src: ByteBuffer): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setBytes(index: int, in: InputStream, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ setBytes(index: int, in: ScatteringByteChannel, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ setBytes(index: int, in: FileChannel, position: long, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ setChar(index: int, value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setCharSequence(index: int, sequence: CharSequence, charset: Charset): int</TD></TR><TR><TD ALIGN="LEFT" >+ setDouble(index: int, value: double): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setDoubleLE(index: int, value: double): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setFloat(index: int, value: float): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setFloatLE(index: int, value: float): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setIndex(readerIndex: int, writerIndex: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setInt(index: int, value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setIntLE(index: int, value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setLong(index: int, value: long): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setLongLE(index: int, value: long): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setMedium(index: int, value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setMediumLE(index: int, value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setShort(index: int, value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setShortLE(index: int, value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setZero(index: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ skipBytes(length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ slice(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ slice(index: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ unwrap(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writableBytes(): int</TD></TR><TR><TD ALIGN="LEFT" >+ writeBoolean(value: boolean): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeByte(value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeBytes(src: ByteBuf): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeBytes(src: ByteBuf, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeBytes(src: ByteBuf, srcIndex: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeBytes(src: byte[]): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeBytes(src: byte[], srcIndex: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeBytes(src: ByteBuffer): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeBytes(in: InputStream, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ writeBytes(in: ScatteringByteChannel, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ writeBytes(in: FileChannel, position: long, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ writeChar(value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeCharSequence(sequence: CharSequence, charset: Charset): int</TD></TR><TR><TD ALIGN="LEFT" >+ writeDouble(value: double): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeDoubleLE(value: double): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeFloat(value: float): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeFloatLE(value: float): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeInt(value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeIntLE(value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeLong(value: long): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeLongLE(value: long): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeMedium(value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeMediumLE(value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeShort(value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeShortLE(value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeZero(length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writerIndex(): int</TD></TR><TR><TD ALIGN="LEFT" >+ writerIndex(writerIndex: int): ByteBuf</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];DefaultByteBufHolder617234796[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)DefaultByteBufHolder</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   data: ByteBuf [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ content(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" ># contentToString(): String</TD></TR><TR><TD ALIGN="LEFT" >+ copy(): ByteBufHolder</TD></TR><TR><TD ALIGN="LEFT" >+ duplicate(): ByteBufHolder</TD></TR><TR><TD ALIGN="LEFT" >+ refCnt(): int</TD></TR><TR><TD ALIGN="LEFT" >+ release(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ release(decrement: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ replace(content: ByteBuf): ByteBufHolder</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): ByteBufHolder</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): ByteBufHolder</TD></TR><TR><TD ALIGN="LEFT" >+ retainedDuplicate(): ByteBufHolder</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): ByteBufHolder</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): ByteBufHolder</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];EmptyByteBuf617234796[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)EmptyByteBuf</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   alloc: ByteBufAllocator [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   order: ByteOrder [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   str: String [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   swapped: EmptyByteBuf [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ alloc(): ByteBufAllocator</TD></TR><TR><TD ALIGN="LEFT" >+ array(): byte[]</TD></TR><TR><TD ALIGN="LEFT" >+ arrayOffset(): int</TD></TR><TR><TD ALIGN="LEFT" >+ asReadOnly(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ bytesBefore(value: byte): int</TD></TR><TR><TD ALIGN="LEFT" >+ bytesBefore(length: int, value: byte): int</TD></TR><TR><TD ALIGN="LEFT" >+ bytesBefore(index: int, length: int, value: byte): int</TD></TR><TR><TD ALIGN="LEFT" >+ capacity(): int</TD></TR><TR><TD ALIGN="LEFT" >+ capacity(newCapacity: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >- checkIndex(index: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >- checkIndex(index: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >- checkLength(length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ clear(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ compareTo(buffer: ByteBuf): int</TD></TR><TR><TD ALIGN="LEFT" >+ copy(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ copy(index: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ discardReadBytes(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ discardSomeReadBytes(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ duplicate(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ ensureWritable(minWritableBytes: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ ensureWritable(minWritableBytes: int, force: boolean): int</TD></TR><TR><TD ALIGN="LEFT" >+ forEachByte(processor: ByteProcessor): int</TD></TR><TR><TD ALIGN="LEFT" >+ forEachByte(index: int, length: int, processor: ByteProcessor): int</TD></TR><TR><TD ALIGN="LEFT" >+ forEachByteDesc(processor: ByteProcessor): int</TD></TR><TR><TD ALIGN="LEFT" >+ forEachByteDesc(index: int, length: int, processor: ByteProcessor): int</TD></TR><TR><TD ALIGN="LEFT" >+ getBoolean(index: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ getByte(index: int): byte</TD></TR><TR><TD ALIGN="LEFT" >+ getBytes(index: int, dst: ByteBuf): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ getBytes(index: int, dst: ByteBuf, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ getBytes(index: int, dst: ByteBuf, dstIndex: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ getBytes(index: int, dst: byte[]): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ getBytes(index: int, dst: byte[], dstIndex: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ getBytes(index: int, dst: ByteBuffer): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ getBytes(index: int, out: OutputStream, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ getBytes(index: int, out: GatheringByteChannel, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getBytes(index: int, out: FileChannel, position: long, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getChar(index: int): char</TD></TR><TR><TD ALIGN="LEFT" >+ getCharSequence(index: int, length: int, charset: Charset): CharSequence</TD></TR><TR><TD ALIGN="LEFT" >+ getDouble(index: int): double</TD></TR><TR><TD ALIGN="LEFT" >+ getFloat(index: int): float</TD></TR><TR><TD ALIGN="LEFT" >+ getInt(index: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getIntLE(index: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getLong(index: int): long</TD></TR><TR><TD ALIGN="LEFT" >+ getLongLE(index: int): long</TD></TR><TR><TD ALIGN="LEFT" >+ getMedium(index: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getMediumLE(index: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getShort(index: int): short</TD></TR><TR><TD ALIGN="LEFT" >+ getShortLE(index: int): short</TD></TR><TR><TD ALIGN="LEFT" >+ getUnsignedByte(index: int): short</TD></TR><TR><TD ALIGN="LEFT" >+ getUnsignedInt(index: int): long</TD></TR><TR><TD ALIGN="LEFT" >+ getUnsignedIntLE(index: int): long</TD></TR><TR><TD ALIGN="LEFT" >+ getUnsignedMedium(index: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getUnsignedMediumLE(index: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getUnsignedShort(index: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getUnsignedShortLE(index: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ indexOf(fromIndex: int, toIndex: int, value: byte): int</TD></TR><TR><TD ALIGN="LEFT" >+ internalNioBuffer(index: int, length: int): ByteBuffer</TD></TR><TR><TD ALIGN="LEFT" >+ isReadable(size: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ isWritable(size: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ markReaderIndex(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ markWriterIndex(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ maxCapacity(): int</TD></TR><TR><TD ALIGN="LEFT" >+ maxWritableBytes(): int</TD></TR><TR><TD ALIGN="LEFT" >+ memoryAddress(): long</TD></TR><TR><TD ALIGN="LEFT" >+ nioBuffer(): ByteBuffer</TD></TR><TR><TD ALIGN="LEFT" >+ nioBuffer(index: int, length: int): ByteBuffer</TD></TR><TR><TD ALIGN="LEFT" >+ nioBufferCount(): int</TD></TR><TR><TD ALIGN="LEFT" >+ nioBuffers(): ByteBuffer[]</TD></TR><TR><TD ALIGN="LEFT" >+ nioBuffers(index: int, length: int): ByteBuffer[]</TD></TR><TR><TD ALIGN="LEFT" >+ order(): ByteOrder</TD></TR><TR><TD ALIGN="LEFT" >+ order(endianness: ByteOrder): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readBoolean(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ readByte(): byte</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(dst: ByteBuf): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(dst: ByteBuf, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(dst: ByteBuf, dstIndex: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(dst: byte[]): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(dst: byte[], dstIndex: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(dst: ByteBuffer): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(out: OutputStream, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(out: GatheringByteChannel, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(out: FileChannel, position: long, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ readChar(): char</TD></TR><TR><TD ALIGN="LEFT" >+ readCharSequence(length: int, charset: Charset): CharSequence</TD></TR><TR><TD ALIGN="LEFT" >+ readDouble(): double</TD></TR><TR><TD ALIGN="LEFT" >+ readFloat(): float</TD></TR><TR><TD ALIGN="LEFT" >+ readInt(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readIntLE(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readLong(): long</TD></TR><TR><TD ALIGN="LEFT" >+ readLongLE(): long</TD></TR><TR><TD ALIGN="LEFT" >+ readMedium(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readMediumLE(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readRetainedSlice(length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readShort(): short</TD></TR><TR><TD ALIGN="LEFT" >+ readShortLE(): short</TD></TR><TR><TD ALIGN="LEFT" >+ readSlice(length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readUnsignedByte(): short</TD></TR><TR><TD ALIGN="LEFT" >+ readUnsignedInt(): long</TD></TR><TR><TD ALIGN="LEFT" >+ readUnsignedIntLE(): long</TD></TR><TR><TD ALIGN="LEFT" >+ readUnsignedMedium(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readUnsignedMediumLE(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readUnsignedShort(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readUnsignedShortLE(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readableBytes(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readerIndex(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readerIndex(readerIndex: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ refCnt(): int</TD></TR><TR><TD ALIGN="LEFT" >+ release(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ release(decrement: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ resetReaderIndex(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ resetWriterIndex(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ retainedDuplicate(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ retainedSlice(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ retainedSlice(index: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setBoolean(index: int, value: boolean): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setByte(index: int, value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setBytes(index: int, src: ByteBuf): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setBytes(index: int, src: ByteBuf, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setBytes(index: int, src: ByteBuf, srcIndex: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setBytes(index: int, src: byte[]): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setBytes(index: int, src: byte[], srcIndex: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setBytes(index: int, src: ByteBuffer): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setBytes(index: int, in: InputStream, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ setBytes(index: int, in: ScatteringByteChannel, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ setBytes(index: int, in: FileChannel, position: long, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ setChar(index: int, value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setCharSequence(index: int, sequence: CharSequence, charset: Charset): int</TD></TR><TR><TD ALIGN="LEFT" >+ setDouble(index: int, value: double): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setFloat(index: int, value: float): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setIndex(readerIndex: int, writerIndex: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setInt(index: int, value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setIntLE(index: int, value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setLong(index: int, value: long): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setLongLE(index: int, value: long): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setMedium(index: int, value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setMediumLE(index: int, value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setShort(index: int, value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setShortLE(index: int, value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setZero(index: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ skipBytes(length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ slice(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ slice(index: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ unwrap(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writableBytes(): int</TD></TR><TR><TD ALIGN="LEFT" >+ writeBoolean(value: boolean): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeByte(value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeBytes(src: ByteBuf): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeBytes(src: ByteBuf, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeBytes(src: ByteBuf, srcIndex: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeBytes(src: byte[]): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeBytes(src: byte[], srcIndex: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeBytes(src: ByteBuffer): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeBytes(in: InputStream, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ writeBytes(in: ScatteringByteChannel, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ writeBytes(in: FileChannel, position: long, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ writeChar(value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeCharSequence(sequence: CharSequence, charset: Charset): int</TD></TR><TR><TD ALIGN="LEFT" >+ writeDouble(value: double): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeFloat(value: float): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeInt(value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeIntLE(value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeLong(value: long): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeLongLE(value: long): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeMedium(value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeMediumLE(value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeShort(value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeShortLE(value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeZero(length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writerIndex(): int</TD></TR><TR><TD ALIGN="LEFT" >+ writerIndex(writerIndex: int): ByteBuf</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];PoolThreadCache617234796[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)PoolThreadCache</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   allocations: int [1]</TD></TR><TR><TD ALIGN="LEFT" >#   directArena: PoolArena&lt;ByteBuffer&gt; [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   freeSweepAllocationThreshold: int [1]</TD></TR><TR><TD ALIGN="LEFT" >-   freed: AtomicBoolean [0..1]</TD></TR><TR><TD ALIGN="LEFT" >#   heapArena: PoolArena&lt;byte[]&gt; [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   normalDirectCaches: MemoryRegionCache&lt;ByteBuffer&gt;[] [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   normalHeapCaches: MemoryRegionCache&lt;byte[]&gt;[] [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   smallSubPageDirectCaches: MemoryRegionCache&lt;ByteBuffer&gt;[] [0..*]</TD></TR><TR><TD ALIGN="LEFT" >-   smallSubPageHeapCaches: MemoryRegionCache&lt;byte[]&gt;[] [0..*]</TD></TR><HR/><TR><TD ALIGN="LEFT" ># add(area: PoolArena&lt;?&gt;, chunk: PoolChunk, nioBuffer: ByteBuffer, handle: long, normCapacity: int, sizeClass: SizeClass): boolean</TD></TR><TR><TD ALIGN="LEFT" >- allocate(cache: MemoryRegionCache&lt;?&gt;, buf: PooledByteBuf, reqCapacity: int): boolean</TD></TR><TR><TD ALIGN="LEFT" ># allocateNormal(area: PoolArena&lt;?&gt;, buf: PooledByteBuf&lt;?&gt;, reqCapacity: int, sizeIdx: int): boolean</TD></TR><TR><TD ALIGN="LEFT" ># allocateSmall(area: PoolArena&lt;?&gt;, buf: PooledByteBuf&lt;?&gt;, reqCapacity: int, sizeIdx: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >- cache(area: PoolArena&lt;?&gt;, sizeIdx: int, sizeClass: SizeClass): MemoryRegionCache&lt;?&gt;</TD></TR><TR><TD ALIGN="LEFT" >- cache(cache: MemoryRegionCache&lt;T&gt;[], sizeIdx: int): MemoryRegionCache&lt;T&gt;</TD></TR><TR><TD ALIGN="LEFT" >- cacheForNormal(area: PoolArena&lt;?&gt;, sizeIdx: int): MemoryRegionCache&lt;?&gt;</TD></TR><TR><TD ALIGN="LEFT" >- cacheForSmall(area: PoolArena&lt;?&gt;, sizeIdx: int): MemoryRegionCache&lt;?&gt;</TD></TR><TR><TD ALIGN="LEFT" >- checkCacheMayLeak(caches: MemoryRegionCache&lt;?&gt;[], type: String)</TD></TR><TR><TD ALIGN="LEFT" >- createNormalCaches(cacheSize: int, maxCachedBufferCapacity: int, area: PoolArena&lt;T&gt;): MemoryRegionCache&lt;T&gt;[]</TD></TR><TR><TD ALIGN="LEFT" >- createSubPageCaches(cacheSize: int, numCaches: int): MemoryRegionCache&lt;T&gt;[]</TD></TR><TR><TD ALIGN="LEFT" ># finalize()</TD></TR><TR><TD ALIGN="LEFT" ># free(finalizer: boolean)</TD></TR><TR><TD ALIGN="LEFT" >- free(caches: MemoryRegionCache&lt;?&gt;[], finalizer: boolean): int</TD></TR><TR><TD ALIGN="LEFT" >- free(cache: MemoryRegionCache&lt;?&gt;, finalizer: boolean): int</TD></TR><TR><TD ALIGN="LEFT" ># log2(val: int): int</TD></TR><TR><TD ALIGN="LEFT" ># trim()</TD></TR><TR><TD ALIGN="LEFT" >- trim(caches: MemoryRegionCache&lt;?&gt;[])</TD></TR><TR><TD ALIGN="LEFT" >- trim(cache: MemoryRegionCache&lt;?&gt;)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];PoolThreadLocalCache1186546325[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)PoolThreadLocalCache</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   useCacheForAllThreads: boolean [1]</TD></TR><HR/><TR><TD ALIGN="LEFT" ># initialValue(): PoolThreadCache</TD></TR><TR><TD ALIGN="LEFT" >- leastUsedArena(arenas: PoolArena&lt;T&gt;[]): PoolArena&lt;T&gt;</TD></TR><TR><TD ALIGN="LEFT" ># onRemoval(threadCache: PoolThreadCache)</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];SwappedByteBuf617234796[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)SwappedByteBuf</TD></TR><HR/><TR><TD ALIGN="LEFT" >-   buf: ByteBuf [0..1]</TD></TR><TR><TD ALIGN="LEFT" >-   order: ByteOrder [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ alloc(): ByteBufAllocator</TD></TR><TR><TD ALIGN="LEFT" >+ array(): byte[]</TD></TR><TR><TD ALIGN="LEFT" >+ arrayOffset(): int</TD></TR><TR><TD ALIGN="LEFT" >+ asReadOnly(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ bytesBefore(value: byte): int</TD></TR><TR><TD ALIGN="LEFT" >+ bytesBefore(length: int, value: byte): int</TD></TR><TR><TD ALIGN="LEFT" >+ bytesBefore(index: int, length: int, value: byte): int</TD></TR><TR><TD ALIGN="LEFT" >+ capacity(): int</TD></TR><TR><TD ALIGN="LEFT" >+ capacity(newCapacity: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ clear(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ compareTo(buffer: ByteBuf): int</TD></TR><TR><TD ALIGN="LEFT" >+ copy(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ copy(index: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ discardReadBytes(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ discardSomeReadBytes(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ duplicate(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ ensureWritable(writableBytes: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ ensureWritable(minWritableBytes: int, force: boolean): int</TD></TR><TR><TD ALIGN="LEFT" >+ forEachByte(processor: ByteProcessor): int</TD></TR><TR><TD ALIGN="LEFT" >+ forEachByte(index: int, length: int, processor: ByteProcessor): int</TD></TR><TR><TD ALIGN="LEFT" >+ forEachByteDesc(processor: ByteProcessor): int</TD></TR><TR><TD ALIGN="LEFT" >+ forEachByteDesc(index: int, length: int, processor: ByteProcessor): int</TD></TR><TR><TD ALIGN="LEFT" >+ getBoolean(index: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ getByte(index: int): byte</TD></TR><TR><TD ALIGN="LEFT" >+ getBytes(index: int, dst: ByteBuf): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ getBytes(index: int, dst: ByteBuf, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ getBytes(index: int, dst: ByteBuf, dstIndex: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ getBytes(index: int, dst: byte[]): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ getBytes(index: int, dst: byte[], dstIndex: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ getBytes(index: int, dst: ByteBuffer): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ getBytes(index: int, out: OutputStream, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ getBytes(index: int, out: GatheringByteChannel, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getBytes(index: int, out: FileChannel, position: long, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getChar(index: int): char</TD></TR><TR><TD ALIGN="LEFT" >+ getCharSequence(index: int, length: int, charset: Charset): CharSequence</TD></TR><TR><TD ALIGN="LEFT" >+ getDouble(index: int): double</TD></TR><TR><TD ALIGN="LEFT" >+ getFloat(index: int): float</TD></TR><TR><TD ALIGN="LEFT" >+ getInt(index: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getIntLE(index: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getLong(index: int): long</TD></TR><TR><TD ALIGN="LEFT" >+ getLongLE(index: int): long</TD></TR><TR><TD ALIGN="LEFT" >+ getMedium(index: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getMediumLE(index: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getShort(index: int): short</TD></TR><TR><TD ALIGN="LEFT" >+ getShortLE(index: int): short</TD></TR><TR><TD ALIGN="LEFT" >+ getUnsignedByte(index: int): short</TD></TR><TR><TD ALIGN="LEFT" >+ getUnsignedInt(index: int): long</TD></TR><TR><TD ALIGN="LEFT" >+ getUnsignedIntLE(index: int): long</TD></TR><TR><TD ALIGN="LEFT" >+ getUnsignedMedium(index: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getUnsignedMediumLE(index: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getUnsignedShort(index: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getUnsignedShortLE(index: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ indexOf(fromIndex: int, toIndex: int, value: byte): int</TD></TR><TR><TD ALIGN="LEFT" >+ internalNioBuffer(index: int, length: int): ByteBuffer</TD></TR><TR><TD ALIGN="LEFT" >+ isReadable(size: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ isWritable(size: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ markReaderIndex(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ markWriterIndex(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ maxCapacity(): int</TD></TR><TR><TD ALIGN="LEFT" >+ maxFastWritableBytes(): int</TD></TR><TR><TD ALIGN="LEFT" >+ maxWritableBytes(): int</TD></TR><TR><TD ALIGN="LEFT" >+ memoryAddress(): long</TD></TR><TR><TD ALIGN="LEFT" >+ nioBuffer(): ByteBuffer</TD></TR><TR><TD ALIGN="LEFT" >+ nioBuffer(index: int, length: int): ByteBuffer</TD></TR><TR><TD ALIGN="LEFT" >+ nioBufferCount(): int</TD></TR><TR><TD ALIGN="LEFT" >+ nioBuffers(): ByteBuffer[]</TD></TR><TR><TD ALIGN="LEFT" >+ nioBuffers(index: int, length: int): ByteBuffer[]</TD></TR><TR><TD ALIGN="LEFT" >+ order(): ByteOrder</TD></TR><TR><TD ALIGN="LEFT" >+ order(endianness: ByteOrder): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readBoolean(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ readByte(): byte</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(dst: ByteBuf): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(dst: ByteBuf, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(dst: ByteBuf, dstIndex: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(dst: byte[]): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(dst: byte[], dstIndex: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(dst: ByteBuffer): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(out: OutputStream, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(out: GatheringByteChannel, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(out: FileChannel, position: long, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ readChar(): char</TD></TR><TR><TD ALIGN="LEFT" >+ readCharSequence(length: int, charset: Charset): CharSequence</TD></TR><TR><TD ALIGN="LEFT" >+ readDouble(): double</TD></TR><TR><TD ALIGN="LEFT" >+ readFloat(): float</TD></TR><TR><TD ALIGN="LEFT" >+ readInt(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readIntLE(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readLong(): long</TD></TR><TR><TD ALIGN="LEFT" >+ readLongLE(): long</TD></TR><TR><TD ALIGN="LEFT" >+ readMedium(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readMediumLE(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readRetainedSlice(length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readShort(): short</TD></TR><TR><TD ALIGN="LEFT" >+ readShortLE(): short</TD></TR><TR><TD ALIGN="LEFT" >+ readSlice(length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readUnsignedByte(): short</TD></TR><TR><TD ALIGN="LEFT" >+ readUnsignedInt(): long</TD></TR><TR><TD ALIGN="LEFT" >+ readUnsignedIntLE(): long</TD></TR><TR><TD ALIGN="LEFT" >+ readUnsignedMedium(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readUnsignedMediumLE(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readUnsignedShort(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readUnsignedShortLE(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readableBytes(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readerIndex(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readerIndex(readerIndex: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ refCnt(): int</TD></TR><TR><TD ALIGN="LEFT" >+ release(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ release(decrement: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ resetReaderIndex(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ resetWriterIndex(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ retainedDuplicate(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ retainedSlice(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ retainedSlice(index: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setBoolean(index: int, value: boolean): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setByte(index: int, value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setBytes(index: int, src: ByteBuf): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setBytes(index: int, src: ByteBuf, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setBytes(index: int, src: ByteBuf, srcIndex: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setBytes(index: int, src: byte[]): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setBytes(index: int, src: byte[], srcIndex: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setBytes(index: int, src: ByteBuffer): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setBytes(index: int, in: InputStream, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ setBytes(index: int, in: ScatteringByteChannel, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ setBytes(index: int, in: FileChannel, position: long, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ setChar(index: int, value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setCharSequence(index: int, sequence: CharSequence, charset: Charset): int</TD></TR><TR><TD ALIGN="LEFT" >+ setDouble(index: int, value: double): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setFloat(index: int, value: float): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setIndex(readerIndex: int, writerIndex: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setInt(index: int, value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setIntLE(index: int, value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setLong(index: int, value: long): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setLongLE(index: int, value: long): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setMedium(index: int, value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setMediumLE(index: int, value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setShort(index: int, value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setShortLE(index: int, value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setZero(index: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ skipBytes(length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ slice(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ slice(index: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ unwrap(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writableBytes(): int</TD></TR><TR><TD ALIGN="LEFT" >+ writeBoolean(value: boolean): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeByte(value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeBytes(src: ByteBuf): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeBytes(src: ByteBuf, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeBytes(src: ByteBuf, srcIndex: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeBytes(src: byte[]): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeBytes(src: byte[], srcIndex: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeBytes(src: ByteBuffer): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeBytes(in: InputStream, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ writeBytes(in: ScatteringByteChannel, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ writeBytes(in: FileChannel, position: long, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ writeChar(value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeCharSequence(sequence: CharSequence, charset: Charset): int</TD></TR><TR><TD ALIGN="LEFT" >+ writeDouble(value: double): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeFloat(value: float): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeInt(value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeIntLE(value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeLong(value: long): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeLongLE(value: long): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeMedium(value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeMediumLE(value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeShort(value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeShortLE(value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeZero(length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writerIndex(): int</TD></TR><TR><TD ALIGN="LEFT" >+ writerIndex(writerIndex: int): ByteBuf</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];WrappedByteBuf617234796[	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0"><TR><TD ALIGN="LEFT" >(C)WrappedByteBuf</TD></TR><HR/><TR><TD ALIGN="LEFT" >#   buf: ByteBuf [0..1]</TD></TR><HR/><TR><TD ALIGN="LEFT" >+ alloc(): ByteBufAllocator</TD></TR><TR><TD ALIGN="LEFT" >+ array(): byte[]</TD></TR><TR><TD ALIGN="LEFT" >+ arrayOffset(): int</TD></TR><TR><TD ALIGN="LEFT" >+ asReadOnly(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ bytesBefore(value: byte): int</TD></TR><TR><TD ALIGN="LEFT" >+ bytesBefore(length: int, value: byte): int</TD></TR><TR><TD ALIGN="LEFT" >+ bytesBefore(index: int, length: int, value: byte): int</TD></TR><TR><TD ALIGN="LEFT" >+ capacity(): int</TD></TR><TR><TD ALIGN="LEFT" >+ capacity(newCapacity: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ clear(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ compareTo(buffer: ByteBuf): int</TD></TR><TR><TD ALIGN="LEFT" >+ copy(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ copy(index: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ discardReadBytes(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ discardSomeReadBytes(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ duplicate(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ ensureWritable(minWritableBytes: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ ensureWritable(minWritableBytes: int, force: boolean): int</TD></TR><TR><TD ALIGN="LEFT" >+ forEachByte(processor: ByteProcessor): int</TD></TR><TR><TD ALIGN="LEFT" >+ forEachByte(index: int, length: int, processor: ByteProcessor): int</TD></TR><TR><TD ALIGN="LEFT" >+ forEachByteDesc(processor: ByteProcessor): int</TD></TR><TR><TD ALIGN="LEFT" >+ forEachByteDesc(index: int, length: int, processor: ByteProcessor): int</TD></TR><TR><TD ALIGN="LEFT" >+ getBoolean(index: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ getByte(index: int): byte</TD></TR><TR><TD ALIGN="LEFT" >+ getBytes(index: int, dst: ByteBuf): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ getBytes(index: int, dst: ByteBuf, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ getBytes(index: int, dst: ByteBuf, dstIndex: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ getBytes(index: int, dst: byte[]): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ getBytes(index: int, dst: byte[], dstIndex: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ getBytes(index: int, dst: ByteBuffer): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ getBytes(index: int, out: OutputStream, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ getBytes(index: int, out: GatheringByteChannel, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getBytes(index: int, out: FileChannel, position: long, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getChar(index: int): char</TD></TR><TR><TD ALIGN="LEFT" >+ getCharSequence(index: int, length: int, charset: Charset): CharSequence</TD></TR><TR><TD ALIGN="LEFT" >+ getDouble(index: int): double</TD></TR><TR><TD ALIGN="LEFT" >+ getFloat(index: int): float</TD></TR><TR><TD ALIGN="LEFT" >+ getInt(index: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getIntLE(index: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getLong(index: int): long</TD></TR><TR><TD ALIGN="LEFT" >+ getLongLE(index: int): long</TD></TR><TR><TD ALIGN="LEFT" >+ getMedium(index: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getMediumLE(index: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getShort(index: int): short</TD></TR><TR><TD ALIGN="LEFT" >+ getShortLE(index: int): short</TD></TR><TR><TD ALIGN="LEFT" >+ getUnsignedByte(index: int): short</TD></TR><TR><TD ALIGN="LEFT" >+ getUnsignedInt(index: int): long</TD></TR><TR><TD ALIGN="LEFT" >+ getUnsignedIntLE(index: int): long</TD></TR><TR><TD ALIGN="LEFT" >+ getUnsignedMedium(index: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getUnsignedMediumLE(index: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getUnsignedShort(index: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ getUnsignedShortLE(index: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ indexOf(fromIndex: int, toIndex: int, value: byte): int</TD></TR><TR><TD ALIGN="LEFT" >+ internalNioBuffer(index: int, length: int): ByteBuffer</TD></TR><TR><TD ALIGN="LEFT" >+ isReadable(size: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ isWritable(size: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ markReaderIndex(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ markWriterIndex(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ maxCapacity(): int</TD></TR><TR><TD ALIGN="LEFT" >+ maxFastWritableBytes(): int</TD></TR><TR><TD ALIGN="LEFT" >+ maxWritableBytes(): int</TD></TR><TR><TD ALIGN="LEFT" >+ memoryAddress(): long</TD></TR><TR><TD ALIGN="LEFT" >+ nioBuffer(): ByteBuffer</TD></TR><TR><TD ALIGN="LEFT" >+ nioBuffer(index: int, length: int): ByteBuffer</TD></TR><TR><TD ALIGN="LEFT" >+ nioBufferCount(): int</TD></TR><TR><TD ALIGN="LEFT" >+ nioBuffers(): ByteBuffer[]</TD></TR><TR><TD ALIGN="LEFT" >+ nioBuffers(index: int, length: int): ByteBuffer[]</TD></TR><TR><TD ALIGN="LEFT" >+ order(): ByteOrder</TD></TR><TR><TD ALIGN="LEFT" >+ order(endianness: ByteOrder): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readBoolean(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ readByte(): byte</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(dst: ByteBuf): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(dst: ByteBuf, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(dst: ByteBuf, dstIndex: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(dst: byte[]): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(dst: byte[], dstIndex: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(dst: ByteBuffer): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(out: OutputStream, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(out: GatheringByteChannel, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ readBytes(out: FileChannel, position: long, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ readChar(): char</TD></TR><TR><TD ALIGN="LEFT" >+ readCharSequence(length: int, charset: Charset): CharSequence</TD></TR><TR><TD ALIGN="LEFT" >+ readDouble(): double</TD></TR><TR><TD ALIGN="LEFT" >+ readFloat(): float</TD></TR><TR><TD ALIGN="LEFT" >+ readInt(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readIntLE(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readLong(): long</TD></TR><TR><TD ALIGN="LEFT" >+ readLongLE(): long</TD></TR><TR><TD ALIGN="LEFT" >+ readMedium(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readMediumLE(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readRetainedSlice(length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readShort(): short</TD></TR><TR><TD ALIGN="LEFT" >+ readShortLE(): short</TD></TR><TR><TD ALIGN="LEFT" >+ readSlice(length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ readUnsignedByte(): short</TD></TR><TR><TD ALIGN="LEFT" >+ readUnsignedInt(): long</TD></TR><TR><TD ALIGN="LEFT" >+ readUnsignedIntLE(): long</TD></TR><TR><TD ALIGN="LEFT" >+ readUnsignedMedium(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readUnsignedMediumLE(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readUnsignedShort(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readUnsignedShortLE(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readableBytes(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readerIndex(): int</TD></TR><TR><TD ALIGN="LEFT" >+ readerIndex(readerIndex: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ refCnt(): int</TD></TR><TR><TD ALIGN="LEFT" >+ release(): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ release(decrement: int): boolean</TD></TR><TR><TD ALIGN="LEFT" >+ resetReaderIndex(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ resetWriterIndex(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ retain(increment: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ retain(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ retainedDuplicate(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ retainedSlice(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ retainedSlice(index: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setBoolean(index: int, value: boolean): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setByte(index: int, value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setBytes(index: int, src: ByteBuf): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setBytes(index: int, src: ByteBuf, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setBytes(index: int, src: ByteBuf, srcIndex: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setBytes(index: int, src: byte[]): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setBytes(index: int, src: byte[], srcIndex: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setBytes(index: int, src: ByteBuffer): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setBytes(index: int, in: InputStream, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ setBytes(index: int, in: ScatteringByteChannel, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ setBytes(index: int, in: FileChannel, position: long, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ setChar(index: int, value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setCharSequence(index: int, sequence: CharSequence, charset: Charset): int</TD></TR><TR><TD ALIGN="LEFT" >+ setDouble(index: int, value: double): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setFloat(index: int, value: float): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setIndex(readerIndex: int, writerIndex: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setInt(index: int, value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setIntLE(index: int, value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setLong(index: int, value: long): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setLongLE(index: int, value: long): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setMedium(index: int, value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setMediumLE(index: int, value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setShort(index: int, value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setShortLE(index: int, value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ setZero(index: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ skipBytes(length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ slice(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ slice(index: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ touch(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ touch(hint: Object): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ unwrap(): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writableBytes(): int</TD></TR><TR><TD ALIGN="LEFT" >+ writeBoolean(value: boolean): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeByte(value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeBytes(src: ByteBuf): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeBytes(src: ByteBuf, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeBytes(src: ByteBuf, srcIndex: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeBytes(src: byte[]): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeBytes(src: byte[], srcIndex: int, length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeBytes(src: ByteBuffer): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeBytes(in: InputStream, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ writeBytes(in: ScatteringByteChannel, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ writeBytes(in: FileChannel, position: long, length: int): int</TD></TR><TR><TD ALIGN="LEFT" >+ writeChar(value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeCharSequence(sequence: CharSequence, charset: Charset): int</TD></TR><TR><TD ALIGN="LEFT" >+ writeDouble(value: double): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeFloat(value: float): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeInt(value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeIntLE(value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeLong(value: long): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeLongLE(value: long): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeMedium(value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeMediumLE(value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeShort(value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeShortLE(value: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writeZero(length: int): ByteBuf</TD></TR><TR><TD ALIGN="LEFT" >+ writerIndex(): int</TD></TR><TR><TD ALIGN="LEFT" >+ writerIndex(writerIndex: int): ByteBuf</TD></TR></TABLE>>	style=filled	margin=0	shape=plaintext	fillcolor="#FFFFFF"];} } 'edges    AbstractAddressResolver723558746 -> SingleThreadEventExecutor1377604431[label="executor[0..1]", arrowhead=none];AbstractBootstrap952734618 -> SingleThreadEventExecutor1377604431[label="group[0..1]", arrowhead=none];AbstractChannel1443455697 -> SingleThreadEventExecutor1377604431[label="eventLoop[0..1]", arrowhead=none];AbstractChannelHandlerContext1443455697 -> SingleThreadEventExecutor1377604431[label="executor[0..1]", arrowhead=none];AbstractEpollUnsafe152582730 -> EpollDatagramChannelUnsafe1786172217[arrowhead=none, arrowtail=empty, dir=both];AbstractEpollUnsafe152582730 -> EpollDomainDatagramChannelUnsafe1398445987[arrowhead=none, arrowtail=empty, dir=both];AbstractEpollUnsafe152582730 -> EpollRecvByteAllocatorHandle374638629[label="allocHandle[0..1]"];AbstractEpollUnsafe152582730 -> EpollServerSocketUnsafe271372217[arrowhead=none, arrowtail=empty, dir=both];AbstractEpollUnsafe152582730 -> EpollStreamUnsafe773602966[arrowhead=none, arrowtail=empty, dir=both];AbstractEpollUnsafe152582730 -> UnixChannelUtil1536580327[label="doFinishConnect() -> computeRemoteAddr()"];AbstractEventExecutor1377604431 -> AbstractScheduledEventExecutor1377604431[arrowhead=none, arrowtail=empty, dir=both];AbstractEventExecutor1377604431 -> SingleThreadEventExecutor1377604431[label="selfCollection[0..*]", arrowhead=none];AbstractFuture1377604431 -> CompleteFuture1377604431[arrowhead=none, arrowtail=empty, dir=both];AbstractFuture1377604431 -> DefaultPromise1377604431[arrowhead=none, arrowtail=empty, dir=both];AbstractKQueueUnsafe1055166062 -> KQueueDatagramChannelUnsafe1650171987[arrowhead=none, arrowtail=empty, dir=both];AbstractKQueueUnsafe1055166062 -> KQueueDomainDatagramChannelUnsafe355676719[arrowhead=none, arrowtail=empty, dir=both];AbstractKQueueUnsafe1055166062 -> KQueueRecvByteAllocatorHandle1098233563[label="allocHandle[0..1]"];AbstractKQueueUnsafe1055166062 -> KQueueServerSocketUnsafe1324232305[arrowhead=none, arrowtail=empty, dir=both];AbstractKQueueUnsafe1055166062 -> KQueueStreamUnsafe1826463054[arrowhead=none, arrowtail=empty, dir=both];AbstractKQueueUnsafe1055166062 -> UnixChannelUtil1536580327[label="doFinishConnect() -> computeRemoteAddr()"];AbstractNioUnsafe2133975018 -> AbstractChannel1443455697[label="fulfillConnectPromise() -> pipeline()"];AbstractNioUnsafe2133975018 -> AbstractEventExecutor1377604431[label="finishConnect() -> inEventLoop()"];AbstractNioUnsafe2133975018 -> AbstractScheduledEventExecutor1377604431[label="connect() -> schedule()"];AbstractNioUnsafe2133975018 -> NioByteUnsafe230911422[arrowhead=none, arrowtail=empty, dir=both];AbstractNioUnsafe2133975018 -> NioMessageUnsafe1150822965[arrowhead=none, arrowtail=empty, dir=both];AbstractScheduledEventExecutor1377604431 -> EmbeddedEventLoop506932119[arrowhead=none, arrowtail=empty, dir=both];AbstractScheduledEventExecutor1377604431 -> GlobalEventExecutor1377604431[arrowhead=none, arrowtail=empty, dir=both];AbstractScheduledEventExecutor1377604431 -> ScheduledFutureTask1377604431[label="scheduledTaskQueue[0..*]"];AbstractScheduledEventExecutor1377604431 -> SingleThreadEventExecutor1377604431[arrowhead=none, arrowtail=empty, dir=both];AbstractUnsafe1089015714 -> AbstractEpollUnsafe152582730[arrowhead=none, arrowtail=empty, dir=both];AbstractUnsafe1089015714 -> AbstractKQueueUnsafe1055166062[arrowhead=none, arrowtail=empty, dir=both];AbstractUnsafe1089015714 -> AbstractNioUnsafe2133975018[arrowhead=none, arrowtail=empty, dir=both];AbstractUnsafe1089015714 -> DefaultOioUnsafe100594776[arrowhead=none, arrowtail=empty, dir=both];AbstractUnsafe1089015714 -> DefaultServerUnsafe904617057[arrowhead=none, arrowtail=empty, dir=both];AbstractUnsafe1089015714 -> EmbeddedUnsafe1902943372[arrowhead=none, arrowtail=empty, dir=both];AbstractUnsafe1089015714 -> FailedChannelUnsafe738876050[arrowhead=none, arrowtail=empty, dir=both];AbstractUnsafe1089015714 -> LocalUnsafe1502639110[arrowhead=none, arrowtail=empty, dir=both];AbstractUnsafe1089015714 -> RxtxUnsafe1964255116[arrowhead=none, arrowtail=empty, dir=both];AddressResolverGroup723558746 -> SingleThreadEventExecutor1377604431[label="executorTerminationListeners[0..*]", arrowhead=none];AddressResolverGroup723558746 -> SingleThreadEventExecutor1377604431[label="resolvers[0..*]", arrowhead=none];CompleteChannelFuture1443455697 -> FailedChannelFuture1443455697[arrowhead=none, arrowtail=empty, dir=both];CompleteChannelFuture1443455697 -> SucceededChannelFuture1443455697[arrowhead=none, arrowtail=empty, dir=both];CompleteFuture1377604431 -> CompleteChannelFuture1443455697[arrowhead=none, arrowtail=empty, dir=both];CompleteFuture1377604431 -> FailedFuture1377604431[arrowhead=none, arrowtail=empty, dir=both];CompleteFuture1377604431 -> SingleThreadEventExecutor1377604431[label="executor[0..1]", arrowhead=none];CompleteFuture1377604431 -> SucceededFuture1377604431[arrowhead=none, arrowtail=empty, dir=both];DefaultChannelGroup376545536 -> AbstractBinaryMemcacheMessage1138614258[arrowhead=none];DefaultChannelGroup376545536 -> AbstractDnsMessage777384665[label="touch() -> touch()", arrowhead=none];DefaultChannelGroup376545536 -> AbstractDnsOptPseudoRrRecord777384665[arrowhead=none];DefaultChannelGroup376545536 -> AbstractDnsRecord777384665[arrowhead=none];DefaultChannelGroup376545536 -> AbstractEpollChannel374638629[arrowhead=none];DefaultChannelGroup376545536 -> AbstractEpollServerChannel374638629[arrowhead=none];DefaultChannelGroup376545536 -> AbstractEpollStreamChannel374638629[arrowhead=none];DefaultChannelGroup376545536 -> AbstractHttp2StreamFrame253769126[arrowhead=none];DefaultChannelGroup376545536 -> AbstractHttpData1443588886[label="content() -> content()", arrowhead=none];DefaultChannelGroup376545536 -> AbstractKQueueChannel1098233563[arrowhead=none];DefaultChannelGroup376545536 -> AbstractKQueueServerChannel1098233563[arrowhead=none];DefaultChannelGroup376545536 -> AbstractKQueueStreamChannel1098233563[arrowhead=none];DefaultChannelGroup376545536 -> AbstractMemcacheObject1408039139[label="decoderResult() -> decoderResult()", arrowhead=none];DefaultChannelGroup376545536 -> AbstractMixedHttpData1443588886[label="content() -> content()", arrowhead=none];DefaultChannelGroup376545536 -> AbstractNioByteChannel1712128213[label="metadata() -> metadata()", arrowhead=none];DefaultChannelGroup376545536 -> AbstractOioByteChannel1712129174[label="metadata() -> metadata()", arrowhead=none];DefaultChannelGroup376545536 -> AbstractReferenceCounted1023385430[arrowhead=none];DefaultChannelGroup376545536 -> AbstractServerChannel1443455697[arrowhead=none];DefaultChannelGroup376545536 -> AbstractSocks4Message1549993747[label="version() -> version()", arrowhead=none];DefaultChannelGroup376545536 -> AbstractSocks5Message1549993748[label="version() -> version()", arrowhead=none];DefaultChannelGroup376545536 -> AbstractSocksMessage1032885625[label="decoderResult() -> decoderResult()", arrowhead=none];DefaultChannelGroup376545536 -> AbstractStringRedisMessage244996309[arrowhead=none];DefaultChannelGroup376545536 -> AggregatedFullHttpMessage955985030[label="content() -> content()", arrowhead=none];DefaultChannelGroup376545536 -> AggregatedFullHttpRequest955985030[label="replace() -> replace()", arrowhead=none];DefaultChannelGroup376545536 -> AggregatedFullHttpResponse955985030[label="replace() -> replace()", arrowhead=none];DefaultChannelGroup376545536 -> ArrayHeaderRedisMessage244996309[arrowhead=none];DefaultChannelGroup376545536 -> ArrayRedisMessage244996309[label="touch() -> touch()", arrowhead=none];DefaultChannelGroup376545536 -> BulkStringHeaderRedisMessage244996309[arrowhead=none];DefaultChannelGroup376545536 -> ByteBuf617234796[label="safeDuplicate() -> retainedDuplicate()"];DefaultChannelGroup376545536 -> ClassMatcher1668350614[arrowhead=none];DefaultChannelGroup376545536 -> ComposedLastHttpContent1670754088[label="content() -> content()", arrowhead=none];DefaultChannelGroup376545536 -> CompositeMatcher1668350614[arrowhead=none];DefaultChannelGroup376545536 -> DatagramDnsQuery777384665[arrowhead=none];DefaultChannelGroup376545536 -> DatagramDnsResponse777384665[arrowhead=none];DefaultChannelGroup376545536 -> DatagramPacket871578350[arrowhead=none];DefaultChannelGroup376545536 -> DefaultAttributeMap1023385430[arrowhead=none];DefaultChannelGroup376545536 -> DefaultBinaryMemcacheRequest1138614258[arrowhead=none];DefaultChannelGroup376545536 -> DefaultBinaryMemcacheResponse1138614258[arrowhead=none];DefaultChannelGroup376545536 -> DefaultBulkStringRedisContent244996309[arrowhead=none];DefaultChannelGroup376545536 -> DefaultChannelHandlerContext1443455697[label="handler() -> handler()", arrowhead=none];DefaultChannelGroup376545536 -> DefaultChannelId1443455697[arrowhead=none];DefaultChannelGroup376545536 -> DefaultDnsOptEcsRecord777384665[arrowhead=none];DefaultChannelGroup376545536 -> DefaultDnsPtrRecord777384665[arrowhead=none];DefaultChannelGroup376545536 -> DefaultDnsQuery777384665[arrowhead=none];DefaultChannelGroup376545536 -> DefaultDnsQuestion777384665[arrowhead=none];DefaultChannelGroup376545536 -> DefaultDnsRawRecord777384665[label="content() -> content()", arrowhead=none];DefaultChannelGroup376545536 -> DefaultDnsResponse777384665[arrowhead=none];DefaultChannelGroup376545536 -> DefaultFileRegion1443455697[label="touch() -> touch()", arrowhead=none];DefaultChannelGroup376545536 -> DefaultFullBinaryMemcacheRequest1138614258[label="content() -> content()", arrowhead=none];DefaultChannelGroup376545536 -> DefaultFullBinaryMemcacheResponse1138614258[label="content() -> content()", arrowhead=none];DefaultChannelGroup376545536 -> DefaultFullHttpRequest1670754088[label="content() -> content()", arrowhead=none];DefaultChannelGroup376545536 -> DefaultFullHttpResponse1670754088[label="content() -> content()", arrowhead=none];DefaultChannelGroup376545536 -> DefaultHttp2GoAwayFrame253769126[label="name() -> name()", arrowhead=none];DefaultChannelGroup376545536 -> DefaultHttp2HeadersFrame253769126[label="stream() -> stream()", arrowhead=none];DefaultChannelGroup376545536 -> DefaultHttp2PingFrame253769126[label="name() -> name()", arrowhead=none];DefaultChannelGroup376545536 -> DefaultHttp2PriorityFrame253769126[arrowhead=none];DefaultChannelGroup376545536 -> DefaultHttp2PushPromiseFrame253769126[label="stream() -> stream()", arrowhead=none];DefaultChannelGroup376545536 -> DefaultHttp2ResetFrame253769126[label="stream() -> stream()", arrowhead=none];DefaultChannelGroup376545536 -> DefaultHttp2SettingsAckFrame253769126[arrowhead=none];DefaultChannelGroup376545536 -> DefaultHttp2SettingsFrame253769126[arrowhead=none];DefaultChannelGroup376545536 -> DefaultHttp2UnknownFrame253769126[arrowhead=none];DefaultChannelGroup376545536 -> DefaultHttp2WindowUpdateFrame253769126[label="stream() -> stream()", arrowhead=none];DefaultChannelGroup376545536 -> DefaultHttpContent1670754088[label="content() -> content()", arrowhead=none];DefaultChannelGroup376545536 -> DefaultHttpMessage1670754088[arrowhead=none];DefaultChannelGroup376545536 -> DefaultHttpObject1670754088[arrowhead=none];DefaultChannelGroup376545536 -> DefaultHttpRequest1670754088[arrowhead=none];DefaultChannelGroup376545536 -> DefaultHttpResponse1670754088[arrowhead=none];DefaultChannelGroup376545536 -> DefaultLastBulkStringRedisContent244996309[arrowhead=none];DefaultChannelGroup376545536 -> DefaultLastHttpContent1670754088[arrowhead=none];DefaultChannelGroup376545536 -> DefaultLastMemcacheContent1408039139[arrowhead=none];DefaultChannelGroup376545536 -> DefaultLastSmtpContent1670433114[arrowhead=none];DefaultChannelGroup376545536 -> DefaultLastStompContentSubframe243615231[arrowhead=none];DefaultChannelGroup376545536 -> DefaultMemcacheContent1408039139[label="content() -> content()", arrowhead=none];DefaultChannelGroup376545536 -> DefaultOpenSslKeyMaterial1346866284[label="touch() -> touch()", arrowhead=none];DefaultChannelGroup376545536 -> DefaultSmtpContent1670433114[arrowhead=none];DefaultChannelGroup376545536 -> DefaultSocks4CommandRequest1549993747[arrowhead=none];DefaultChannelGroup376545536 -> DefaultSocks4CommandResponse1549993747[arrowhead=none];DefaultChannelGroup376545536 -> DefaultSocks5CommandRequest1549993748[arrowhead=none];DefaultChannelGroup376545536 -> DefaultSocks5CommandResponse1549993748[arrowhead=none];DefaultChannelGroup376545536 -> DefaultSocks5InitialRequest1549993748[arrowhead=none];DefaultChannelGroup376545536 -> DefaultSocks5InitialResponse1549993748[arrowhead=none];DefaultChannelGroup376545536 -> DefaultSocks5PasswordAuthRequest1549993748[arrowhead=none];DefaultChannelGroup376545536 -> DefaultSocks5PasswordAuthResponse1549993748[arrowhead=none];DefaultChannelGroup376545536 -> DefaultSpdyGoAwayFrame1670430718[arrowhead=none];DefaultChannelGroup376545536 -> DefaultSpdyHeadersFrame1670430718[arrowhead=none];DefaultChannelGroup376545536 -> DefaultSpdyPingFrame1670430718[arrowhead=none];DefaultChannelGroup376545536 -> DefaultSpdyRstStreamFrame1670430718[arrowhead=none];DefaultChannelGroup376545536 -> DefaultSpdySettingsFrame1670430718[arrowhead=none];DefaultChannelGroup376545536 -> DefaultSpdyStreamFrame1670430718[arrowhead=none];DefaultChannelGroup376545536 -> DefaultSpdySynReplyFrame1670430718[arrowhead=none];DefaultChannelGroup376545536 -> DefaultSpdySynStreamFrame1670430718[arrowhead=none];DefaultChannelGroup376545536 -> DefaultSpdyWindowUpdateFrame1670430718[arrowhead=none];DefaultChannelGroup376545536 -> DefaultStompContentSubframe243615231[label="decoderResult() -> decoderResult()", arrowhead=none];DefaultChannelGroup376545536 -> DefaultStompFrame243615231[label="content() -> content()", arrowhead=none];DefaultChannelGroup376545536 -> DefaultStompHeadersSubframe243615231[label="decoderResult() -> decoderResult()", arrowhead=none];DefaultChannelGroup376545536 -> DomainDatagramPacket1536580327[arrowhead=none];DefaultChannelGroup376545536 -> EmbeddedChannelId506932119[arrowhead=none];DefaultChannelGroup376545536 -> EpollDatagramChannel374638629[label="metadata() -> metadata()", arrowhead=none];DefaultChannelGroup376545536 -> EpollDomainDatagramChannel374638629[arrowhead=none];DefaultChannelGroup376545536 -> EpollDomainSocketChannel374638629[arrowhead=none];DefaultChannelGroup376545536 -> EpollServerDomainSocketChannel374638629[arrowhead=none];DefaultChannelGroup376545536 -> EpollServerSocketChannel374638629[arrowhead=none];DefaultChannelGroup376545536 -> EpollSocketChannel374638629[arrowhead=none];DefaultChannelGroup376545536 -> FullBulkStringRedisMessage244996309[arrowhead=none];DefaultChannelGroup376545536 -> HAProxyMessage393479877[label="touch() -> touch()", arrowhead=none];DefaultChannelGroup376545536 -> HeadContext641825789[label="handler() -> handler()", arrowhead=none];DefaultChannelGroup376545536 -> Http2StreamChannelId253769126[arrowhead=none];DefaultChannelGroup376545536 -> InstanceMatcher1668350614[arrowhead=none];DefaultChannelGroup376545536 -> IntegerRedisMessage244996309[arrowhead=none];DefaultChannelGroup376545536 -> InternalAttribute1443588886[label="touch() -> touch()", arrowhead=none];DefaultChannelGroup376545536 -> InvertMatcher1668350614[arrowhead=none];DefaultChannelGroup376545536 -> KQueueDatagramChannel1098233563[arrowhead=none];DefaultChannelGroup376545536 -> KQueueDomainDatagramChannel1098233563[arrowhead=none];DefaultChannelGroup376545536 -> KQueueDomainSocketChannel1098233563[arrowhead=none];DefaultChannelGroup376545536 -> KQueueServerDomainSocketChannel1098233563[arrowhead=none];DefaultChannelGroup376545536 -> KQueueServerSocketChannel1098233563[arrowhead=none];DefaultChannelGroup376545536 -> KQueueSocketChannel1098233563[arrowhead=none];DefaultChannelGroup376545536 -> LocalServerChannel381061612[label="config() -> config()", arrowhead=none];DefaultChannelGroup376545536 -> MixedAttribute1443588886[arrowhead=none];DefaultChannelGroup376545536 -> MixedFileUpload1443588886[arrowhead=none];DefaultChannelGroup376545536 -> NioSctpServerChannel1638608943[arrowhead=none];DefaultChannelGroup376545536 -> NioServerSocketChannel1086947528[arrowhead=none];DefaultChannelGroup376545536 -> NioUdtAcceptorChannel224852652[arrowhead=none];DefaultChannelGroup376545536 -> NioUdtByteConnectorChannel224852652[arrowhead=none];DefaultChannelGroup376545536 -> NioUdtMessageConnectorChannel224852652[arrowhead=none];DefaultChannelGroup376545536 -> OioSctpServerChannel1638607982[arrowhead=none];DefaultChannelGroup376545536 -> OioServerSocketChannel1086946567[arrowhead=none];DefaultChannelGroup376545536 -> OpenSslPrivateKey1346866284[label="touch() -> touch()", arrowhead=none];DefaultChannelGroup376545536 -> OpenSslPrivateKeyMaterial1439296796[label="touch() -> touch()", arrowhead=none];DefaultChannelGroup376545536 -> PemPrivateKey1346866284[label="content() -> content()", arrowhead=none];DefaultChannelGroup376545536 -> PemValue1346866284[label="content() -> content()", arrowhead=none];DefaultChannelGroup376545536 -> PemX509Certificate1346866284[label="content() -> content()", arrowhead=none];DefaultChannelGroup376545536 -> ReferenceCountedOpenSslContext1346866284[arrowhead=none];DefaultChannelGroup376545536 -> ReferenceCountedOpenSslEngine1346866284[arrowhead=none];DefaultChannelGroup376545536 -> RxtxChannel1536500905[label="config() -> config()", arrowhead=none];DefaultChannelGroup376545536 -> SingleThreadEventExecutor1377604431[label="executor[0..1]", arrowhead=none];DefaultChannelGroup376545536 -> TailContext641825789[label="handler() -> handler()", arrowhead=none];DefaultChannelGroup376545536 -> UpgradeEvent934345935[arrowhead=none];DefaultChannelGroup376545536 -> VoidChannelGroupFuture376545536[label="voidFuture[0..1]"];DefaultChannelGroup376545536 -> WrappedFullHttpRequest1792398099[label="content() -> content()", arrowhead=none];DefaultChannelGroup376545536 -> WrappedHttpRequest1792398099[arrowhead=none];DefaultChannelPipeline1443455697 -> SingleThreadEventExecutor1377604431[label="childExecutors[0..*]", arrowhead=none];DefaultEventExecutor1377604431 -> AbstractEventExecutor1377604431[label="run() -> runTask()"];DefaultEventLoop1443455697 -> AbstractEventExecutor1377604431[label="run() -> runTask()"];DefaultOioUnsafe100594776 -> AbstractChannel1443455697[label="connect() -> pipeline()"];DefaultOioUnsafe100594776 -> AbstractOioChannel1712129174[label="connect() -> doConnect()"];DefaultPriorityQueue1713044053 -> ScheduledFutureTask1377604431[arrowhead=none];DefaultPriorityQueue1713044053 -> State403338467[arrowhead=none];DefaultPromise1377604431 -> AcquireListener431262754[label="operationComplete() -> operationComplete()", arrowhead=none];DefaultPromise1377604431 -> ChannelPromiseAggregator1443455697[arrowhead=none];DefaultPromise1377604431 -> ChannelPromiseNotifier1443455697[arrowhead=none];DefaultPromise1377604431 -> CloseFuture1089015714[label="tryFailure() -> tryFailure()"];DefaultPromise1377604431 -> ClosingChannelFutureListener53188018[label="operationComplete() -> operationComplete()", arrowhead=none];DefaultPromise1377604431 -> CompleteChannelFuture1443455697[arrowhead=none];DefaultPromise1377604431 -> DefaultChannelGroupFuture376545536[arrowhead=none, arrowtail=empty, dir=both];DefaultPromise1377604431 -> DefaultChannelPromise1443455697[arrowhead=none, arrowtail=empty, dir=both];DefaultPromise1377604431 -> DefaultFutureListeners1377604431[label="listeners[0..1]"];DefaultPromise1377604431 -> DefaultProgressivePromise1377604431[arrowhead=none, arrowtail=empty, dir=both];DefaultPromise1377604431 -> DelegatingChannelPromiseNotifier1443455697[label="operationComplete() -> operationComplete()", arrowhead=none];DefaultPromise1377604431 -> DnsQueryContext2096288405[label="operationComplete() -> operationComplete()", arrowhead=none];DefaultPromise1377604431 -> FlowControlledBase2036790335[label="operationComplete() -> operationComplete()", arrowhead=none];DefaultPromise1377604431 -> ImmediateProgressivePromise324063493[label="checkDeadLock() -> checkDeadLock()"];DefaultPromise1377604431 -> ImmediatePromise324063493[arrowhead=none, arrowtail=empty, dir=both];DefaultPromise1377604431 -> LazyChannelPromise1645235732[arrowhead=none, arrowtail=empty, dir=both];DefaultPromise1377604431 -> PlatformDependent1713044053[label="rethrowIfFailed() -> throwException()"];DefaultPromise1377604431 -> PromiseAggregator1377604431[arrowhead=none];DefaultPromise1377604431 -> PromiseNotifier1377604431[arrowhead=none];DefaultPromise1377604431 -> PromiseTask1377604431[arrowhead=none, arrowtail=empty, dir=both];DefaultPromise1377604431 -> ResultCallbackListener357515797[label="operationComplete() -> operationComplete()", arrowhead=none];DefaultPromise1377604431 -> ScheduledFutureTask1377604431[label="executor() -> executor()"];DefaultPromise1377604431 -> SingleThreadEventExecutor1377604431[label="executor[0..1]", arrowhead=none];DefaultPromise1377604431 -> SpliceInChannelTask773602966[label="operationComplete() -> operationComplete()", arrowhead=none];DefaultPromise1377604431 -> StringUtil1713044053[label="toStringBuilder() -> simpleClassName()"];DefaultPromise1377604431 -> UnaryPromiseNotifier1377604431[label="operationComplete() -> operationComplete()", arrowhead=none];DefaultPromise1377604431 -> WriteTimeoutTask1457442365[label="operationComplete() -> operationComplete()", arrowhead=none];DnsNameResolverBuilder2096288405 -> SingleThreadEventExecutor1377604431[label="eventLoop[0..1]", arrowhead=none];EmbeddedChannelHandlerContext1967908011 -> SingleThreadEventExecutor1377604431[label="eventLoop[0..1]", arrowhead=none];FastThreadLocal1377604431 -> PoolThreadLocalCache1186546325[arrowhead=none, arrowtail=empty, dir=both];FileDescriptor1536580327 -> Socket1536580327[arrowhead=none, arrowtail=empty, dir=both];FixedChannelPool1536432507 -> SingleThreadEventExecutor1377604431[label="executor[0..1]", arrowhead=none];GenericEventExecutorChooser1538551386 -> SingleThreadEventExecutor1377604431[label="executors[0..*]", arrowhead=none];Http2ChannelUnsafe1425394481 -> AdaptiveRecvByteBufAllocator1443455697[label="newHandle() -> newHandle()", arrowhead=none];Http2ChannelUnsafe1425394481 -> DefaultHttp2FrameStream921282753[arrowhead=none];Http2ChannelUnsafe1425394481 -> DefaultHttp2ResetFrame253769126[label="close() -> stream()"];Http2ChannelUnsafe1425394481 -> DefaultHttp2WindowUpdateFrame253769126[label="updateLocalWindowIfNeeded() -> stream()"];Http2ChannelUnsafe1425394481 -> DefaultMaxBytesRecvByteBufAllocator1443455697[label="newHandle() -> newHandle()", arrowhead=none];Http2ChannelUnsafe1425394481 -> DefaultMaxMessagesRecvByteBufAllocator1443455697[arrowhead=none];Http2ChannelUnsafe1425394481 -> DelegatingHandle894525563[arrowhead=none];Http2ChannelUnsafe1425394481 -> FixedRecvByteBufAllocator1443455697[label="newHandle() -> newHandle()", arrowhead=none];Http2ChannelUnsafe1425394481 -> HandleImpl1278513466[arrowhead=none];Http2ChannelUnsafe1425394481 -> Http2Exception253769126[label="wrapStreamClosedError() -> error()"];Http2ChannelUnsafe1425394481 -> PendingBytesTracker1443455697[arrowhead=none];Http2ChannelUnsafe1425394481 -> ServerChannelRecvByteBufAllocator1443455697[label="newHandle() -> newHandle()", arrowhead=none];Http2ChannelUnsafe1425394481 -> StringUtil1713044053[label="write() -> simpleClassName()"];Http2ChannelUnsafe1425394481 -> TestNumReadsRecvByteBufAllocator1308506274[arrowhead=none];Http2ChannelUnsafe1425394481 -> TestRecvByteBufAllocator201143292[arrowhead=none];Http2ChannelUnsafe1425394481 -> VoidChannelPromise1443455697[label="unsafeVoidPromise[0..1]"];Http2Server943683351 -> SingleThreadEventExecutor1377604431[label="group[0..1]", arrowhead=none];HttpServer943683351 -> SingleThreadEventExecutor1377604431[label="group[0..1]", arrowhead=none];InflightNameResolver2096288405 -> SingleThreadEventExecutor1377604431[label="executor[0..1]", arrowhead=none];InternalThreadLocalMap1713044053 -> FastThreadLocalThread1377604431[label="fastGet() -> threadLocalMap()"];InternalThreadLocalMap1713044053 -> IntegerHolder1713044053[label="counterHashCode[0..1]"];InternalThreadLocalMap1713044053 -> ThreadLocalRandom1713044053[label="random[0..1]"];InternalThreadLocalMap1713044053 -> TypeParameterMatcher1713044053[label="typeParameterMatcherFindCache[0..*]"];InternalThreadLocalMap1713044053 -> TypeParameterMatcher1713044053[label="typeParameterMatcherGetCache[0..*]"];IoTransport1612654261 -> SingleThreadEventExecutor1377604431[label="eventLoop[0..1]", arrowhead=none];IovArray1536580327 -> ByteBuf617234796[label="memory[0..1]"];IovArray1536580327 -> MyMessageProcessor1987616592[arrowhead=none];IovArray1536580327 -> ObjectUtil1713044053[label="maxBytes() -> checkPositive()"];KQueueEventLoop1098233563 -> AbstractKQueueChannel1098233563[label="channels[0..*]"];KQueueEventLoop1098233563 -> ChannelsReadOnlyIterator992346003[label="registeredChannelsIterator() -> empty()"];KQueueEventLoop1098233563 -> DefaultSelectStrategy1443455697[arrowhead=none];KQueueEventLoop1098233563 -> EmptyMap397406466[arrowhead=none];KQueueEventLoop1098233563 -> FileDescriptor1536580327[label="kqueueFd[0..1]"];KQueueEventLoop1098233563 -> IntObjectHashMap1112693814[arrowhead=none];KQueueEventLoop1098233563 -> IovArray1536580327[label="iovArray[0..1]"];KQueueEventLoop1098233563 -> KQueueEventArray1098233563[label="changeList[0..1]"];KQueueEventLoop1098233563 -> KQueueEventArray1098233563[label="eventList[0..1]"];KQueueEventLoop1098233563 -> UnmodifiableMap397406466[arrowhead=none];LocalUnsafe1502639110 -> AbstractChannel1443455697[label="connect() -> pipeline()"];LocalUnsafe1502639110 -> LocalChannel381061612[label="connect() -> doBind()"];LocalUnsafe1502639110 -> LocalChannelRegistry381061612[label="connect() -> get()"];LocalUnsafe1502639110 -> LocalServerChannel381061612[label="connect() -> serve()"];MultithreadEventExecutorGroup1377604431 -> SingleThreadEventExecutor1377604431[label="children[0..*]", arrowhead=none];MultithreadEventExecutorGroup1377604431 -> SingleThreadEventExecutor1377604431[label="readonlyChildren[0..*]", arrowhead=none];Native1098233563 -> Errors1536580327[label="keventWait() -> newIOException()"];Native1098233563 -> ThrowableUtil1713044053[label="loadNativeLibrary() -> addSuppressed()"];NonStickyEventExecutorGroup1377604431 -> SingleThreadEventExecutor1377604431[label="group[0..1]", arrowhead=none];PendingWriteQueue1443455697 -> SingleThreadEventExecutor1377604431[label="executor[0..1]", arrowhead=none];PlatformDependent1713044053 -> AbstractInternalLogger2048307398[arrowhead=none];PlatformDependent1713044053 -> CleanerJava61713044053[arrowhead=none];PlatformDependent1713044053 -> CleanerJava91713044053[arrowhead=none];PlatformDependent1713044053 -> ConstantTimeUtils1713044053[label="equalsConstantTime() -> equalsConstantTime()"];PlatformDependent1713044053 -> Log4J2Logger2048307398[arrowhead=none];PoolThreadLocalCache1186546325 -> AbstractEventExecutorGroup1377604431[arrowhead=none];PoolThreadLocalCache1186546325 -> AbstractEventLoop1443455697[label="next() -> next()", arrowhead=none];PoolThreadLocalCache1186546325 -> AbstractEventLoopGroup1443455697[label="next() -> next()", arrowhead=none];PoolThreadLocalCache1186546325 -> MultithreadEventLoopGroup1443455697[arrowhead=none];PoolThreadLocalCache1186546325 -> NonStickyEventExecutorGroup1377604431[arrowhead=none];PoolThreadLocalCache1186546325 -> PoolThreadCache617234796[label="onRemoval() -> free()"];PoolThreadLocalCache1186546325 -> ThreadExecutorMap1713044053[label="initialValue() -> currentExecutor()"];PowerOfTwoEventExecutorChooser1538551386 -> SingleThreadEventExecutor1377604431[label="executors[0..*]", arrowhead=none];PromiseCombiner1377604431 -> SingleThreadEventExecutor1377604431[label="executor[0..1]", arrowhead=none];PromiseTask1377604431 -> RunnableScheduledFutureTask1156059762[arrowhead=none, arrowtail=empty, dir=both];PromiseTask1377604431 -> ScheduledFutureTask1377604431[arrowhead=none, arrowtail=empty, dir=both];RxtxUnsafe1964255116 -> DefaultChannelConfig1443455697[arrowhead=none];RxtxUnsafe1964255116 -> DefaultDatagramChannelConfig871578350[arrowhead=none];RxtxUnsafe1964255116 -> DefaultOioDatagramChannelConfig1086946567[arrowhead=none];RxtxUnsafe1964255116 -> DefaultOioServerSocketChannelConfig1086946567[arrowhead=none];RxtxUnsafe1964255116 -> DefaultOioSocketChannelConfig1086946567[arrowhead=none];RxtxUnsafe1964255116 -> DefaultServerSocketChannelConfig871578350[arrowhead=none];RxtxUnsafe1964255116 -> DefaultSocketChannelConfig871578350[arrowhead=none];RxtxUnsafe1964255116 -> EpollDatagramChannelConfig374638629[arrowhead=none];RxtxUnsafe1964255116 -> EpollDomainSocketChannelConfig374638629[arrowhead=none];RxtxUnsafe1964255116 -> EpollServerChannelConfig374638629[arrowhead=none];RxtxUnsafe1964255116 -> EpollServerSocketChannelConfig374638629[arrowhead=none];RxtxUnsafe1964255116 -> EpollSocketChannelConfig374638629[arrowhead=none];RxtxUnsafe1964255116 -> KQueueDatagramChannelConfig1098233563[arrowhead=none];RxtxUnsafe1964255116 -> KQueueDomainSocketChannelConfig1098233563[arrowhead=none];RxtxUnsafe1964255116 -> KQueueServerChannelConfig1098233563[arrowhead=none];RxtxUnsafe1964255116 -> KQueueSocketChannelConfig1098233563[arrowhead=none];ScheduledFutureTask1377604431 -> DefaultPriorityQueue1713044053[arrowhead=none];ScheduledFutureTask1377604431 -> DefaultPromise1377604431[label="executor() -> executor()"];ScheduledFutureTask1377604431 -> EmptyPriorityQueue1713044053[arrowhead=none];ScheduledFutureTask1377604431 -> RunnableScheduledFutureTask1156059762[arrowhead=none];ServerBootstrap952734618 -> SingleThreadEventExecutor1377604431[label="childGroup[0..1]", arrowhead=none];ServerBootstrapAcceptor1475416073 -> SingleThreadEventExecutor1377604431[label="childGroup[0..1]", arrowhead=none];SimpleNameResolver723558746 -> SingleThreadEventExecutor1377604431[label="executor[0..1]", arrowhead=none];SingleThreadEventExecutor1377604431 -> AbstractEventExecutor1377604431[arrowhead=none];SingleThreadEventExecutor1377604431 -> AbstractEventExecutorGroup1377604431[arrowhead=none];SingleThreadEventExecutor1377604431 -> AbstractEventLoop1443455697[arrowhead=none];SingleThreadEventExecutor1377604431 -> AbstractEventLoopGroup1443455697[arrowhead=none];SingleThreadEventExecutor1377604431 -> AbstractFuture1377604431[arrowhead=none];SingleThreadEventExecutor1377604431 -> DefaultEventExecutor1377604431[arrowhead=none, arrowtail=empty, dir=both];SingleThreadEventExecutor1377604431 -> DefaultEventLoop1443455697[label="run() -> run()"];SingleThreadEventExecutor1377604431 -> DefaultThreadProperties447105988[arrowhead=none];SingleThreadEventExecutor1377604431 -> EmbeddedEventLoop506932119[arrowhead=none];SingleThreadEventExecutor1377604431 -> FailedChannelFuture1443455697[label="cause() -> cause()", arrowhead=none];SingleThreadEventExecutor1377604431 -> FailedFuture1377604431[label="cause() -> cause()", arrowhead=none];SingleThreadEventExecutor1377604431 -> FastThreadLocal1377604431[label="doStartThread() -> removeAll()"];SingleThreadEventExecutor1377604431 -> GlobalEventExecutor1377604431[arrowhead=none];SingleThreadEventExecutor1377604431 -> MultithreadEventLoopGroup1443455697[arrowhead=none];SingleThreadEventExecutor1377604431 -> NonStickyEventExecutorGroup1377604431[arrowhead=none];SingleThreadEventExecutor1377604431 -> NonStickyOrderedEventExecutor1867698281[arrowhead=none];SingleThreadEventExecutor1377604431 -> PlatformDependent1713044053[label="ensureThreadStarted() -> throwException()"];SingleThreadEventExecutor1377604431 -> ScheduledFutureTask1377604431[label="cancel() -> cancel()", arrowhead=none];SingleThreadEventExecutor1377604431 -> SingleThreadEventLoop1443455697[arrowhead=none, arrowtail=empty, dir=both];SingleThreadEventExecutor1377604431 -> SucceededChannelFuture1443455697[label="cause() -> cause()", arrowhead=none];SingleThreadEventExecutor1377604431 -> SucceededFuture1377604431[label="cause() -> cause()", arrowhead=none];SingleThreadEventExecutor1377604431 -> ThreadPerChannelEventLoop1443455697[label="run() -> run()"];SingleThreadEventExecutor1377604431 -> ThreadPerChannelEventLoopGroup1443455697[arrowhead=none];SingleThreadEventExecutor1377604431 -> UnorderedThreadPoolEventExecutor1377604431[arrowhead=none];SingleThreadEventLoop1443455697 -> DefaultEventLoop1443455697[arrowhead=none, arrowtail=empty, dir=both];SingleThreadEventLoop1443455697 -> KQueueEventLoop1098233563[arrowhead=none, arrowtail=empty, dir=both];SingleThreadEventLoop1443455697 -> ThreadPerChannelEventLoop1443455697[arrowhead=none, arrowtail=empty, dir=both];SocketTestPermutation1435837068 -> SingleThreadEventExecutor1377604431[label="nioBossGroup[0..1]", arrowhead=none];SocketTestPermutation1435837068 -> SingleThreadEventExecutor1377604431[label="nioWorkerGroup[0..1]", arrowhead=none];SocketTestPermutation1435837068 -> SingleThreadEventExecutor1377604431[label="oioBossGroup[0..1]", arrowhead=none];SocketTestPermutation1435837068 -> SingleThreadEventExecutor1377604431[label="oioWorkerGroup[0..1]", arrowhead=none];ThreadPerChannelEventLoop1443455697 -> AbstractEpollUnsafe152582730[label="connect() -> connect()", arrowhead=none];ThreadPerChannelEventLoop1443455697 -> AbstractKQueueUnsafe1055166062[label="connect() -> connect()", arrowhead=none];ThreadPerChannelEventLoop1443455697 -> AbstractNioUnsafe2133975018[label="connect() -> connect()", arrowhead=none];ThreadPerChannelEventLoop1443455697 -> AbstractUnsafe1089015714[arrowhead=none];ThreadPerChannelEventLoop1443455697 -> DefaultOioUnsafe100594776[label="connect() -> connect()", arrowhead=none];ThreadPerChannelEventLoop1443455697 -> DefaultServerUnsafe904617057[label="connect() -> connect()", arrowhead=none];ThreadPerChannelEventLoop1443455697 -> EmbeddedUnsafe1902943372[label="connect() -> connect()", arrowhead=none];ThreadPerChannelEventLoop1443455697 -> FailedChannelUnsafe738876050[label="connect() -> connect()", arrowhead=none];ThreadPerChannelEventLoop1443455697 -> Http2ChannelUnsafe1425394481[arrowhead=none];ThreadPerChannelEventLoop1443455697 -> LocalUnsafe1502639110[label="connect() -> connect()", arrowhead=none];ThreadPerChannelEventLoop1443455697 -> RxtxUnsafe1964255116[label="connect() -> connect()", arrowhead=none];ThreadPerChannelEventLoop1443455697 -> ThreadPerChannelEventLoopGroup1443455697[label="parent[0..1]"];UnmodifiableMap397406466 -> EntryImpl1395076945[arrowhead=none];UnmodifiableMap397406466 -> PrimitiveIterator1622999976[arrowhead=none];UnorderedThreadPoolEventExecutor1377604431 -> SingleThreadEventExecutor1377604431[label="executorSet[0..*]", arrowhead=none];UnpaddedInternalThreadLocalMap1713044053 -> InternalThreadLocalMap1713044053[arrowhead=none, arrowtail=empty, dir=both];VoidChannelGroupFuture376545536 -> DefaultChannelGroup376545536[arrowhead=none];VoidChannelGroupFuture376545536 -> DefaultChannelGroupFuture376545536[arrowhead=none];    }@enduml